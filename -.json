{
  "data": [
    {
      "createdAt": "2025-06-11T20:02:42.933Z",
      "updatedAt": "2025-06-13T14:43:14.248Z",
      "id": "vRo31gG7fpG76CWG",
      "name": "PDF Summary",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -6500,
            3100
          ],
          "id": "917b75c6-6019-4fdf-bea1-aa0aa5d12792",
          "name": "On form submission",
          "webhookId": "296d51cf-550a-476f-be81-4aa1b5ebc4c4"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -5840,
            3100
          ],
          "id": "b5ac998b-62a2-49fd-b721-ae294f4a9f10",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5464,
            3100
          ],
          "id": "827a0152-84fc-406f-a13c-b89ac153d4ea",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -5752,
            3320
          ],
          "id": "06f37eb9-ee4d-4b92-8663-5d1e8017c246",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\n\nreturn items.map((item, index) => {\n  console.log(`=== PROCESSING ITEM ${index + 1} ===`);\n  console.log('Full item structure:', JSON.stringify(item, null, 2));\n  \n  let originalFileName = null;\n  let binaryData = {};\n  \n  // Method 1: Check if binary data exists and extract filename\n  if (item.binary && Object.keys(item.binary).length > 0) {\n    console.log('Binary data found. Keys:', Object.keys(item.binary));\n    \n    // Usually the form field name is 'data' for file uploads\n    const binaryKey = Object.keys(item.binary)[0]; // Get first binary key\n    console.log('Using binary key:', binaryKey);\n    \n    if (item.binary[binaryKey]) {\n      binaryData = {};\n      binaryData[binaryKey] = item.binary[binaryKey];\n      \n      // Extract filename from binary data\n      const binaryInfo = item.binary[binaryKey];\n      console.log('Binary info:', {\n        fileName: binaryInfo.fileName,\n        mimeType: binaryInfo.mimeType,\n        fileExtension: binaryInfo.fileExtension,\n        hasData: !!binaryInfo.data\n      });\n      \n      // Try multiple ways to get filename\n      originalFileName = binaryInfo.fileName || \n                       binaryInfo.filename || \n                       binaryInfo.name ||\n                       binaryInfo.originalname;\n      \n      console.log('Extracted filename:', originalFileName);\n    }\n  }\n  \n  // Method 2: Check form data structure\n  if (!originalFileName && item.json) {\n    console.log('Checking JSON structure for filename...');\n    \n    // Check if there's form data with filename\n    if (item.json.data && Array.isArray(item.json.data)) {\n      const fileField = item.json.data.find(field => \n        field.fieldName === 'data' || \n        field.fieldType === 'file' ||\n        field.filename ||\n        field.fileName\n      );\n      \n      if (fileField) {\n        originalFileName = fileField.filename || \n                         fileField.fileName || \n                         fileField.name;\n        console.log('Found filename in form data:', originalFileName);\n      }\n    }\n    \n    // Direct filename fields\n    if (!originalFileName) {\n      originalFileName = item.json.filename || \n                       item.json.fileName || \n                       item.json.originalFileName ||\n                       item.json.name;\n      console.log('Found filename in JSON:', originalFileName);\n    }\n  }\n  \n  // Method 3: Generate filename if still not found - BUT KEEP IT SIMPLE\n  if (!originalFileName || originalFileName === 'undefined' || originalFileName === '') {\n    console.log('No filename found, using default...');\n    // Use a simple default that won't cause issues\n    originalFileName = 'uploaded-document.pdf';\n    console.log('Using default filename:', originalFileName);\n  }\n  \n  // Clean up filename (remove any problematic characters but preserve original name structure)\n  // Only replace truly problematic characters, keep hyphens and underscores\n  originalFileName = originalFileName.replace(/[<>:\"/\\\\|?*]/g, '_');\n  \n  // Ensure .pdf extension\n  if (!originalFileName.toLowerCase().endsWith('.pdf')) {\n    const nameWithoutExt = originalFileName.split('.')[0];\n    originalFileName = nameWithoutExt + '.pdf';\n  }\n  \n  console.log('Final filename:', originalFileName);\n  \n  // Validation\n  const hasValidFilename = originalFileName && originalFileName !== 'undefined';\n  const hasValidBinary = Object.keys(binaryData).length > 0;\n  \n  console.log('Validation:');\n  console.log('- Valid filename:', hasValidFilename);\n  console.log('- Valid binary data:', hasValidBinary);\n  console.log('- Binary data keys:', Object.keys(binaryData));\n  \n  if (hasValidBinary) {\n    const firstBinaryKey = Object.keys(binaryData)[0];\n    console.log('- Binary data size:', binaryData[firstBinaryKey]?.data?.length || 'unknown');\n  }\n  \n  console.log('================================');\n  \n  return {\n    json: {\n      ...item.json,\n      originalFileName: originalFileName,\n      processingTimestamp: new Date().toISOString(),\n      validationStatus: {\n        hasFilename: hasValidFilename,\n        hasBinary: hasValidBinary,\n        readyForUpload: hasValidFilename && hasValidBinary\n      },\n      extractionMethod: 'enhanced_extraction_v3'\n    },\n    binary: binaryData\n  };\n});"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6280,
            3100
          ],
          "id": "3dc03617-5314-43dc-a250-f55bdc347f40",
          "name": "Binary Data Extraction"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -6060,
            3100
          ],
          "id": "3e11a87e-304e-4b44-93c2-e84de6c4fa26",
          "name": "Extract from File1",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "resource": "databasePage",
            "databaseId": {
              "__rl": true,
              "value": "2087112e-57b9-80d4-af14-e4989ea2920c",
              "mode": "list",
              "cachedResultName": "PDF Summary table",
              "cachedResultUrl": "https://www.notion.so/2087112e57b980d4af14e4989ea2920c"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -5244,
            3100
          ],
          "id": "82663fbf-57b5-466f-9369-ac31c6fed6c4",
          "name": "Notion_PDF Summary TABLE",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Binary Data Extraction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Notion_PDF Summary TABLE",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Binary Data Extraction": {
          "main": [
            [
              {
                "node": "Extract from File1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File1": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "aa881900-8115-4070-9f64-8d5c903e9d59",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:32:38.406Z",
      "updatedAt": "2025-06-12T19:32:38.406Z",
      "id": "eGXziucI1UZkGfL4",
      "name": "write_seo_optimized_listicle_article",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Best Tools In Category",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "Category Slug",
                  "placeholder": "ai-marketing-tools",
                  "requiredField": true
                },
                {
                  "fieldLabel": "Audience",
                  "placeholder": "Job seekers, employees, and recruiters",
                  "requiredField": true
                },
                {
                  "fieldLabel": "Tool Slugs To Include",
                  "placeholder": "Optional list comma-separated list of tool slugs to include"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -420,
            200
          ],
          "id": "426d8d00-5b09-4330-bd40-d49afb42ab40",
          "name": "form_trigger",
          "webhookId": "3ddd7911-86a3-455a-b766-05b0cfc12dc5"
        },
        {
          "parameters": {
            "content": "## Construct Deep Research Prompt",
            "height": 620,
            "width": 2080
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -220,
            -40
          ],
          "typeVersion": 1,
          "id": "6ce79944-6f0b-43b5-8afe-e901c80acd61",
          "name": "Sticky Note"
        },
        {
          "parameters": {
            "url": "=https://api.aitools.inc/categories/{{ $json['Category Slug'] }}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -140,
            200
          ],
          "id": "67594395-4644-4ffb-90ca-a5adc8f73dd5",
          "name": "fetch_category"
        },
        {
          "parameters": {
            "url": "=https://q0fo807q.api.sanity.io/v2025-04-03/data/query/production?query=*%5B_type+%3D%3D+%22tool%22+%26%26+%24categorySlug+in+categories%5B%5D+-%3E+slug.current%5D+%7B%0A++_id%2C%0A++title%2C%0A++%22slug%22%3A+slug.current%2C%0A++%22websiteUrl%22%3A+tool_urls.website_url%2C%0A++meta_description%0A%7D&%24categorySlug=%22{{ $json.slug.current }}%22&perspective=published",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            80,
            200
          ],
          "id": "eab65c4c-b68c-4873-b719-f6e2b06b3a5f",
          "name": "fetch_category_tools"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "9481198d-c856-410a-b852-8adfa96794e6",
                  "name": "category_tools",
                  "value": "={{ $json.result }}",
                  "type": "array"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            320,
            200
          ],
          "id": "904df827-700a-4685-aa6f-ada43fc2ca63",
          "name": "set_category_tools"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3eebc0cf-6950-4b6a-bbf0-a1b8584aa1dc",
                  "name": "deep_research_prompt",
                  "value": "=## **Task Instructions**\n\nYour task is to research the provided {{ $('fetch_category').item.json.title }} and prepare a report to the exact specification detailed below. Tools included in this report must be part of the provided list and you must output your report exactly as the instructions state. Think carefully and deeply about all of these requirements.\n\n1. You have been provided with JSON in the `{{ $('fetch_category').item.json.title }} Tool List JSON` section (included in this prompt) that contains a JSON array of AI tools relevant to the category “{{ $('fetch_category').item.json.title }}”. You are ONLY allowed to use these tools in your research and in your final output selection of top tools. Keep this in mind throughout the entire research process. You must make note of this in your research plan to confirm you understand. Sometimes this category may be very broad with a lot of tools, if that is the case you should use your best judgement in order to filter down this list to the tools that truly are {{ $('fetch_category').item.json.title }} and are best for the target audince.\n    - **JSON Structure**: Each item in the JSON array will include the following fields for each tool: `_id` (unique tool identifier), `title` (tool name), `slug`, `websiteUrl`, and `meta_description`. Read and parse this list of tools carefully to understand the entire scope of tools you will be researching.\n\n2. **Count the Total Number of Tools and List out each tool**\n    - Read and parse the tools in the `{{ $('fetch_category').item.json.title }} Tool List JSON` section (included in this prompt and wrapped in backticks to indicate it is code), and count the total number of tool items in the JSON array. Before starting your research, you must confirm the tool items you have counted with me. I am expecting you to see *{{ $node[\"fetch_category_tools\"].json.result.length }}* tools here that you will consider for your research and analysis.\n    - List out each tool provided in the `{{ $('fetch_category').item.json.title }} Tool List JSON` section that you plan to research and consider for picking the best tools. Please include the tool name and website url for the tool. You should use this as a reference to help guide your research for possible tools to include in your final output. It is critical that you only research these tools.\n    - In your message, you must include both the total count of tools and the list of every tool to evaluate.\n\n3. **Research Best {{ $('fetch_category').item.json.title }} (Primary Research Task)**\n    - Investigate **only** the tools that appear in the `{{ $('fetch_category').item.json.title }} Tool List JSON` section. Do not consider tools outside this provided JSON array of tools. THIS IS CRITICAL, YOU MUST ONLY CONSIDER THE TOOLS PROVIDED IN THE JSON ARRAY BELOW. DO NOT INCLUDE A TOOL IN YOUR TOP 6-8 TOOLS OUTPUT UNLESS IT IS IN THE JSON ARRAY PROVIDED.\n    - Look for information on popularity, features, community sentiment, pros/cons, and notable use cases. Use reliable sources such as:\n        - User discussions on Reddit, Stack Overflow, Hacker News.\n        - Product review platforms (G2, Capterra, TrustRadius, TrustPilot).\n        - Official websites and reputable professional blogs.\n    - **Timeframe**: Focus on reviews, discussions, and updates within the last 12–18 months to ensure the information is recent and relevant.\n\n{{\n  $('form_trigger').item.json['Tool Slugs To Include']\n    ? \"4. Your MUST include these tools in your research and include each of them in your final output for the best 6-8 selected tools. We have already done some initial research on these tools and know they are part of the best tools we want to feature. The values below are the slugs of the tools in our system. You should match these slugs against the full list of tools listed in the provided JSON section to get more details about the tools.:\\n\" + $('form_trigger').item.json['Tool Slugs To Include'].split(\",\").map(tool => \"\\t- \" + tool.trim()).join(\"\\n\")\n    : \"\\n\"\n}}\n\nYou must pay close attention to these details and include them in your research plan. It is extremely important that you understand this and follow through on these instructions. Use all text here I am providing you as your research plan verbatim. If you miss any details on your research plan will mean a failure for this task. Make sure there is no placeholder text or example text that leaks into the research plan.\n\nUSE EVERYTHING THAT I AM GIVING YOU HERE IN YOUR RESEARCH PLAN. DO NOT REMOVE ANY DETAILS. THIS WILL BE CONSIDERED A FAILED TASK IF YOU REMOVE ANY DETAILS.\n\n### **Evaluation Criteria**\n\n1. **Popularity & Adoption**: Which tools receive consistent, positive mentions or recommendations in online communities?\n2. **Features & Capabilities**: Identify standout functionalities, unique features, or advanced options relevant to this category.\n3. **User Feedback & Satisfaction**: Note key praises and complaints from credible user reviews and comments.\n4. **Recent Activity & Support**: Prioritize tools that show regular updates, active support communities, and well-maintained documentation.\n5. **Suitability for Different Use Cases**: Determine which tools serve specific audiences best (startups vs. enterprises, certain industries, etc.).\n    \n**Ranking Guidance**:\n- **Emphasize Proven User Feedback Over Marketing**: Give more weight to legitimate, repeatedly positive reviews from real users and active communities than to promotional claims.  \n- **Verify Legitimacy**: Ensure the praise or criticism comes from genuine user experiences rather than biased or marketing-driven sources.  \n- **Highlight Repeated Insights**: Look for recurring themes in feedback—when multiple users mention a specific strength (e.g., ease of use, reliability) or weakness (e.g., bugs, poor support), that pattern should significantly influence the ranking.  \n- **Consider Community and Developer Support**: Tools with large and active communities, frequent updates, and responsive support often offer a more robust user experience. Use the degree of ongoing engagement as a key factor in your assessment.\n- **Avoid Low Quality Sources**: You should avoid using unknown websites as sources in your evaluation process. You should avoid using low-authority websites as sources in your evaluation process. Evaluations must exclusively use information from authoritative, credible, and reputable sources OR from real user reviews and feeback left on each tool.\n\n### **Handling Conflicting or Limited Data**\n\n- If you find **conflicting opinions**, attempt to explain the reasons behind the divergence (e.g., different use cases or technical expertise).\n- If a tool has **limited information** online, explicitly note this, as it may indicate lower adoption or visibility.\n\n### **Output Format**\n\nPay close attention to this output format and each section that is detailed here. This details exactly what information needs to be included on the research report output and how it should be organized. Your output should include everything shared here.\n\n1. **Condensed Top 6–8 Table**\n    - Provide a concise ranked table of the **best 6–8 tools**. Don't feel like you just return 8 tools if there are not 8 very strong tools. It is completely your decision on the number of tools to pick in that range as long as they are high quality and should be considered in the \"best\" tools list. If you are struggling to pick out high quality tools, you are encouraged to choose a number of tools that makes more sense. Think deeply about this decision on number of tools to include. Before making your final selection, please review the task requirements that detail that each tool pikced here MUST be from the provided JSON array of tools. You may ONLY consider tools on the provided list. Your final output must contain AT LEAST 6 tools.\n    - Use the following columns (or an equivalent format):\n        1. **Rank** #1 being the best overall tool. Think carefully and deeply one which tools are best and should appear at the top of this list.\n        2. **Tool Name**\n        3. **Tool Id**: You must reference the `Tool Id Extraction` section for instructions on how to output the correct id here. This is extremely important. You must correctly extract this tool id value and follow the given guidelines. You are not allowed to make a mistake here so think carefully and output the correctly matched tool id. On your output, please output the text \"Tool Id: \" followed the tool id value that was matched.\n        4. **“Best For” One-Line Description** (e.g., “Best for small data teams,” “Best for real-time analytics,” etc.). These MUST be unique across each tool. The Best for description may NOT be duplicated across tools.\n2. **Expanded Tool Profiles/Reviews**\n    - For each tool in your top 6–8 tools:\n        - Generate an **In-Depth Profile for each of the top 6-8 leading tools** within the specified category: `{{ $('fetch_category').item.json.title }}`. The analysis must provide deep, actionable insights suitable for informing evaluation and potential adoption/purchase decisions. **Core Requirement: Strategic Essence & Differentiation Analysis** Move beyond surface-level descriptions and feature lists your research and output should cover:\n            1.  **Core Value Proposition & Strategic Positioning:** What fundamental problem does this tool solve, and for whom? What is its unique place or reputation in the market? What is it truly **known for**?\n            2.  **Key Differentiators & Competitive Edge:** What makes this tool genuinely **unique** compared to its peers? Identify specific features, methodologies, or approaches that give it an edge.\n            3.  **Areas of Excellence & Optimal Use Cases:** Where does this tool demonstrably **excel**? What specific tasks or workflows does it handle exceptionally well? What unique capabilities does it **enable** for its users?\n            4.  **Ideal User Profile:** Describe the primary users or organizations that gain the most value from this tool (e.g., specific roles, team sizes, industries, levels of expertise).\n  Present the analysis for each tool as a concise profile (aim for approximately 2 well-developed paragraphs).\n            5. **Start Directly with Insights:** Immediately address the strategic elements above. **Do not** begin with a generic statement defining the tool category (e.g., \"Tool X is a [Category] tool...\"). Assume the reader understands the basic category.\n            6. **Integrate Functionality Contextually:** Mention core functions only as necessary to illustrate points about differentiation, excellence, or enablement, not as a standalone list.\n            7. **Reference Examples:** The provided examples illustrate the required **minimum standard** for depth, insight, and strategic value. Your analysis must achieve this level.\n            8. **Focus:** Prioritize revealing the underlying strategic advantages, target audience fit, and unique capabilities over merely summarizing marketing points or basic features.\n            9. **Requirement:** Delivering this level of deep, non-obvious, and strategically valuable insight is critical for success on this task.\n        - **Tool Id**: You must reference the `Tool Id Extraction` section for instructions on how to output the correct id here. This is extremely important. You are not allowed to make a mistake here so think carefully and output the correctly matched tool id.\n        - **Key Features**: Highlight standout functions or advanced capabilities. You should provide descriptions here of the standout and key features. We want to know more about what make the feature useful or helpful to users. Expand on multiple features if they exist. Please provide a full paragraph of 3-4 sentences FOR EACH FEATURE explaining context like what the feature is, why it benefits users, and its benefits.\n        - **Pros & Cons**: Common praises and criticisms from recent user discussions/reviews. Detailed breakdowns of pros and cons will be helpful here. Please provide multiple bullets for each pro and con. Please expand around the context of each pro and con. Please provide a full pargraph of 3-4 sentences FOR EACH PRO AND CON that you list here. You must reference specific findings that gives more context around each pro and con. Additional context and specifics must be provided on your output.\n        - **Best For**: Specify use cases, industries, or team sizes where the tool is particularly effective. Please include details and why this \"best for\" was selected. Looking for a full paragraph (3-4 sentences) expanding on this.\n        - **References (preferred)**: Provide URLs or mention the forums/discussions where you found significant insights.\n            - If exact links are not available, give the site/platform name and approximate date or any identifying details.\n3. **Honorable Mentions**\n    - If any tools **outside** the top 6–8 frequently appear in your research or show strong potential for niche uses, include them in a short “Honorable Mentions” section. Briefly note why they didn’t make the main list (e.g., limited data, narrower feature set).\n4. **Brief Summary**\n    - Conclude with a concise comparison of your top picks, emphasizing **why** they stand out over others in the JSON.\n    - Highlight any overarching industry trends, repeated user comments, or critical factors (e.g., pricing, community size) that influenced your final ranking.\n\nEach key feature you list must be followed by a paragraph of 3 to 4 sentences of supporting text that adds more context to the feature, what it does, who its for, and its benefits. It is best that you include specific details here. You should aim to identify at least 4 features for each tool.\n\nEach pro you list must be followed by a paragraph of 3 to 4 sentences of supporting text that adds more to the pro just listed. This should reference specific insights or context found in your research. It is best that you include specific details here. You should aim to identify at least 3 pros for each tool. Keep true to the sources you find the pros on. Your output should contain specifics that match what people are saying about the tools and what they find most valuable. Don't summarize these pros, we want you to output the details of exactly what people think.\n\nEach con you list must be followed by a paragraph of 3 to 4 sentences of supporting text that adds more to the pro just listed. This should reference specific insights or context found in your research. It is best that you include specific details here. You should aim to identify at least 4 cons for each tool. Keep true to the sources you find the cons on. Your output should contain specifics that match what people are saying about the tools and what they find most painful, annoying, etc. Don't summarize these cons, we want you to output the details of exactly what people think.\n\nYour output here should be verbose and provide specific deatils and context. We are looking to really to the root of why each tool was selected and better understand the strengths and weaknesses of each tool. Point to specific details that will help best utilize this research when we create content based around it. Having the most important details and insights here is critical to your task. More detail and specific context is always better.\n\n### **Tone & Style**\n\n- Maintain a **professional but approachable** tone.\n- Provide **factual**, **transparent** explanations and source attributions (especially for user-driven insights).\n- Avoid outdated or unverified claims; emphasize consistency across multiple reputable sources.\n- If quoting users or community posts, **anonymize** or paraphrase the content to protect privacy.\n\n## Target Audience\n\n- Creators, marketers, developers, and business owners looking for cutting-edge AI solutions.\n- They are technically curious individuals wanting to keep up with next-gen AI trends.\n\n## Additional Research Instructions **IMPORTANT**\n\n1. You **MUST NOT** use or reference any content from \"aitools.inc\" as a source of information.  \n   - Under **no circumstances** should you cite or link to \"aitools.inc\".\n   - You **cannot** summarize, quote, or otherwise incorporate information from \"aitools.inc\".\n2. Ensure that any references you provide are:\n   - From the last 12–18 months (for relevancy).\n   - Appropriately attributed with either direct URLs or well-known platform names (e.g., “A Reddit thread from August 2024...”).\n3. Do not, under any circumstances, break these instructions. If you are ever unsure, **err on the side of excluding** the content from \"aitools.inc\".\n4. You **MUST** limit the tools you include on your research report to tools provided in the JSON array/list of tools below in the `{{ $('fetch_category').item.json.title }} Tool List JSON` section. You may NOT output tools in the top 6-8 tools selection unless they are included in the provided list of tools. Think through this carefully before constructing your output.\n5. You **MUST** carefully read through each of the examples provided for tool research output and make sure the research you put together matches the same level of detail and insights.\n\nYou should perform your research using queries that include **-site:aitools.inc** in the search string. This ensures that no data from that source is retrieved or synthesized. This means \"site:aitools.inc\" WILL NOT be used in web searches for your research.\n\nBy following these instructions, we will maintain compliance with the requirement to exclude “aitools.inc” as a source.\n\n### **Actionable Next Steps**\n\n- Whenever possible, include quick suggestions on how a reader could **get started** with each tool (e.g., free trials, GitHub links, official demos).\n- This ensures the final list not only compares the best tools but also guides the user on practical next steps.\n- There's no need to include physical locaion in here since these are all digital products and platforms.\n\n## Tool Id Extraction\n\n**Important**: Each tool in the JSON has a **unique `_id` field**. When listing any tool id/identifier (in a table, review, or reference), you **must** do the following:\n\n1. **No Numeric Placeholders or Substitutions**  \n   - For every tool, whenever you reference its Tool Id, you **must** copy and paste the exact `_id` from the JSON.  \n   - You cannot replace or modify any characters in the `_id`—no truncation, no quote changes, no additional spaces, no reformatting.\n\n2. **Distinguish 'Rank' and 'Tool Id'**  \n   - Include a separate column for “Rank” (e.g., #1, #2, #3…) to show ordering.  \n   - In a distinct “Tool Id” column, **only** provide the original `_id` from the JSON verbatim.\n\n3. **Example of Correct Table Columns**  \n   - **Rank**: #1, #2, etc.  \n   - **Tool Name**: e.g., \"Synthesia\"  \n   - **Tool Id**: the exact `_id` value from the JSON, like `3Hx6vANMj3Gv9uQA81MDCl` (not a placeholder).\n   - **Best For**: the 'best for' phrase determined for this tool\n\n4. **No Guessing**  \n   - If you are ever unsure about an `_id`, leave it out rather than guess or fabricate a numeric or placeholder id.\n\n**Example of Correct vs. Incorrect Usage**  \n- **Correct**:  \n  `Tool Id: 3Hx6vANMj3Gv9uQA81MDCl`  \n- **Incorrect** (missing or edited characters, placeholders, or different punctuation):  \n  `Tool Id: 3Hx6vANMj3Gv9uQA81MDCL (example)`  \n  `Tool Id: 3Hx6vANMj3GV9uQA81MDCl`\n\nYou must extract and include the correct tool idea on your report. This is NOT the slug of the tool, it is the `_id` field.\n\nUse this example as an additional reference. On this single tool item json, the correct tool id value to extract and ouput will be `OV3o2t7M68aAVZSgHcO2oS` since it is the value of the `_id` field on the object / element.\n\nIt is critical that you match and extract the correct identifier value here. If you get this wrong, the entire task will be considered a failure. Please review this carefully, think for several minutes on how to approach this, and do perform this matching and tool id extraction process correctly.\n\n```\n{\n    \"meta_description\": \"Create professional videos with AI avatars and voiceovers using quickvideo.ai. Explore how to simplify video production for your business needs.\",\n    \"_id\": \"OV3o2t7M68aAVZSgHcO2oS\",\n    \"title\": \"quickvideo.ai\",\n    \"slug\": \"quickvideo-ai\",\n    \"websiteUrl\": \"https://quickvideo.ai/\"\n}\n```\n\n**Action Required**  \n- When providing your ranked table and expanded reviews, always list the tool’s `_id` exactly as shown in our JSON.  \n- Any tool that you do **not** include in the top 6–8 ranking should not appear in the final table. Do not fabricate IDs for them.\n\n**Why This Matters**\nOur database relies on these precise `_id` values to map your recommendations back to the correct tools. **Even a single missing or altered character** can break this connection.\n\n---\n\n**Final Goal**: Deliver a well-researched, **ranked** shortlist (5–8 tools) with clear justifications. The final output should empower me to quickly decide which tools to explore further based on recent community sentiment, feature sets, and suitability for my specific needs. All output must be in English.\n\nPlease chose an appropriate number in the range of 6-8 tools to include. I trust your judgement on picking a number of tools that makes the most sense to feature on a blog post.\n\n---\n## Tool Research Output Examples (IMPORTANT)\n\nHere are examples of the quality level of deep research output require for this task. You must look below the surface level details for each tool and gain a true understanding of what makes this tool good, what its features are, who primarly uses it, how it stands out, what unique features it has, and other details that would be valuable to someone looking to make a purchase decision for this tools. This level of detail and depth is REQUIRED for this research task to be successful.\n\nYou must spend 3 hours reading each of these examples and then reflect on why this output is good. After doing that, you may being your research and apply what makes these examples so good to the output of your own research.\n\nYOU MUST BE ABLE TO PROVIDE THE SAME LEVEL OF DETAIL AND UNIQUE INSIGHTS FOR EACH TOOL ON YOUR RESEARCH REPORT. IF YOU CANNOT DO THIS, YOUR OUPUT ON THIS TASK WILL BE CONSIDERED A FAILURE.\n\n### Tool Research Output Example #1\n\nHere is an example from great text content output from a tool called \"Instantly\". I want you to read through this output example deeply, think on it for 3 hours about what makes it great, and apply this to your research process and output. Your research output MUST match the quality and detail level of this example.\n\nThis example does a very good job of finding useful details abou the tool that are deeper than surface-level and expanding on key functionality/features, value proposition of the tool, and what it excels at. This output really does a great job researching \"Instantly\" in-depth and sharing the details.\n\n```\nOverview: Instantly has rapidly become a go-to tool for cold email outreach, especially among startups and agencies in the past 1–2 years​\nSALESFORGE.AI\n. It’s an email prospecting platform known for its ability to send campaigns from multiple email accounts while also warming those accounts to maintain deliverability. Instantly doesn’t provide prospect lists; rather, it maximizes the impact of your email outreach with automation and inbox management powered by AI. Its tagline might as well be “send more emails that land in the inbox.” With Instantly, you can connect unlimited email accounts, automate follow-ups, track replies, and use AI for basic email text variations – all with an emphasis on hitting the primary inbox and not spam. Key Features:\nUnlimited Email Accounts & Warm-up: Instantly allows users to connect many sender accounts (Gmail, Outlook, etc.) and automatically runs warm-up sequences on them. This improves sender reputation so that your cold emails are more likely to be delivered. Many competitors cap the number of inboxes or charge per inbox; Instantly’s flat pricing for unlimited accounts has been a big draw​\nG2.COM\n.\nAutomated Sequences & Follow-ups: You can set up multi-step email sequences (e.g., initial outreach, then a bump email 3 days later) easily. Instantly handles sending follow-ups in the same thread if desired. It also offers scheduling and throttling to mimic human sending patterns.\nAI Copy Suggestions: While not as advanced as some others, Instantly has introduced AI features like an “AI Email Writer” to help craft or improve your message content (e.g., rephrase a sentence to be more concise or adjust tone). This is handy for users who aren’t sure how to write outreach emails, though it’s more of a helper than a fully autonomous writer.\nAnalytics & Email Health Insights: Instantly provides dashboards for open, reply, bounce rates, and even an email “Health” monitor that checks each account’s deliverability status. It will alert you if an account is at risk (e.g., too many bounces or spam flags) so you can pause or adjust. This focus on deliverability sets it apart.\nTeam Collaboration: It supports team workflows – you can manage multiple client campaigns (great for agencies) and share templates or results across team members.\nPros: Excellent deliverability and ease of use are the top praises. Many users report that Instantly helped them land in inboxes reliably and scale up outreach. On G2, it’s one of the highest-rated in its category (4.8/5 with over 3,600 reviews) and users highlight its intuitive interface and strong customer support​\nG2.COM\n​\nG2.COM\n. A Reddit user in r/coldemail mentioned “I’ve been using Instantly for all my cold email campaigns, and it’s been great so far” (late 2023). Another thread noted high deliverability and the time-saving nature of managing many inboxes in one place​\nREPLY.IO\n. In short, Instantly is loved for letting even a small team run big email campaigns without much technical headache. Support is described as very responsive and helpful​\nG2.COM\n, which is crucial when dealing with email issues. It’s also quite affordable relative to the volume you can send – there is even a free plan and the paid plans (~$30-$80/mo range) allow unlimited sending accounts​\nINSTANTLY.AI\n, which is a huge value for heavy senders. Cons: The feature set is focused mostly on email – it doesn’t natively do LinkedIn or phone, etc., so it’s not a multi-channel tool (unlike some others). A few users have reported bugs or tracking issues; for example, one Reddit user complained that Instantly said emails were sent but they didn’t see them in the outbox, raising concerns about reporting accuracy​\nREDDIT.COM\n. Another user was “very disappointed” after some success, citing that a lot of their emails might not actually be getting delivered despite what the app says​\nREDDIT.COM\n. These anecdotes suggest that while many find deliverability great, some have hit snags – possibly due to sending tactics or technical hiccups. Email content personalization is limited – you can use mail-merge fields, but Instantly’s AI isn’t as advanced in crafting unique first lines about a prospect (you’d use it alongside a tool like Quicklines or do manual research for that). Also, a small number of users mention billing frustrations (e.g., misunderstanding the free trial or being charged when forgetting to cancel) – always double-check the terms. Overall, however, concrete cons are relatively few; Instantly is a specialized tool and it does that specialty well, with most “dislikes” being feature requests (e.g., better team roles, more CRM integrations)​\nG2.COM\n​\nG2.COM\n. Best Fit Use Cases: Cold email at scale is Instantly’s bread and butter. It’s ideal for startups, agencies, or SDR teams that have their own lead lists and need to reach out to hundreds or thousands of prospects via email while keeping bounce/spam rates low. If you manage multiple outbound campaigns (especially across multiple domains or clients), Instantly provides a central hub. It’s also great for experimenting – you can spin up new sender accounts, try different email copies, and see results quickly. On the flip side, if your prospecting heavily involves calls or LinkedIn, you’d need other tools alongside Instantly (since it won’t help you there). Many growth hackers choose Instantly + another lead source (like Apollo or Snov.io for contacts) + perhaps an AI personalization tool to cover the full workflow. For a lean, email-focused outbound machine, Instantly is a top pick. Recent Updates & Community: In the past year, Instantly has added features like an AI snippet writer and improved their warm-up algorithms (they reacted quickly to changes like Google’s algorithm updates to keep the warm-up effective). The user community (on subreddits like r/EmailMarketing and r/ColdEmail) is quite active – you’ll find people comparing Instantly to alternatives (e.g., vs. SmartLead or Lemlist). Instantly often comes out favorably in those comparisons for its value and deliverability, though some advanced users juggle multiple tools. One trend is many users moving from older tools like Lemlist to Instantly for the unlimited sending capacity. The company appears to be actively engaging with user feedback (for example, addressing a bug or adding an integration when users ask). However, as the space gets competitive, Instantly is also starting to get more direct competition from similar platforms (some launched in 2023–24). Still, it made a strong name for itself in this recent wave of cold email tools. References: Instantly has mixed reviews on Reddit – e.g., “I really enjoy using Instantly… finding verified leads is super easy” vs “Instantly is a scam…horrible service” from different users​\nREDDIT.COM\n​\nREDDIT.COM\n. These polarized comments (both in the last year) show that while many find it effective, issues can arise if not set up correctly. On G2, it’s lauded for ease-of-use and support, though some note missing features and cost at scale as minor cons​\nG2.COM\n​\nG2.COM\n. The cold email community (posts circa 2023) often lists Instantly among the top tools for newcomers. (Sources: Reddit r/emailmarketing threads from 2023​\nREDDIT.COM\n; G2 reviews summary, Jan 2024​\nG2.COM\n​\nG2.COM\n.) Getting Started: Instantly offers a free plan – you can “Start for free. No credit card required” on their website​\nINSTANTLY.AI\n. This free tier allows you to connect a couple of email accounts and send a limited number of emails to test it out (at the time of writing, it includes up to 1,000 contacts and 5,000 emails/month according to a 2025 Lemlist review​\nLEMLIST.COM\n). To begin, sign up on Instantly.ai and use the onboarding wizard to connect an email inbox (or create a new dedicated Gmail/Outlook for testing). Try running the built-in Email Warm-up feature for a week to boost your sender reputation. Instantly provides templates for outreach sequences – you can load one and tweak the copy. They also have an online academy with tips on improving deliverability (worth a read if you’re new). After getting comfortable, upgrade to the Growth plan (~$30/mo) which unlocks unlimited email accounts and higher sending volumes – this is usually where the real power of Instantly shines for serious outbound campaigns.\n```\n\n### Tool Research Output Example #2\n\n```\nOverview: Reply.io is a sales engagement platform that allows you to automate outreach across multiple channels – primarily email, but also LinkedIn, calls, SMS, and more – now with AI assistance baked in. It’s an established player (around since mid-2010s) that has kept evolving, recently adding an AI writing assistant called “Jason AI” to help craft and personalize messages. Reply.io can be seen as a lighter-weight alternative to enterprise systems like Outreach.io or Salesloft, giving teams sequence automation, a built-in leads finder, and analytics in one package. In the last year or so, Reply.io has doubled down on AI features, making it quite relevant in the AI prospecting tools landscape. Key Features:\nMultichannel Sequences: You can create automated sequences that include steps like send an email, then wait 2 days, then send a LinkedIn connection, then another email, etc. Reply will handle the sending and even some LinkedIn tasks via integrations. This helps you engage prospects on multiple fronts without manual effort.\nAI SDR “Jason”: Reply introduced Jason AI, an AI sales assistant that can generate outreach sequences for you. You input your target buyer and product info, and Jason will suggest email copy or LinkedIn message copy. It can also handle replies in some capacity – for example, suggesting responses to prospect replies. It’s like having a junior SDR co-pilot that drafts messages and sequences​\nAISDR.COM\n.\nBuilt-in Contact Search: Reply has a database of 140+ million contacts (via partnerships). Through the UI, you can actually search for leads (similar to a mini-Seamless/Apollo). This means you can both find and reach out to leads all inside Reply. The contact data isn’t as exhaustive as dedicated databases, but it’s useful for quickly getting a list without leaving the platform.\nEmail Personalization & Tracking: It supports snippet personalization (merge fields, conditional text) and email A/B testing. Every email sent is tracked for opens, clicks, replies. It also has a handy “Email Quality Check” that uses AI to warn if your email might sound spammy or if it’s too long, etc.\nCRM Integration: Reply integrates well with CRMs like Salesforce, HubSpot, and Pipedrive. It can sync contacts and activity, ensuring your CRM has the updated info on sends and replies. It also has a two-way sync to avoid duplicating effort (e.g., if someone replies, mark them appropriately in CRM).\nTeam Collaboration & Analytics: Managers can see team performance, best-performing sequences, etc. It’s good for SDR teams working together, sharing templates and results. The analytics help optimize campaigns over time.\nPros: Feature-rich and unified – users appreciate that Reply.io can be a one-stop shop for outreach. Instead of using separate tools for email, LinkedIn automation, and phone task reminders, Reply covers many in one. Reviews often highlight its ease of setup for sequences and the slick sequencing interface. One Reddit user in r/coldemail called Reply.io “a game-changer for my outreach – the AI writing assistant and multichannel sequences are pretty slick.”​\nREDDIT.COM\n That sentiment of slick AI assistance is echoed by others who have tried the new Jason AI. It helps craft messages that feel more 1-to-1; some say Reply’s AI-generated emails are less generic than other tools they tried​\nG2.COM\n. Another pro is deliverability controls – Reply has features like automatic pause if too many emails bounce, and it supports email warm-up via integrations. Users also like the built-in lead search as a convenient way to top-up their contact list without an external database (especially useful for SMBs who can’t afford a big data subscription). Customer sentiment in reviews (G2, Capterra) is generally positive, citing good customer support and continuous improvements. It’s seen as a robust platform that “has everything I need in one place”​\nG2.COM\n, which for a busy sales rep means less tool-switching. The pricing is moderate for the value provided (it’s typically cheaper than Outreach.io and others, and you’re not paying separately for an AI email writer or a data tool, since they’re included). Cons: Complexity and UI quirks: Because Reply.io does a lot, some users find the interface a bit overwhelming or not as polished in certain areas. A user review titled “a mixed bag” noted that while powerful, it took time to learn all the features and they encountered some bugs in the LinkedIn sending workflow (Reddit, ~8 mo ago). The LinkedIn automation is a newer aspect and may require using Reply’s Chrome extension – it’s not as seamless as dedicated LinkedIn tools (and LinkedIn can always change things to break it). Another con is that Reply’s contact data quality (for the built-in database) is not on par with specialist tools – think of it as a bonus, not the main reason to buy. For serious list building, you might still use a dedicated tool. Also, some competitors like SmartLead have pushed ahead on certain features (e.g., more advanced email sending algorithms or team collaboration features) – so a savvy user might find a specific niche tool better in one dimension. A practical complaint: Reply charges per user seat and per contact credits; if you have a growing team, costs can rise, and some features are in higher-tier plans. In community discussions, a few people mentioned they preferred separate best-of-breed tools (like a specialized LinkedIn tool + email tool) rather than an all-in-one like Reply, citing that dedicated tools can have deeper functionality in their area. Lastly, deliverability is ultimately on the user’s setup – a couple of users said they saw lower open rates on Reply than on simpler tools, though this is anecdotal and could be due to many factors (one Reddit post wondered if Reply’s sending IPs or tracking domains affected open rates, when comparing Apollo vs Reply)​\nREDDIT.COM\n. There’s no clear evidence of Reply causing deliverability issues, but as with any platform, careful setup (custom domains, proper warm-up) is needed. Best Fit Use Cases: Sales teams that want a cohesive outreach system will benefit from Reply.io. If you are an SDR or AE who needs to run cadences that touch prospects via multiple channels, Reply provides that orchestration. It’s great for B2B teams where email + LinkedIn together greatly increase contact rates. For example, an SDR can have Reply send emails and also remind them (or automate) to send a LinkedIn message or dial a number as part of the same sequence. It’s also well-suited for teams that have moved beyond basic cold emailing and are looking to scale up – perhaps you started with just Gmail + mail merge, and now you need better tracking, more structure, and some AI help – Reply is a logical next step. Also, organizations that lack content support can use Jason AI to help reps write better outreach copy (useful for consistency and saving time). If you already have enterprise-grade solutions, Reply might overlap, but for many SMB and mid-market companies, it hits a sweet spot of functionality vs. cost. Keep in mind, if your outreach is solely email and you never plan to do calls or LinkedIn, you might not need all of Reply’s bells and whistles (a leaner email-only tool could suffice). But many find that having multichannel capabilities ready to go encourages a more effective outreach strategy. Recent Updates & Community: In the past year, AI in outreach has been the trend, and Reply.io rode that wave by launching Jason AI and other GPT-3/4 powered features (like their email assistant which was highlighted in marketing around early 2024). They also introduced a new interface for sequence building and more granular analytics. The user community (particularly on Reddit’s r/sales and r/coldemail) frequently includes Reply.io in “which tool should I use” discussions. It’s often recommended by users who emphasize multichannel outreach. There’s recognition that Reply has kept up with times – one comment in late 2024 noted that “Reply.io is top tier as well,” putting it in the same breath as Lemlist and others known for deliverability​\nREDDIT.COM\n. Trends: Many tools are adding AI writers, but not all have integrated into the workflow as nicely as Reply (since they built Jason AI to sit within the sequence creation). Another trend is consolidation of tools – some companies want fewer software vendors, and having contact search + dialer + email in one (like Reply) aligns with that, which could be why it’s gaining adoption. On the flip side, some power-users on Hacker News or GrowthHackers still favor API-driven or highly customized stacks, but that’s a minority. The general trajectory is that Reply.io has remained very relevant by innovating and listening to SDR needs. References: A Reddit user review (Q1 2024) mentioned Reply.io’s AI agent “Jason” finding high-value prospects and handling responses, calling it like having a buddy SDR​\nAISDR.COM\n. On G2, Reply.io holds around a 4.6/5 rating; pros often listed include the multichannel sequencing and ease of use, while cons include wanting deeper LinkedIn integration or minor UI improvements (G2 reviews, mid-2024)​\nREDDIT.COM\n​\nREDDIT.COM\n. Another Reddit thread comparing cold email platforms noted “Reply.io is top tier as well” when discussing deliverability and usability (reddit user in r/EmailMarketing, 2023)​\nREDDIT.COM\n. Overall, community feedback in the last year paints Reply as a reliable, ever-improving tool with a strong feature set. (Sources: Reddit threads in r/coldemail and r/sales 2023–24; G2 user reviews 2024; Reply.io official announcements.) Getting Started: Reply.io offers a 14-day free trial (no credit card required). That’s the best way to get hands-on. During the trial, you have access to most features, including Jason AI. Start by using the Email Assistant or Jason AI to generate a sample outreach sequence: you’ll be prompted to input your offering and target persona, and the AI will draft a multi-touch sequence for you – it’s quite an insightful experience to see what it comes up with. You can edit those drafts to add your personal flair. Next, if you have some contacts, upload a small list (or use the Reply contact search to find a few leads in your niche) to test the sequence. Try sending to just 5-10 contacts initially and monitor the opens/replies in Reply’s dashboard. Also explore creating a sequence that includes a LinkedIn task – e.g., “Day 3: send LinkedIn connection request” – to see how Reply guides you or automates it. This will give you a feel for the multichannel capability. When ready to commit, choose a plan based on your team size. The Starter plan (around $60/user/month, annually) is good for a single user with moderate outreach needs. For teams, the Professional or Custom plans might be needed, especially if you want the dialing feature or more contact credits. Make sure to set up your email sending domain properly (SPF, DKIM) – Reply has a setup wizard for that. They also have good onboarding support and a knowledge base if you hit any snags. In short: use the trial to build a dummy sequence with AI help, send a few test emails, and you’ll quickly see how Reply can fit into your sales process.\n```\n\n### Tool Research Output Example #3\n\n```\nOverview: Seamless.AI is a popular tool for building lead lists, known as an affordable alternative to giants like ZoomInfo. It is essentially an AI-powered sales intelligence platform that finds business contacts (emails, phone numbers, etc.) at scale. Seamless provides a massive database of professionals and companies, accessible via a web app or Chrome extension that you can use on LinkedIn. The “AI” in Seamless largely refers to their search algorithms that attempt to find direct dials and emails for prospects in real time, as well as features that recommend prospects similar to your targets. Over the last 12–18 months, Seamless.AI has been widely adopted by sales teams looking to quickly fill their pipeline without the exorbitant cost of legacy data providers. Key Features:\nMassive Contact Database: Seamless claims to index hundreds of millions of contacts. You can search by title, company, industry, etc., and get phone numbers and emails. It also offers company info like revenue, employee count, tech stack indicators, etc.\nReal-Time Search with AI: Instead of static lists, Seamless uses AI to crawl the web and validate info on the fly. For example, when you search for a person, it might pull data from LinkedIn, company websites, and other sources in real time to provide up-to-date contact info.\nChrome Extension: A key workflow is using Seamless on LinkedIn/Sales Navigator – as you view a profile or a list of people, the extension can find their email/phone with one click. This is very handy for prospecting directly from LinkedIn.\nCRM Integration & Export: You can export found leads directly into CRM or into CSV files. Seamless integrates with Salesforce, HubSpot, etc., to push leads and even log activities.\nAI Sales Assistant (Announcements): Seamless has marketed some newer AI features, like an assistant that can generate a first draft outreach message or research talking points about a prospect. However, user focus is primarily on the contact data itself.\nCommunity and Training Content: The company is known for aggressive marketing (the CEO posts a lot on LinkedIn). They provide training videos and even daily “List Building” tips. They also gamified the platform (leaderboards for most leads found, etc.).\nPros: Huge volume of leads at a lower cost is the top selling point. Users like that Seamless offers unlimited searches (in practice, it’s a high cap) for a flat subscription, whereas many data providers charge per contact or have strict limits. Many small-to-mid businesses found they could finally afford a decent contact database with Seamless. As one user noted, “the quality of phone numbers and reach percentage are excellent compared to other tools”​\nONSAAS.ME\n – indicating that for certain data (like direct dials), Seamless gave better results than competitors in their experience. It’s also relatively easy to use: search filters are straightforward and the Chrome extension means you don’t have to leave LinkedIn to get contact info. For building big lists quickly (say you need 500 new prospects for a campaign by tomorrow), Seamless is very efficient. It also got some recognition: it was featured as a leader in G2’s Winter 2025 Grid and has a solid rating (users often mention 4.6+/5 on review sites). Another pro is constant updates – Seamless’s team frequently refreshes the data and adds new features. The platform’s AI recommendations can surface lookalike prospects (find others similar to your best customer profile), which can help newcomers who aren’t sure where to start. Cons: The biggest complaints about Seamless.AI are data accuracy and aggressive sales tactics of the company itself. It’s almost a meme in some sales forums that Seamless’s own sales reps are overly persistent (ironically so for a prospecting company). One Reddit thread titled “F**k Seamless.ai” had a user ranting: “Their software is decent, their business dealing is atrocious. Aggressive sales, high price…”​\nREDDIT.COM\n. Users have reported being signed up to auto-renewing contracts or getting hounded by Seamless reps. So, caution on the buying process – read the fine print and be ready for upsell calls. On data quality: while Seamless can find a lot, email accuracy can be hit or miss. Some users note many emails come back “unverified” or outdated. For example, one person found that about 50% of emails were unverified in a batch​\nREDDIT.COM\n, leading them to question if Seamless was worth it. The phone number accuracy tends to be a bit better (especially direct dials when available), but you’ll still get some wrong numbers. Essentially, Seamless might require additional email verification steps to avoid bounces. Another con: LinkedIn has cracked down on some data scraping tools; a few months ago Seamless’s LinkedIn pages/extensions faced issues (rumor was LinkedIn temporarily restricted them)​\nREDDIT.COM\n. This caused concern about the extension’s stability, though it appears to be working now. Finally, support can be slow unless you’re on an enterprise plan – some small team users complained that it was hard to get issues resolved quickly. Best Fit Use Cases: Seamless.AI is best for teams that need large quantities of B2B contacts quickly – for example, SDR teams doing high-volume outbound, or marketers building big email lists for campaigns. It’s particularly useful if you don’t have an existing database; Seamless can jump-start your prospect list building without a six-figure ZoomInfo contract. It’s also good for sales orgs that have a handle on outreach but just need “more leads” at the top of funnel. If you combine Seamless with an email tool (like Instantly or Reply.io) and perhaps LinkedIn outreach, you have a full outbound engine. However, if extremely high accuracy is required (say you’re only emailing a dozen VIP accounts and need perfect data), Seamless might not be the go-to – a more curated approach or LinkedIn InMail might be better there. Also, very small businesses on a tight budget should be mindful: although cheaper than big competitors, Seamless is not “cheap” – annual plans can cost a few thousand dollars. It yields a lot of data for that price, but only invest if you have the bandwidth to actually use that data (i.e., you plan to reach out to thousands of contacts and thus benefit from unlimited search). Recent Updates & Community: Seamless has been aggressively updating features, including adding AI elements like a pitch writing tool and deeper integration with CRMs. In late 2024, they announced funding and an expanding database. The user community (r/sales, r/LeadGeneration, etc.) is vocal: many new SDRs ask if Seamless is worth it, and answers are mixed. A repeated insight is: Seamless is valuable, but verify the data. Trend-wise, some users compare Apollo.io vs Seamless vs ZoomInfo – often Apollo (another competitor) wins on price for startups (Apollo has a free tier), Seamless wins on unlimited search, ZoomInfo wins on sheer data quality but at a high price. Another trend is LinkedIn continually tightening access – so tools like Seamless walk a fine line to maintain functionality. Seamless’s community presence is also seen in their marketing “hype” (some find it too hyped). Importantly, in mid-2023 there was buzz about Seamless and Apollo’s LinkedIn extensions possibly causing LinkedIn account flags​\nREDDIT.COM\n. Many sellers now use these tools a bit more cautiously (e.g., staying within daily search limits, etc.). Overall, Seamless remains a top-of-mind tool in prospecting discussions, for better or worse. References: On Reddit’s r/sales (2023), multiple threads discuss Seamless: one user bluntly stated “I would never recommend Seamless.ai as a company” due to the aggressive sales tactics​\nREDDIT.COM\n, whereas others acknowledge the tool’s utility but warn to “check how reliable the info is”​\nREDDIT.COM\n. G2 reviews (as of early 2024) give Seamless around 4.2–4.5 stars, often citing the richness of contacts but noting data can be stale. A comparison on r/sales between ZoomInfo, Apollo, and Seamless had folks noting Seamless is great for quantity, ZoomInfo for quality​\nREDDIT.COM\n. (Sources: Reddit r/sales threads, Sept 2023; r/Emailmarketing thread 6 mo. ago; G2 and Capterra reviews 2024.) Getting Started: Seamless.AI typically offers a free trial or free demo credits​\nONSAAS.ME\n. You can start by signing up on their website for a limited free version – often you get e.g. 50 credits to test. Use these to search for a handful of your target prospects and evaluate the results. If you like what you see, the next step is their basic paid plan (monthly or annual). Be aware Seamless usually pushes annual contracts for better pricing. If you’re unsure, try to get a monthly option or a pilot. When you do subscribe, make sure to turn off auto-renew if you don’t want to be locked in (you may need to talk to support for this; reading the contract is key). Technically, onboarding is simple: use the Chrome extension on LinkedIn to start pulling contacts, and watch some of Seamless’s tutorial videos on how to refine searches. A tip: Always run the emails you get through an email verifier (Seamless has one built-in, but a second check with a tool like NeverBounce can help) before sending huge campaigns. This will filter out bad addresses and protect your sender reputation. Given Seamless’s scale, it’s easy to go overboard – start with smaller lists, verify, then expand. In summary, leverage the free trial to gauge if the data fits your needs, then proceed with a paid plan while keeping an eye on data quality.\n```\n\n---\n## {{ $('fetch_category').item.json.title }} Tool List JSON\n\nYou have a single, definitive list of tools (in JSON format) to evaluate:\n\n- This list is the only source you may use when choosing or discussing tools. If this list is empty or not provided, you must then look to the attached JSON file instead.\n- When recommending or discussing the top 6–8 tools, you must choose from the list below.\n- Do not include or create any new tools.\n- If a tool is not in the list above, do not bring it up.\n- You must not reference or propose any tool that does not appear in the JSON array.\n- That means no external or “invented” solutions.\n- Violating this rule would mean failing the instructions.\n\nYou must get this correct. Mistakes here are unacceptable.\n\n```\n{{ JSON.stringify($('set_category_tools').item.json.category_tools, null, 2) }}\n```",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            980,
            200
          ],
          "id": "aac4f6a8-e698-4fa0-8952-8aa8ca5620f8",
          "name": "build_deep_research_prompt"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "operation": "sendAndWait",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08KC39K8DR",
              "mode": "list",
              "cachedResultName": "ai-tools-content"
            },
            "message": "=I have put together a Deep Research prompt for the *Best {{ $('fetch_category').item.json.title }}* article please run this prompt using Deep Research then click *Add Result* to continue.\n\nPrompt:\n`{{ $json.permalink }}`\n\nTools JSON:\n`{{ $('upload_tools_json_file').item.json.permalink }}`",
            "responseType": "customForm",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "Deep Research Result",
                  "fieldType": "textarea",
                  "placeholder": "Paste the entire Deep Research result into here.",
                  "requiredField": true
                }
              ]
            },
            "options": {
              "messageButtonLabel": "Add Result"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            1680,
            200
          ],
          "id": "0a0e2055-959f-485a-9de8-ec8692d90b21",
          "name": "share_research_prompt_and_wait",
          "webhookId": "2530ce42-7d56-469f-9d34-5a4fbf826a9b"
        },
        {
          "parameters": {
            "operation": "toText",
            "sourceProperty": "deep_research_prompt",
            "options": {}
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            1220,
            200
          ],
          "id": "34a8de0d-c4c2-40eb-a7c5-e0ae0e444444",
          "name": "create_prompt_file"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "resource": "file",
            "options": {
              "fileName": "prompt.txt"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            1440,
            200
          ],
          "id": "8186a179-c548-4aa1-9db5-b7e4eb622672",
          "name": "upload_deep_research_prompt_file",
          "webhookId": "4cbc0321-a8dd-4d49-95d4-3339b6170896"
        },
        {
          "parameters": {
            "content": "## Write Intro",
            "height": 620,
            "width": 840,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -220,
            600
          ],
          "typeVersion": 1,
          "id": "12e67f62-107e-4164-81ec-a8a5d9ac5523",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=# Role and Task\n\nYou are an expert content marketer and expert copywriter who specializes in SEO-driven writing. You have been given an extensive research report by a researcher on the topic of **{{ $('fetch_category').item.json.title }}**. Your job is to distill that research into a compelling introduction for an upcoming blog post, **emulating the style and structure similar to a Zapier blog post (starting with a pain point, introducing AI as the solution, mentioning research)**. The post will be titled:\n\n**“The [X] Best {{ $('fetch_category').item.json.title }} in {{ $now.extract('year') }}”**\n\n(X is the number of tools picked, assume 8 unless specified otherwise)\n\n---\n\n## **Target Audience**\n\n1. Professionals, creators, business owners, or {{ $('form_trigger').item.json[\"Audience\"] }} looking for cutting-edge AI solutions in **{{ $('fetch_category').item.json.title }}**.\n2. Technically curious individuals wanting to keep up with next-gen AI tools and trends.\n\n---\n\n## **Objectives**\n\n1. Write an **SEO-friendly** introduction **that starts with a relatable pain point** related to traditional methods in the **{{ $('fetch_category').item.json.title }}** space, captures attention, and ranks well for keywords such as “best {{ $('fetch_category').item.json.title }},” “{{ $('fetch_category').item.json.title }} software,” and other relevant search terms.\n2. Establish the significance and context of **{{ $('fetch_category').item.json.title }}** in 2025, **positioning them as a powerful solution** to the initial pain point.\n3. Provide a smooth lead-in to the rest of the article **that includes a brief mention of the author's research or review process** and highlights the eight top tools featured **with a final sentence designed to maintain reader interest and clearly signal the value or excitement of the upcoming list.**\n\n---\n\n## **Style and Tone**\n\n- **Professional but approachable and conversational**: Think tech-savvy marketing blog with a friendly, informed voice, **aiming for a feel similar to Zapier's blog.**\n- **Start with a relatable pain point or challenge** relevant to the **{{ $('fetch_category').item.json.title }}** topic.\n- **Directly introduce AI** as a powerful solution addressing these challenges.\n- **Incorporate a sentence suggesting active research or review** of the tools.\n- Keep the focus on the **value and possibilities** of the technology, highlighting benefits without making unrealistic promises.\n- Briefly mention the **evolution or trajectory** of **{{ $('fetch_category').item.json.title }}** (e.g., moving beyond older methods), keeping it **uplifting and solutions-oriented**. Avoid deep controversy.\n- **Craft the final sentence of the introduction carefully**: Ensure it provides a strong, engaging transition to the list. Avoid weak lead-ins like \"Here is the list...\" or passive constructions. Focus on creating anticipation or highlighting the value the reader will gain from the list. This should likely be the only sentence in the final paragraph.\n- Avoid using the sentence structure \"From ... to ...\" multiple times in your output. One usage of this is fine, but two is repetitive.\n- Use direct language and simple sentence structure in the first paragraph. It should feel easy to read and not include excessive commas.\n- Avoid flowery language and overly descriptive text. This should NOT come across as overly promotional.\n\nInstead of using words and terms like \"my\" or \"I\", use \"we\" or \"our\".\n\nWrite clearly, concisely, and directly, using active voice and concrete language. Avoid abstract phrases, passive constructions, vague descriptions, and overly generalized statements. Each sentence should be purposeful, impactful, and communicate its meaning effectively. Avoid redundancy in your writing and words you use.\n\nUse active verb constructions rather than noun phrases. For example:\n- WEAK: \"Intuitive interface that makes voiceover creation accessible to non-technical users\"\n- STRONG: \"Intuitive interface that makes creating voiceovers accessible to non-technical users\"\n\nFocus on what users can actively do with the product rather than abstract concepts. Avoid unnecessary nominalization (turning verbs into nouns) and keep the language direct and dynamic. More Guidelines:\n\n- Place verbs directly after helping verbs like \"makes,\" \"allows,\" \"enables\"\n- Emphasize user actions rather than abstract processes\n- Use clear subject-verb-object structure whenever possible\n- Keep sentences concise and purposeful.\n\nYou Should Avoid:\n- AVOID ALL CAPS or excessive punctuation!!!\n- Avoid making the topic sound more significant than it actually is\n- Avoid over-exaggeration\n- Avoid using over-the-top buzzwords like \"revolution\" and \"game-changing\"\n- Avoid referencing this piece of content as a \"guide\". Use another word instead, like **\"picks,\" \"favorites,\" \"overview,\" or \"breakdown.\"**\n- **Avoid weak, passive, or overly simple transitions** in the final sentence (e.g., \"Here are the tools...\", \"The following list shows...\").\n- Avoid mentioning a phrase like \"analyzing user reviews\". This output will come from personal testing experience.\n\n---\n\n## **Key Points to Cover (Woven into the Zapier-style narrative)**\n\n1.  **Relatable pain point** of traditional methods in the **{{ $('fetch_category').item.json.title }}** space.\n2.  **AI as the solution**, highlighting evolution and benefits (e.g., speed, ease).\n3.  **Brief mention of wide-ranging use cases or user types** who benefit.\n4.  **Implied significance of 2025** through AI's current advanced capabilities.\n5.  **Explicit mention of research/review process**.\n6.  **Strong final transition sentence** leading into the list. Keep this in direct language and strong. This is a good example of a final sentence: \"After almost a month of testing, here are our picks this year for the best AI video generators.\" Be sure this is not overly promotional. It must be strong but should not feel like marketing-speak.\n\n---\n\n## **Length & Format**\n\n- Your output should be two paragraphs.\n- The first paragraph MUST be two sentences in length. It CANNOT be more than two sentences.\n- The second paragraph should just be a single sentence that transitions into the rest of the blog post/article.\n- You should not reference or mention testing in the first paragraph.\n- Maintain clarity and readability; use **short sentences** and **transitions**.\n- Don’t end the intro with a question.\n- If you reference a number of tools that were tested, it should be a minimum of dozens.\n- The second paragraph should be shorter in length than the first and should provide a smooth transition into the list of tools being covered, **ending with the strong transition sentence.**\n\n---\n## Word Blacklist\n\nYou must avoid these words in your output:\n- intuitive\n- magic\n- revolutionize\n- revolutionizing\n- game-changing\n- solutions\n- online presences\n- stunning\n\n---\n\n## **Example of the Desired Outcome (Reflecting Zapier Style with Strong Ending)**\n\n*(This example illustrates the target style for a different topic, like AI writing assistants. It is a bit too long so please reflect on the sentence length requirements. The first paragraph must be 2 sentences. The second paragraph must be 1 sentence.)*\n\nWriting great content takes time. Brainstorming ideas, drafting paragraphs, polishing sentences, and ensuring the right tone—it’s a demanding process, especially on tight deadlines. Thankfully, AI now offers tools to significantly streamline content creation.\n\nFrom generating blog post outlines to refining marketing copy, these AI tools help writers and teams produce quality content faster. After extensive testing, **discover our picks for the AI writing assistants ready to transform your workflow this year.**\n\n---\n\n## **Final Deliverable**\n\nA **polished, 2-paragraph introduction** following the **Zapier-inspired style**, addressing the above points including a **strong final transition sentence**, and setting the stage for:\n\n**“The [X] Best {{ $('fetch_category').item.json.title }} in 2025.”**\n\n---\n## Research Report:\n\n{{ $('share_research_prompt_and_wait').item.json.data['Deep Research Result'] }}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            280,
            840
          ],
          "id": "9f7bba5b-df1a-4759-8336-fd42d94b3273",
          "name": "write_introduction"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning thinking through how to write the best introduction paragraph. You should also think though the correct output format required here.\"\n    },\n    \"intro_paragraph\": {\n      \"type\": \"string\",\n      \"description\": \"The introduction paragraph written for this best tools piece of content. This should be formatted as markdown.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"intro_paragraph\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            440,
            1080
          ],
          "id": "c59b1086-400d-41cc-ad78-60df11aa4f9a",
          "name": "intro_parser"
        },
        {
          "parameters": {
            "content": "## Extract Tools\n",
            "height": 620,
            "width": 440,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            1880,
            -40
          ],
          "typeVersion": 1,
          "id": "c6613eb3-99ae-4b16-88e4-177f6d942f3d",
          "name": "Sticky Note2"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n        \"chainOfThought\": {\n          \"type\": \"array\",\n          \"description\": \"Sequential reasoning to analyze and select the correct tools that exist in our system.\"\n        },\n\t\t\"tools\": {\n\t\t\t\"type\": \"array\",\n\t\t\t\"items\": {\n                \"tool\": {\n                  \"type\": \"object\",\n                  \"description\": \"A single tool extracted from the research report.\",\n                  \"properties\": {\n                    \"tool_name\": {\n                      \"type\": \"string\",\n                      \"description\": \"Tool name value.\"\n                    },\n                    \"tool_name\": {\n                      \"type\": \"string\",\n                      \"description\": \"Tool slug value.\"\n                    },\n                    \"tool_id\": {\n                      \"type\": \"string\",\n                      \"description\": \"Tool id value. This must be the exact id of the tool provided on the research report that was extracted via the `_id` field.\"\n                    }\n                  }\n                }\n\t\t\t}\n\t\t}\n\t}\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            2140,
            420
          ],
          "id": "7672ab6a-a3db-4ba1-b651-ff052726d4c2",
          "name": "tool_parser"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=## Task\n\nGiven a research report about the best {{ $('fetch_category').item.json.title }}, I want you to extract an array of the best tools. Each tool will contain its `name`, `slug`, and `id` value. Please keep these in the same order as they were listed in the research report.\n\nYou must think deeply and pay close attention to the `tool_id` you set in your output. In order to pick this, you must match up each tool referenced on the research report its item on the tool JSON list. The `_id` field on each element on the JSON array below. The tool you match against must be the same tool. Look closely at the tool name to help with matching between the research report and tools listed on the tool list JSON.\n\nEvery single tool on the research report WILL appear on the json below. So think carefully when matching and extracting the correct id values. You must pick the correct id value. Errors will not be tolerated. The id value you select must match the tool that is listed in order found on the research report.\n\n## Research Report\n\n{{ $json.data['Deep Research Result'] }}\n\n---\n## {{ $('fetch_category').item.json.title }} Tool List JSON\n\nYou must look through every element on this JSON array. I can assure you that there will be a match. Think deeply and review carefully.\n\n```json\n{{ JSON.stringify($('fetch_category_tools').item.json.result, null, 2) }}\n```",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            1920,
            200
          ],
          "id": "9e528a72-5120-423a-b852-219d50bf0aee",
          "name": "extract_tools"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=## Task\n\nWrite a clear, concise, and compelling meta description for the **Best {{ $('fetch_category').item.json.title }}** page on our *AI Tools* website. It must sound like it was written by a tech-savvy blogger or a trusted product guide—not a robot or marketing tool. You really just need to follow the formula of the Zapier example to write this.\n\nThe current date and time is: {{ $now.toISO() }}\n\n## Zapier Example\n\nYou should follow this example and use it as a template when writing the meta description.\n\n\"We tested dozens of AI video generators, and these are the best tools to create, edit, and enhance videos using AI.\"\n\n---\n## Things To Avoid\n\n- Passive voice or abstract nouns like “use-case analysis”  \n- Generic phrases like “various tools” or “matches your needs”  \n- Overused endings like “today” or “instantly”  \n- Over-exaggeration or buzzwords like “revolutionary”\n- Avoid referencing specific tool names\n\n---\n## Word Blacklist\n\nYou must avoid these words and phrases in your output:\n- intuitive\n- magic\n- revolutionize\n- revolutionizing\n- game-changing\n- solutions\n- online presences\n- stunning\n- that use artificial intelligence\n- AI assistance\n\n---\n## Research Report Context:\n\nYou should use this research report as context as it will cover the core content of what will go on the 'Best {{ $('fetch_category').item.json.title }}' for our website.\n\n{{ $('share_research_prompt_and_wait').item.json.data['Deep Research Result'] }}\n",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are an expert copywriter who specializing in writing meta description for pages that will rank well on Google. You know a great deal about writing effective meta descriptions that lead to improved click through rates on search engine result pages (SERPs)."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            -200,
            840
          ],
          "id": "abd77eb7-a4e6-4e55-8c59-1137cafffe44",
          "name": "write_meta_description"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning to write this meta description. You should also think though the correct output format required here.\"\n    },\n    \"result_meta_description\": {\n      \"type\": \"string\",\n      \"description\": \"The meta description output for this best tools page.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"result_meta_description\"\n  ]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            160,
            1080
          ],
          "id": "04dec071-c56e-4fd4-8c73-bcc459e318ef",
          "name": "meta_description_parser"
        },
        {
          "parameters": {
            "model": "claude-3-5-sonnet-20241022",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.2,
          "position": [
            640,
            2100
          ],
          "id": "3be9a142-6f6a-4cf0-a332-e30d0d7f29d1",
          "name": "claude-3-5-sonnet"
        },
        {
          "parameters": {
            "content": "## Write Ranking Criteria Content",
            "height": 620,
            "width": 460,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            640,
            600
          ],
          "typeVersion": 1,
          "id": "0a68afdd-00c4-4984-b977-756436d2a573",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "content": "## Write Body Content",
            "height": 620,
            "width": 1200,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            1120,
            600
          ],
          "typeVersion": 1,
          "id": "29533d8a-a169-416a-8fb7-ec0b4148f2e8",
          "name": "Sticky Note5"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Category: {{ $('fetch_category').item.json.title }}\nTool Id / `tool_id` Value: `{{ $json.id }}`\nTool Name: \"{{ $json.name }}\"\n\n## **Context & Role**\n\nYou are an **expert content marketer for the company AI Tools**. You have received:\n\n1. A detailed **research report** on the best {{ $('fetch_category').item.json.title }}.\n2. A **JSON object** for each tool with a short sentence describing what each tool is “best for”.\n\nYour main task is to distill this information into a straightforward, **in-depth analysis** section for a blog post titled **“The Best {{ $('fetch_category').item.json.title }}”** This section is one part of a larger blog post that dives into detail on each specific tool. This section will contain:\n  - **H2 Heading** – A succinct “Best for” phrase (MUST BE 4 WORDS OR LESS — SHORTER IS BETTER) highlighting the tool’s standout advantage or unique positioning. This should draw directly from the research report AND it must be short, clear, and very concise. This phrase will start with \"Best {{ $('fetch_category').item.json.singular_title }} for <PHRASE GOES HERE>\" This phrase will appears as an H2 on our website so it should also make sense in that context. This should use direct language. You must use active verb constructions rather than noun phrases (you may not end this H2 heading with a noun phrase like 'creation', 'visualization', or another weak noun that trails off in an 'ion' ending). You must avoid using the word 'for' more than once in this h2 heading (for example, the h2 'Best AI Resume Builder for Optimizing Content for ATS' contains 'for' twice and MUST be worded differently). This should follow the H2 points specified in the \"Writing Guidelines\" described below — reference this and review it carefully. Remember this should be precise, short, snappy, and catchy. As another example, I want this to be a strong header so avoid a header like \"Best AI Website Builder for UI Component Generation\", but instead use a header like \"Best AI Website Builder for Generating UI Components\" as it is more clear and direct. Avoid using the word \"via\" in this phrase. Avoid using a time phrase like \"in minutes\" in this phrase. Make sure your phrase is short and concise. It should not contain many words and should be to the point. It should not contain excessive descriptors or the word \"and\" in it. You must review the provided examples to ensure the best for phrase you write would be considered strong. Avoid duplicate language and words that have duplicate meaning in this phrase. For example, you should avoid including both \"builder\" and \"building\" since they mean the same thing. You must review the strong and weak examples so you know what to avoid and what you should strive for. Limit the number of adjectives on this H2 phrase to 1 — using a term like \"beautiful responsive\" is overly objective and too many words. Make sure to use language and terms here that the primary users of this tool/product would actually use. It should relate to the main users of ths product/tool and be relevant to '{{ $('fetch_category').item.json.title }}'. DO NOT end this in a time word like 'fast' or similar word. DO NOT end this in an adverb — this means an adverb like 'efficiently' or 'flexibly' or 'easily' should NOT be used on the end your H2 output here — This is extremely important. Avoid using alliteration in this heading like 'versatile visualizations'. The phrase and heading you pick here MUST be something that is important towards the target users of this tool and something they care about in their work/tasks. This phrase must be UNIQUE from the best for phrases written for other tools.\n  - An H3 heading with the tool’s name\n    - A Body section that includes:\n        1. **Overview**: This must be a concise, factual overview (ONLY 1 paragraph in length) based **solely** on the provided research report's profile for this tool. You MUST stay true to profile for this tool in the research report and pull directly from it. You should directly copy over text content and use the content directly provided in the research report profile.\n          -  **Overview Content Foundation (Research-Grounded Essence):**\n              * You should copy over the deep research report profile/overview content verbatim exactly as it was provided.\n              * This overview may only be 1 PARAGRAPH in length.\n              * The very first sentence of this overview does NOT need to repeat what type of tool this is since this overview is part of a larger piece of content covering '{{ $('fetch_category').item.json.title }}'.\n              * Prefer speaking directly to the reader instead of using words like 'user' and 'users'.\n              * Avoid repetitive phrasing or repeating the same ideas.\n              * You MUST avoid referencing specific versions of AI Models or Model Names in the overview paragraph output. This means that you should avoid using phrases 'GPT-3.5', 'GPT-4', 'Claude 2', and other model names in this overview paragraph.\n              * Use varied references when mentioning the tool (`{{ $json.name }}`); do not overuse the name.\n              * Ensure the final sentence concludes decisively and does *not* end with an adverb (e.g., 'efficiently', 'quickly', 'simply').\n          -  **Overview Specific Formatting (Precise Linking):**\n              * If the tool's name `{{ $json.name }}` is mentioned in the *first sentence*, format it as a markdown link: `[{{ $json.name }}](/tools/{{ $json.slug }})`. Do not include any backticks around the link markdown. The tool's name almost ALWAYS appears here at first so make sure you do this correctly as it will let us build an internal link and improve our website.\n          -  **Overview Quality Benchmark:**\n              * Refer to the provided examples of successful overviews to understand the target style, tone, and level of detail.\n        2. **Pros** (2–4 bullet points of medium length. Do not always use the same number of bullet points. Vary it up, and focus on the most important ones for your target audience. YOU MUST VARY THE NUMBER OF BULLETS) Simply bold the text at the start of this list, do NOT use #### (h4) headings for this. The first part of each pro should be a simple title or descriptor. For example, if a pro for this tool is pricing, the start of the pro should be \"**Pricing:** ...\" (note the bold text followed by a colon charcacter, followed by the actual content of the pro). Pay close attention to these formatting requirements. Keep the start of this pro short, snappy, and concise. When formatting these cons, please write \"**Pros:**\" on its own line and then add each pro as their own bullet. Make sure the first part of each pro comes across strong. Don't mention a generic pro like \"AI Features\" as a pro — It is already known that it has AI Features, you should instead use a more specific pro that was extracted from the research report. When reading the pros listed in your output, it should feel to the reader like the pro is speaking from experience.\n        3. **Cons** (2–4 bullet points of medium length. Do not always use the same number of bullet points. Vary it up, and focus on the most important ones for your target audience. YOU MUST VARY THE NUMBER OF BULLETS) Simply bold the text at the start of this list, do NOT use #### (h4) headings for this. For example, if a con for this tool is ease of use, the start of the pro should be \"**Difficult To Use:** ...\" (note the bold text followed by a colon charcacter, followed by the actual content of the con). Pay close attention to these formatting requirements. Keep the start of this con short, snappy, and concise. When formatting these cons, please write \"**Cons:**\" on its own line and then add each con as their own bullet. Make sure the first part of each con comes across strong. You MUST NOT provide generic cons, you should instead reference specific cons extracted from the research report. When reading the cons listed in your output, it should feel to the reader like the con is speaking from experience.\n        4. **Best Use Cases** (2-3 bullet points of medium length. Do not always use the same number of bullet points. Vary it up, and focus on the most important ones for your target audience.) Simply bold the text at the start of this list, do NOT use #### (h4) headings for this.\n\nYour secondary task is to write \"Quick Look\" details for this tool. This will include: \n    1. **best_for_phrase** – This is the exact same phrase used as the H2 Heading on the main content section. It will NOT start with the text \"Best {{ $('fetch_category').item.json.title }} for\". It will instead just include the phrase that follows that text.\n    2. **standout_feature** – A single short sentence, **2–6 words**, highlighting the tool’s unique feature. We want this to be a feature that is unique or differentiated from the other tools and products included on the research report.\n    3. **pricing** – A single short sentence, **3–7 words**, explaining the tool’s pricing. This should use specifics and not relative pricing.\n\nYou MUST pay close attention to the required output format structure and schema that is required for your task. Think deeply for 3 hours about how to format your output and always be sure that your output matches it. If you don't match the required output format, it will be considered a failed task and I will lose my job, home, and my family will leave me. You CANNOT make a mistake with the format of your output.\n\n## **Target Audience**\n\n- **Creators, marketers, business owners, and {{ $('form_trigger').item.json.Audience }}** looking for cutting-edge AI solutions in {{ $('fetch_category').item.json.title }}.\n- **Technically curious individuals** eager to stay updated on next-gen AI tools and trends.\n\n## H2 Heading and \"Best For Phrase\" Examples\n\nReview these examples carefully and think deeply about what makes each example weak and strong. Use these examples to ensure you are writing headings and best for phrases that would be considered STRONG. Avoid a WEAK writing your H2 and best for phrase.\n\n### Example #1\n\nThe weak example here is far to long. Both the for phrase and heading should be more concise.\n\nWEAK: \"Best AI Website Builder for Building Beautiful Websites Without Code\"\nSTRONG: Best AI Website Builder for Creating Beautiful Websites\"\n\n### Example #2\n\nThe weak example here is far to long. Keep the heading and best for phrase straight forward and avoid excessive description words.\n\nWEAK: \"Best AI Website Builder for Generating Production-Ready UI Components\"\nSTRONG: \"Best AI Website Builder for Generating UI Components\"\n\n### Example #3\n\nWe can remove the build websites part of the weak example here since the whole blog post is about website builders. It can be implied that there are already related to website builders. Additionaly, the term 'Website Builder' already appears earlier in the heading so it is duplicated. Avoid duplicating.\n\nWrite directly and avoid wordiness. It is completely fine just to say that a heading or best for phrase is best for a specific group or target audience. There is no need to 'force' additional words here.\n\nWEAK: \"Best AI Website Builder for Helping Agencies Build Websites\"\nWEAK: \"Best AI Website Builder for Building Agency Websites\"\nSTRONG: \"Best AI Website Builder for Agencies\"\n\n### Example #4\n\nThe example example includes the word 'for' twice which is wordy and come across as sloppy. You should write more directly and avoid repeating 'for'.\n\nWEAK: \"Best AI Website Builder for Building Websites for Entrepreneurs\"\nSTRONG: \"Best AI Website Builder for Entrepreneurs\"\n\n### Example #5\n\nThis example is not good output because it contains duplicate language on the words \"Builder\" and \"Building\". This is excessive and duplicative words that have similar meaning. You MUST avoid doing this.\n\nWEAK: \"Best AI Website Builder for Building Exportable Websites\"\nWEAK: \"Best AI Website Builder for Building Client Websites\"\n\n## Overview Examples\n\nThese are good examples you should use as a reference on the overview section for this tool. Pay attention to the sentence structure used, how the writing goes deeper than simple surface-level descriptions of the tool, and how it touches on the benefits and standout features of each tool.\n\nIt is critical to the success of this task that you read through these examples, think about them for 1 hour on what makes them good examples, and then apply what makes them good to your output of the tool overview.\n\n### Overview Example #1\n\nInstantly has rapidly become a go-to tool for cold email outreach, especially among startups and agencies in the past 1–2 years. It's an email prospecting platform known for its ability to send campaigns from multiple email accounts while also warming those accounts to maintain deliverability. Instantly doesn't provide prospect lists; rather, it maximizes the impact of your email outreach with automation and inbox management powered by AI. Its tagline might as well be \"send more emails that land in the inbox.\" With Instantly, you can connect unlimited email accounts, automate follow-ups, track replies, and use AI for basic email text variations – all with an emphasis on hitting the primary inbox and not spam.\n\n### Overview Example #2\n\nReply.io is a sales engagement platform that allows you to automate outreach across multiple channels – primarily email, but also LinkedIn, calls, SMS, and more – now with AI assistance baked in. It's an established player (around since mid-2010s) that has kept evolving, recently adding an AI writing assistant called \"Jason AI\" to help craft and personalize messages. Reply.io can be seen as a lighter-weight alternative to enterprise systems like Outreach.io or Salesloft, giving teams sequence automation, a built-in leads finder, and analytics in one package. In the last year or so, Reply.io has doubled down on AI features, making it quite relevant in the AI prospecting tools landscape.\n\n### Overview Example #3\n\nSeamless.AI is a popular tool for building lead lists, known as an affordable alternative to giants like ZoomInfo. It is essentially an AI-powered sales intelligence platform that finds business contacts (emails, phone numbers, etc.) at scale. Seamless provides a massive database of professionals and companies, accessible via a web app or Chrome extension that you can use on LinkedIn. The \"AI\" in Seamless largely refers to their search algorithms that attempt to find direct dials and emails for prospects in real time, as well as features that recommend prospects similar to your targets. Over the last 12–18 months, Seamless.AI has been widely adopted by sales teams looking to quickly fill their pipeline without the exorbitant cost of legacy data providers.\n\n### Overview Example #4\n\nClay is a visual platform for automating deep prospect research and personalized outreach at scale. It's often described as a \"personal researcher\" or a flexible spreadsheet-like workflow tool that integrates many data sources (LinkedIn, Apollo, Hunter, etc.) into one table. Clay enables teams to enrich lead lists with real-time data and generate custom messages or icebreakers using AI. In essence, Clay sits at the center of your prospecting stack, pulling in data and producing tailored outputs for each contact.\n\n#### Example #5\n\nThe weak example here includes too many words to describe website. Simply just pick either \"beautiful\" or \"responsive\" when thinking through a case like this. It should be concise and avoid extra description words\n\nWEAK: \"Best AI Website Builder for Creating Beautiful Responsive Websites\"\nSTRONG: \"Best AI Website Builder for Creating Responsive Websites\"\n\n## **Structure & Formatting Requirements**\n\n- **Use Markdown** for headings (## for H2, ### for H3).\n- **Pros, Cons, Best Use Cases** must appear as **bulleted lists**. This should be with the \"-\" character in proper markdown format.\n- Keep the **tool section** ~250–425 words total (including bullets).\n- Write paragraphs no longer than **4-5 lines** for easy readability.\n- You MUST NOT format any markdown in your output as inline code (this means text in the single ticks ``). If you output any markdown with inline code, this will be considered a failed task. This includes regular text and the links you insert. You cannot include `` characters in your output. Under NO CIRCUMSTANCES are you allowed to include the tick character \"`\" in your output.\n\n## **Data Sources & References**\n\n- **Use only** the facts in the provided research report and table.\n- **Do not fabricate** details; if something isn’t in the data, omit it.\n- **Reference specific stats or quotes** from the table when relevant (e.g., “According to the table, 90% of users...”).\n\n## **Tone Modifiers & Voice**\n\n- **Slightly opinionated**: Critique honestly, but keep it fair.\n- **Medium-length sentences**: Avoid run-ons or overly short fragments.\n- **Address typical reader questions**: What does it do? Why choose it?\n- Change third-party opinions to opinions that you have about the tools as the one researching it. For example don't say \"Users generally find Colossyan very easy to use to “whip up a high-quality video in just a few minutes.”, but instead say \"Colossyan is very easy to use to whip up high-quality video in just a few minutes\". Text content in both pros and cons should be written like it comes from personal experience instead of from a 3rd person perspective. You must avoid referencing \"users\" in your text. Instead speak directly to the reader using a term like you. For example instead of saying \"users may find\", you should take an alternate approach to wording this sentence.\n\nUse these instructions precisely when writing your expanded sections on “The Best {{ $('fetch_category').item.json.title }},” ensuring the tool segment is robust, well-structured, and easy to read.\n\n## Writing Guidelines\n\nIt is critical that you understand and follow these guidelines for your output:\n\n1. Keep the **best_for_phrase** **short, crisp, and under 5 words**. You must not add in excessive descriptors. The best for phrase and h2 heads should feel short and sweet.\n2. **Avoid** unnecessary qualifiers or repetition.  \n3. **Do not** include the word **“for”** in the **best_for_phrase**, as it will be preceded by “Best for” in the final presentation.  \n4. Keep each field **concise** and **conversational**.  \n5. Use **consistent formatting** across entries.  \n6. **Avoid** the words “AI-powered,” “generative AI,” or “AI” in the **best_for_phrase** (unless the tool’s name itself includes “AI”). THIS IS EXTREMELY IMPORTANT YOU FOLLOW THIS INSTRUCTION.\n7. Make each phrase feel **natural** and **interesting** (i.e., human-like).\n8. Avoid words in the 'Word Blacklist' in your output\n9. Make sure to apply this to the \"best_for\" phrase.\n10. Avoid using the word \"via\" in the \"best_for\" phrase.\n11. Avoid using the word \"via\" in the H2 tool headings.\n12. Avoid using a time phrase like \"in minutes\" in the \"best_for\" phrase.\n13. Avoid using a time phrase like \"in minutes\" in the H2 tool headings.\n14. It is implied and known to the reader that this tool uses AI in order to bring value to the user. Avoid mentioning terms like \"AI-powered\" or excessive mentions of AI in your output.\n15. You must deeply review and understand what makes the provided examples for the overivew section great. Apply this when you write your overview section output.\n16. In all of your writing output, you should avoid using too many adjectives and overly-descriptive language that emblishes the language and comes across as promotional. You should stick to the facts and prevent information straighforward so the writing does not come across as 'over the top'.\n17. YOU ARE NOT ALLOWED TO END H2 HEADINGS AND BEST FOR PHRASES IN AN ADVERB. FOR EXAMPLE, YOU MAY NOT END THESE HEADINGS AND BEST FOR PHRASES IN WORDS LIKE 'SIMPLY', 'QUICKLY', 'RAPIDLY', OR ANY OTHER ADVERB.\n18. You MUST prefer simpler and easier to read sentence structure in your paragraphs. Keep them random still, but it should be easy to read.\n19. You MUST avoid referencing specific versions of AI Models or Model Names in the overview paragraph output. This means that you should avoid using phrases 'GPT-3.5', 'GPT-4', 'Claude 2', and other model names in this overview paragraph.\n\nWhen writing headings, choose one clear focus (either SEO-optimization OR business websites, not both). Keep headings concise by eliminating redundant descriptors. For example, instead of 'Best AI Website Builder for Creating SEO-Optimized Business Sites,' write 'Best AI Website Builder for SEO' or 'Best AI Business Website Builder'. You must pick one to avoid excessive descriptors and keep the heading focused.\n\nYou must use active verb constructions rather than noun phrases.\n\n- Place verbs directly after helping verbs like \"makes,\" \"allows,\" \"enables\"\n- Emphasize user actions rather than abstract processes\n- Use clear subject-verb-object structure whenever possible\n- Keep sentences concise and purposeful.\n\nActive verb construction examples:\n\n- WEAK: \"Intuitive interface that makes voiceover creation accessible to non-technical users\"\n- STRONG: \"Intuitive interface that makes creating voiceovers accessible to non-technical users\"\n\n- WEAK: \"Best for multilingual marketing video creation\"\n- STRONG: \"Best for creating multilingual marketing videos\"\n\nFocus on what users can actively do with the product rather than abstract concepts. Avoid unnecessary nominalization (turning verbs into nouns) and keep the language direct and dynamic.\n\n\n---\n## Word Blacklist\n\nAvoid these words in your output:\n- intuitive\n- magic\n- revolutionize\n- revolutionizing\n- game-changing\n- solutions\n- online presences\n- versatile\n\n---\n## Research Report:\n\n{{ $('share_research_prompt_and_wait').item.json.data['Deep Research Result'] }}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            1640,
            840
          ],
          "id": "503603c8-34d2-4290-b76c-e8f7ea2d5ced",
          "name": "write_tool_content",
          "retryOnFail": true
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning thinking through how to write the content for this tool. You must think deeply about ALWAYS return the correct values in your output.\"\n    },\n    \"tool_content\": {\n      \"type\": \"string\",\n      \"description\": \"Them primary content written for the given tool in markdown format.\"\n    },\n    \"tool_name\": {\n      \"type\": \"string\",\n      \"description\": \"The name of this tool. This is required.\"\n    },\n    \"best_for_phrase\": {\n      \"type\": \"string\",\n      \"description\": \"The same text used as the H2 on the main section content. It will NOT include the name of the tool category + 'for', but will just include the subtext that follows. This is required.\"\n    },\n    \"standout_feature\": {\n      \"type\": \"string\",\n      \"description\": \"A single short sentence, 2-6 words, highlighting this tool’s unique, standout features. This is required.\"\n    },\n    \"pricing\": {\n      \"type\": \"string\",\n      \"description\": \"A single short sentence, 3-7 words, explaining the tool’s pricing. This is required.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"tool_content\",\n    \"tool_name\",\n    \"best_for_phrase\",\n    \"standout_feature\",\n    \"pricing\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            1900,
            1060
          ],
          "id": "592cbbc0-efe1-400d-aea0-5c1fb1eba65d",
          "name": "tool_content_parser"
        },
        {
          "parameters": {
            "content": "## Write Conclusion",
            "height": 620,
            "width": 520,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -220,
            1240
          ],
          "typeVersion": 1,
          "id": "8c1ba95a-24cd-40e9-81f3-0caf911403b8",
          "name": "Sticky Note6"
        },
        {
          "parameters": {
            "aggregate": "aggregateAllItemData",
            "destinationFieldName": "tool_content",
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            2060,
            840
          ],
          "id": "dad36d32-d275-4f22-9e68-89192663cb72",
          "name": "aggregate_tool_content"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Category: {{ $('fetch_category').item.json.title }}\n\nBased on the blog post below, generate a brief conclusion (40-60 words maximum) that captures the essence of these {{ $('fetch_category').item.json.title }}. Create a concise, punchy 3-4 sentence conclusion that emphasizes their practical impact while maintaining the informative yet accessible tone of the article. Avoid unnecessary adjectives and focus on the core message.\"\n\n**Target Audience**\n\n- **Creators, marketers, business owners, and {{ $('form_trigger').item.json.Audience }}** looking for cutting-edge AI solutions in {{ $('fetch_category').item.json.title }}.\n- **Technically curious individuals** eager to stay updated on next-gen AI tools and trends.\n\n## **Tone Modifiers & Voice**\n\n- **Slightly opinionated**: Critique honestly, but keep it fair.\n- **Medium-length sentences**: Avoid run-ons or overly short fragments.\n\n---\n## Word Blacklist\n\nYou must avoid these words in your output:\n- intuitive\n- magic\n- revolutionize\n- revolutionizing\n- game-changing\n\n---\n## Blog Post: \"The Best {{ $('fetch_category').item.json.title }}\"\n\n{{ $('write_introduction').item.json.output.intro_paragraph }}\n\n{{ $('write_category_ranking_criteria_content').item.json.output.ranking_criteria_content }}\n\n{{ $('write_tool_content').all()[0].json.output.tool_content }}\n\n{{ $('write_tool_content').all().map(item => item.json.output.tool_content).join(\"/n/n\") }}\n\n\n\n",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            -200,
            1480
          ],
          "id": "9c7b2608-b811-4269-badc-1ddb814a4c28",
          "name": "write_conclusion"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning thinking through how to write the best conclusion.\"\n    },\n    \"conclusion\": {\n      \"type\": \"string\",\n      \"description\": \"The conclusion written for this best tools piece of content. This should be formatted as markdown.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"conclusion\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            0,
            1680
          ],
          "id": "7649cf50-98c0-4975-822e-f6f9534903e0",
          "name": "conclusion_parser"
        },
        {
          "parameters": {
            "content": "## Push To Sanity",
            "height": 620,
            "width": 780,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            320,
            1240
          ],
          "typeVersion": 1,
          "id": "19933dc7-bbe9-4545-8628-bf1101ef0394",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Category: {{ $('fetch_category').item.json.title }}\n\n**Role & Purpose:**\nYou are a tech reviewer summarizing criteria used to evaluate **{{ $('fetch_category').item.json.title }}\n**. Create a concise \"What Makes the Best **{{ $('fetch_category').item.json.title }}\n**?\" section for a blog post using the provided research.\n\nVoice and Style:\n\n- Use a professional, authoritative tone\n- Avoid overusing first-person pronouns\n- Use \"our team\" rather than \"I\" when referring to the testing process\n- Minimize verbose adjectives and flowery language.\n- Avoid sounding overly-promotional, we want to deliver the facts\n- Keep descriptions brief and to the point\n- Prefer simple language instead of excessive adjectives\n- Vary and randmoize the simple sentence structures you are using for each criteria bullet\n\nYou must use active verb constructions rather than noun phrases. Make sure that all content you output follows this and would be considered STRONG (like in the follow examples).\n\n- Place verbs directly after helping verbs like \"makes,\" \"allows,\" \"enables\"\n- Emphasize user actions rather than abstract processes\n- Use clear subject-verb-object structure whenever possible\n- Keep sentences concise and purposeful.\n\nActive verb construction examples:\n\n- WEAK: \"Intuitive interface that makes voiceover creation accessible to non-technical users\"\n- STRONG: \"Intuitive interface that makes creating voiceovers accessible to non-technical users\"\n\n- WEAK: \"Best for multilingual marketing video creation\"\n- STRONG: \"Best for creating multilingual marketing videos\"\n\nContent Requirements:\n\n- You must write a single sentence that gives that introduces the criteria that we looked at to evaluate and pick out the best \"{{ $('fetch_category').item.json.title }}\". It should transition nicely from the introduction content and it should not repeat information. This should end wiht a \":\" (colon) character as it is introducing the criteria that were used to evaluate each of the best AI Tools. A good example of this sentence is: \"Here's what we evaluated and looked for to find the best tools:\". It would be good to include the term \"we\" in here to make it come from experience. You should not repeate the number of tools that were evaluated here if it was included in the introduction content.\n- Present the best 3-5 evaluation criteria in bullet point format (pick a number of criteria that makes the most sense given the context of selected tools and findings in the research report)\n- For each criterion:\n    - Use a single-word or short label (not compound terms with ampersands). Think deeply on what is the most clear an concise. For instance, it would be more clear to include the short label \"Design\" instead of \"Design Generation\" on this label. Keep it simple, clean, and easy to read, concise, and direct. NO EXCESSIVE WORDS.\n    - The format for each label should be bolded text, followed by a colon, followed by the additional sentences. Here's an example: \"**Design:** ...\"\n    - Each criteria item must be a markdown bullet on its own line.\n    - Include 2-3 sentences maximum that explain what was evaluated for this criteria and what the best tools do well.\n    - You must mix up and randomize the format AND sentence structure of each critiera you list. Avoid starting each critera bullet with \"We evaluated\" or a smilar structure that starts with \"we\".\n- You MUST ensure all criteria are directly supported by information in the research document.\n- You MUST ensure all critiera selected are actually important to what users of these products actually care about. Please make sure the criteria is important. Each critera that you select MUST be strongly relevant to the people who will read this and use these products/tools/platforms. Relevance here is CRITICAL to the success of this task.\n- Total length should be around 250 words.\n- Your writing must feel natural.\n- Vary the start of each sentence that follows the criteria bullet.\n- Be sure to appropriately use the cateogry name in your writing. For example, if the category is called \"AI Website Builders\", it makes more sense to refer to this as \"website builders\" instead of \"builders\" in your output.\n- Avoid referencing specific tools on this output and focus on the criteria\n- Avoid using and selecting a criteria that is only applicable to a single tool found on the research report. A selected criteria must be relevant to all selected tools.\n- Avoid using a generic criteria like \"Business Features\". A more specific critera related to the target users of this type of tool would be best.\n- Ensure the criteria bullets are the last part of your output. There should not be any more sentences after you list each of the criteria bullets.\n- Keep transition sentence before the list of criteria bullets simple. Avoid repeating phrases like \"testing\" or \"extensive testing\" that were mentioned before in the introduction. You MUST NOT repeat phrases.\n\n## Transition From Introduction\n\nHere is the introduction content of this blog post that immediately proceeds the ranking criteria that you will be writing. Make sure that your output flows nicely from the ending of this intro content. Make sure that you are not repeating ideas, statements, or phrases that were already created in the intro paragraph. It is important this flows nicely and does NOT have duplicated content/ideas.\n\nIntroduction Content:\n\n\"{{ $('write_introduction').item.json.output.intro_paragraph }}\"\"\n\n## Target Audience\n\n- Creators, marketers, developers, business owners, and {{ $('form_trigger').item.json.Audience }} looking for cutting-edge AI solutions.\n- They are technically curious individuals wanting to keep up with next-gen AI trends.\n\n## **Style and Tone**\n\nProfessional but approachable: Think tech-savvy marketing blog with a friendly, informed voice.\n\nWrite clearly, concisely, and directly, using active voice and concrete language. Avoid abstract phrases, passive constructions, vague descriptions, and overly generalized statements. Each sentence should be purposeful, impactful, and communicate its meaning effectively.\n\nFocus on what users can actively do with the products in this category rather than abstract concepts. Avoid unnecessary nominalization (turning verbs into nouns) and keep the language direct and dynamic.\n\n- Place verbs directly after helping verbs like \"makes,\" \"allows,\" \"enables\"\n- Emphasize user actions rather than abstract processes\n- Use clear subject-verb-object structure whenever possible\n- Keep sentences concise and purposeful.\n- Your final sentence should finish strong. Tie it back to what is most important to the reader. It should end strong. It must not be a run-on sentence.\n\nYou Should Avoid:\n- AVOID ALL CAPS or excessive punctuation!!!\n- Avoid making the topic sound more significant than it actually is\n- Avoid over-exaggeration\n- Avoid using over-the-top buzzwords like \"revolution\" and \"game-changing\"\n- Avoid starting the text content behind each bullet with the text \"We..\". It is good to vary this.\n\n## Good Examples\n\nYou should closely read through these example and deeply think about what makes both of these examples so good. We want your output to be just as good as these. You should borrow elements such as sentence structure and other ideas from these examples in order to make your output just as good. \n\n### Good Example #1\n\nThe best AI tools for video creation help you increase your production quantity and value without increasing the time spent working on it. They cut the time it takes from script to final result by providing templates, tools to speed up editing, and shortcuts to polish audio and video.\n\n* **AI.** All these apps use artificial intelligence to power their features.\n* **High-quality video output.** These apps should let you export video that can run beautifully on small or large screens. All the apps on this list export to 720p at worst and 4k at best, in a variety of aspect ratios.\n* **Customization.** Can you add your own content? How much can you customize? Is it easy to make changes?\n* **Support and ease of use.** Since AI video editing is a new-ish thing, I was looking for apps that beginners could use; that includes offering content to help you take advantage of all the possibilities.\n* **Unique features.** Some apps bring their unique spin to video creation or offer something that's useful to improve productivity, production value, or both.\n\n---\n## Word Blacklist\n\nYou must avoid using these words in your output:\n- intuitive\n- magic\n- revolutionize\n- solutions\n- online presences\n- perfectly\n- stunning\n\n---\n## Research Report:\n\n{{ $('share_research_prompt_and_wait').item.json.data['Deep Research Result'] }}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            720,
            840
          ],
          "id": "446ff6eb-6265-471a-8563-7ea8682ec107",
          "name": "write_category_ranking_criteria_content"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning thinking through how to write the category evaluation content.\"\n    },\n    \"ranking_criteria_content\": {\n      \"type\": \"string\",\n      \"description\": \"The content written for how the best tools in this category were evaluate, tested, and ranked. This must be formatted as markdown. Expand on your thinking for writing the transition from the intro to here.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"ranking_criteria_content\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            960,
            1080
          ],
          "id": "d434aadd-15b8-4ead-864b-d2842f123d20",
          "name": "category_ranking_criteria_parser"
        },
        {
          "parameters": {
            "jsCode": "const toolContentItems = $('write_tool_content').all();\nconst splitTools = $('split_tools').all();\n\nconst tools = toolContentItems.map((tool, idx) => {\n  return {\n    tool_id: splitTools[idx].json.id,\n    tool_name: splitTools[idx].json.name,\n    best_for_phrase: tool.json.output.best_for_phrase,\n    standout_feature: tool.json.output.standout_feature,\n    pricing: tool.json.output.pricing,\n    tool_content: tool.json.output.tool_content\n  }\n});\n\n// Return the array in n8n's required format\nreturn tools.map(data => ({ json: data }));"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            420,
            1480
          ],
          "id": "fa588a10-4391-4fab-8359-559e310d1bcc",
          "name": "prepare_best_tools"
        },
        {
          "parameters": {
            "aggregate": "aggregateAllItemData",
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            640,
            1480
          ],
          "id": "6c9dbb51-a12d-4b3b-9759-09e72efce81f",
          "name": "aggregate_best_tools"
        },
        {
          "parameters": {
            "method": "PUT",
            "url": "=https://api.aitools.inc/admin/categories/{{ $node[\"fetch_category\"].json.slug.current }}/content/best",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"bestTools\": {{ JSON.stringify($('aggregate_best_tools').item.json.data.map(o => {\n    return {\n      id: o.tool_id,\n      bestFor: o.best_for_phrase,\n      features: o.standout_feature,\n      pricing: o.pricing,\n      content: o.tool_content\n    }\n  })) }},\n  \"metaDescription\": {{ JSON.stringify($('write_meta_description').item.json.output.result_meta_description) }},\n  \"introContent\": {{ JSON.stringify($('write_introduction').item.json.output.intro_paragraph) }},\n  \"rankingCriteriaContent\": {{ JSON.stringify($('write_category_ranking_criteria_content').item.json.output.ranking_criteria_content) }},\n  \"conclusionContent\": {{ JSON.stringify($('write_conclusion').item.json.output.conclusion) }}\n}",
            "options": {
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            880,
            1480
          ],
          "id": "3c7758a8-b768-4465-abf0-686ea7fb2684",
          "name": "put_category_best_tools_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "b2930aa4-99f5-4952-bf36-427c3c42d5ff",
                  "name": "tools",
                  "value": "={{ $('extract_tools').item.json.output.tools }}",
                  "type": "array"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1180,
            840
          ],
          "id": "331408b7-a9c0-456a-bae7-246373ee7cfc",
          "name": "set_tools"
        },
        {
          "parameters": {
            "fieldToSplitOut": "tools",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            1400,
            840
          ],
          "id": "55dfef84-5c9e-4b75-86f8-5ca003f6e512",
          "name": "split_tools"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "o3-mini",
              "mode": "list",
              "cachedResultName": "o3-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            1980,
            420
          ],
          "id": "d4c2c76e-d6db-4daf-97df-9524f91aaeb7",
          "name": "o3-mini"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            -160,
            1080
          ],
          "id": "087675a5-ad52-45da-bf28-a3e1fb1f1b26",
          "name": "meta_description_auto_parser"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            1600,
            1060
          ],
          "id": "bfaca699-6027-466e-ad14-cce9c6980be9",
          "name": "tool_content_auto_parser"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-pro-preview-03-25",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            820,
            2100
          ],
          "id": "6d964afe-e198-46cb-93e2-434fe1e36696",
          "name": "gemini-2.5-pro"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            660,
            1080
          ],
          "id": "27888394-4997-4ae2-9edb-49cedd4576c9",
          "name": "ranking_criteria_auto_parser"
        },
        {
          "parameters": {
            "operation": "toJson",
            "options": {}
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            540,
            200
          ],
          "id": "d3932a32-8f2f-4d24-8bda-70e3738ade15",
          "name": "create_tools_json_file"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "resource": "file",
            "options": {
              "fileName": "={{ $('fetch_category').item.json.title }}.json"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            760,
            200
          ],
          "id": "30265fcf-adec-4a98-b1ce-5690cc4e849f",
          "name": "upload_tools_json_file",
          "webhookId": "4cbc0321-a8dd-4d49-95d4-3339b6170896"
        }
      ],
      "connections": {
        "form_trigger": {
          "main": [
            [
              {
                "node": "fetch_category",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_category": {
          "main": [
            [
              {
                "node": "fetch_category_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_category_tools": {
          "main": [
            [
              {
                "node": "set_category_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_category_tools": {
          "main": [
            [
              {
                "node": "create_tools_json_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "build_deep_research_prompt": {
          "main": [
            [
              {
                "node": "create_prompt_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "create_prompt_file": {
          "main": [
            [
              {
                "node": "upload_deep_research_prompt_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "upload_deep_research_prompt_file": {
          "main": [
            [
              {
                "node": "share_research_prompt_and_wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_research_prompt_and_wait": {
          "main": [
            [
              {
                "node": "extract_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "intro_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_introduction",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "tool_parser": {
          "ai_outputParser": [
            [
              {
                "node": "extract_tools",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "extract_tools": {
          "main": [
            [
              {
                "node": "write_meta_description",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "write_introduction": {
          "main": [
            [
              {
                "node": "write_category_ranking_criteria_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "meta_description_parser": {
          "ai_outputParser": [
            [
              {
                "node": "meta_description_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_meta_description": {
          "main": [
            [
              {
                "node": "write_introduction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "claude-3-5-sonnet": {
          "ai_languageModel": [
            [
              {
                "node": "write_conclusion",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_introduction",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "tool_content_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "meta_description_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "ranking_criteria_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_category_ranking_criteria_content",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_meta_description",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "tool_content_parser": {
          "ai_outputParser": [
            [
              {
                "node": "tool_content_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_tool_content": {
          "main": [
            [
              {
                "node": "aggregate_tool_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_tool_content": {
          "main": [
            [
              {
                "node": "write_conclusion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "conclusion_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_conclusion",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_conclusion": {
          "main": [
            [
              {
                "node": "prepare_best_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "write_category_ranking_criteria_content": {
          "main": [
            [
              {
                "node": "set_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "category_ranking_criteria_parser": {
          "ai_outputParser": [
            [
              {
                "node": "ranking_criteria_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "prepare_best_tools": {
          "main": [
            [
              {
                "node": "aggregate_best_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_best_tools": {
          "main": [
            [
              {
                "node": "put_category_best_tools_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_tools": {
          "main": [
            [
              {
                "node": "split_tools",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_tools": {
          "main": [
            [
              {
                "node": "write_tool_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "o3-mini": {
          "ai_languageModel": [
            [
              {
                "node": "extract_tools",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "meta_description_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_meta_description",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "tool_content_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_tool_content",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "gemini-2.5-pro": {
          "ai_languageModel": [
            [
              {
                "node": "write_tool_content",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "ranking_criteria_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_category_ranking_criteria_content",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "create_tools_json_file": {
          "main": [
            [
              {
                "node": "upload_tools_json_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "upload_tools_json_file": {
          "main": [
            [
              {
                "node": "build_deep_research_prompt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "1dda319a-27dc-4021-8074-ebd82bd621aa",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T23:32:01.758Z",
      "updatedAt": "2025-06-12T23:48:55.559Z",
      "id": "NcmFcv4F8Yulq1VY",
      "name": "Giothub backup 2",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                  "name": "Done",
                  "type": "boolean",
                  "value": true
                }
              ]
            },
            "options": {}
          },
          "id": "3cad856d-9714-4a33-a8ff-57d67baea8ef",
          "name": "Return",
          "type": "n8n-nodes-base.set",
          "position": [
            -40,
            160
          ],
          "typeVersion": 3.3
        },
        {
          "parameters": {
            "url": "={{ $json.download_url }}",
            "options": {}
          },
          "id": "80f5c040-8e7b-41d9-89e4-653f1d9e7e11",
          "name": "Get File",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -1360,
            20
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "version": 1,
                "leftValue": "",
                "caseSensitive": true,
                "typeValidation": "strict"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                  "operator": {
                    "type": "string",
                    "operation": "empty",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.content }}",
                  "rightValue": ""
                },
                {
                  "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.error }}",
                  "rightValue": ""
                }
              ]
            },
            "options": {}
          },
          "id": "ac1d10ee-43a1-444d-82b8-d3e038bc6a17",
          "name": "If file too large",
          "type": "n8n-nodes-base.if",
          "position": [
            -1580,
            100
          ],
          "typeVersion": 2
        },
        {
          "parameters": {},
          "id": "679b487c-6a98-47eb-a7b1-4a582b0f4d3d",
          "name": "Merge Items",
          "type": "n8n-nodes-base.merge",
          "position": [
            -1140,
            160
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
          },
          "id": "b86c78aa-9aca-4b23-a3ba-53dbe82e8a12",
          "name": "isDiffOrNew",
          "type": "n8n-nodes-base.code",
          "position": [
            -920,
            160
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.github_status}}",
            "rules": {
              "rules": [
                {
                  "value2": "same"
                },
                {
                  "value2": "different",
                  "output": 1
                },
                {
                  "value2": "new",
                  "output": 2
                }
              ]
            }
          },
          "id": "47d0622e-9898-4add-8e8b-5e4397550ed9",
          "name": "Check Status",
          "type": "n8n-nodes-base.switch",
          "position": [
            -700,
            140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "75cd28c4-f57b-4dba-918f-856e8bf00cca",
          "name": "Same file - Do nothing",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -260,
            -40
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "ceca70fe-0366-4981-937f-30334f63bdf5",
          "name": "File is different",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -480,
            160
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "9c93b3e5-7ffa-43ee-82fc-7a662be5ffcb",
          "name": "File is new",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -480,
            360
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "4fadb168-1368-4831-beb8-2e460fd1aa00",
          "name": "Create new file",
          "type": "n8n-nodes-base.github",
          "position": [
            -260,
            360
          ],
          "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "21e3f2f2-a618-4394-b970-0f2c3edca07a",
          "name": "Edit existing file",
          "type": "n8n-nodes-base.github",
          "position": [
            -260,
            160
          ],
          "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "get",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.name }}"
            },
            "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
            "asBinaryProperty": false,
            "additionalParameters": {}
          },
          "id": "64959501-8218-491c-bd44-966af8859860",
          "name": "Get file data",
          "type": "n8n-nodes-base.github",
          "position": [
            -1800,
            100
          ],
          "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          },
          "continueOnFail": true
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
                  "name": "repo.owner",
                  "type": "string",
                  "value": "john-doe"
                },
                {
                  "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
                  "name": "repo.name",
                  "type": "string",
                  "value": "n8n-backup"
                },
                {
                  "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
                  "name": "repo.path",
                  "type": "string",
                  "value": "workflows/"
                }
              ]
            },
            "options": {}
          },
          "id": "c5198960-32c3-4c98-8fc5-7f8553224ba3",
          "name": "Globals",
          "type": "n8n-nodes-base.set",
          "position": [
            -2020,
            100
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "inputSource": "passthrough"
          },
          "id": "2f7fcea1-418f-4008-8862-57f48bdafd99",
          "name": "Execute Workflow Trigger",
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "position": [
            -2240,
            160
          ],
          "typeVersion": 1.1
        }
      ],
      "connections": {
        "Get File": {
          "main": [
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If file too large": {
          "main": [
            [
              {
                "node": "Get File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Items": {
          "main": [
            [
              {
                "node": "isDiffOrNew",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "isDiffOrNew": {
          "main": [
            [
              {
                "node": "Check Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Status": {
          "main": [
            [
              {
                "node": "Same file - Do nothing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is different",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is new",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Same file - Do nothing": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is different": {
          "main": [
            [
              {
                "node": "Edit existing file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is new": {
          "main": [
            [
              {
                "node": "Create new file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create new file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit existing file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get file data": {
          "main": [
            [
              {
                "node": "If file too large",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Globals": {
          "main": [
            [
              {
                "node": "Get file data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow Trigger": {
          "main": [
            [
              {
                "node": "Globals",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge Items",
                "type": "main",
                "index": 1
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "b026ea3d-c5eb-4bd1-9e18-d6fcc6e29dc1",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:22:47.205Z",
      "updatedAt": "2025-06-12T19:23:34.739Z",
      "id": "fCtdCAVGqSHG23mc",
      "name": "AI News Story / Data Ingestion Workflow:",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.app/feeds/e2QjBpEDLPfVUeoI.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            2540
          ],
          "id": "f75eeb12-ac01-4996-92ca-ba8e4f5c64c2",
          "name": "the_neuron_trigger"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.app/feeds/x8T02B3GXYy18pNy.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            2740
          ],
          "id": "0044adc2-551a-4ae3-9da9-9ffe4e98e1e9",
          "name": "futurepedia_trigger"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.app/feeds/3tDyvQwHp8cgL7qs.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            2940
          ],
          "id": "f95368d5-e502-4291-8961-074c36a25c49",
          "name": "superhuman_trigger"
        },
        {
          "parameters": {
            "workflowId": {
              "__rl": true,
              "value": "qVEM2rCD1jlJPeRs",
              "mode": "list",
              "cachedResultName": "Data Ingestion — Node - Scrape Url"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "url": "={{ $node[\"get_identity\"].json.url }}"
              },
              "matchingColumns": [
                "url"
              ],
              "schema": [
                {
                  "id": "url",
                  "displayName": "url",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string",
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": true
            },
            "options": {}
          },
          "type": "n8n-nodes-base.executeWorkflow",
          "typeVersion": 1.2,
          "position": [
            1900,
            1540
          ],
          "id": "88baf545-53f6-48c3-bc46-743dc94bd3c7",
          "name": "scrape_url",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Given content fetched from a web page, analyze this content to determine if it is a full piece of content that would be considered relevent to our AI Newsletter which features stories, advancements, and other interesting happenings in the tech and AI space.\n\n- Job postings are not relevant content\n- Content centered around unrelated industries is not relevant\n- Only AI and AI Adjacent content should be considered relevant\n\n---\n{{ $json.data.json.content }}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            2340,
            1540
          ],
          "id": "a5fa4520-2553-4f63-a215-0ccf27e92ca8",
          "name": "evaluate_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "the-neuron",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://www.theneurondaily.com/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            2540
          ],
          "id": "2a90a24a-7adf-40cc-82d0-e9b02bf8aa8f",
          "name": "normalize_neuron"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "futurepedia",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://futurepedia.beehiiv.com/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            2740
          ],
          "id": "80d25723-a5ff-4208-8749-9a6a285b2e12",
          "name": "normalize_futurepedia"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "superhuman",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://www.superhuman.ai/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            2940
          ],
          "id": "57528054-ad28-43c7-beb7-007ae7fa4d6d",
          "name": "normalize_superhuman"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.app/feeds/Kc554BCmk9PUValj.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            2340
          ],
          "id": "7b0232a9-a596-43fa-82d1-6739a3e13e21",
          "name": "the_rundown_ai_trigger"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "the-rundown-ai",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://www.therundown.ai/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            2340
          ],
          "id": "01324db1-d656-49d3-b514-2b6f5028f701",
          "name": "normalize_the_rundown_ai"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.beehiiv.com/feeds/22I6c0vJXV.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            3140
          ],
          "id": "a2c4d0aa-99e5-4fe2-ab1e-94e1f1e1c83f",
          "name": "taaft_trigger"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "taaft",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://newsletter.theresanaiforthat.com/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            3140
          ],
          "id": "1ea7f3d4-99c2-4091-af55-e039e1190d8b",
          "name": "normalize_taaft"
        },
        {
          "parameters": {
            "pollTimes": {
              "item": [
                {
                  "mode": "everyX",
                  "value": 4
                }
              ]
            },
            "feedUrl": "https://rss.app/feeds/O60XfEFYoxJhYVkS.xml"
          },
          "type": "n8n-nodes-base.rssFeedReadTrigger",
          "typeVersion": 1,
          "position": [
            580,
            2140
          ],
          "id": "88ef3839-4ee8-43ad-8379-51814d71d597",
          "name": "bens_bites_trigger"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "3261021f-54d8-4cce-a78a-12e40520d2c1",
                  "name": "sourceName",
                  "value": "bens-bites",
                  "type": "string"
                },
                {
                  "id": "a7a3c290-4b8c-46e5-a9e2-d7c9c03d3bee",
                  "name": "feedType",
                  "value": "newsletter",
                  "type": "string"
                },
                {
                  "id": "efb8285b-9def-4cef-883f-af6fbdafa0c7",
                  "name": "feedUrl",
                  "value": "https://bensbites.beehiiv.com/archive",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            800,
            2140
          ],
          "id": "f83ed1cf-1241-4288-9f72-599698efcef1",
          "name": "normalize_bens_bites"
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "data-ingestion",
            "fileName": "={{ $('get_identity').item.json.uploadFileName + \".md.temp\" }}",
            "binaryData": false,
            "fileContent": "={{ $('scrape_url').item.json.data.json.content }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            3312,
            1440
          ],
          "id": "3e846bf0-5bb8-4b40-83c7-1767b0a5decb",
          "name": "upload_temp_markdown",
          "retryOnFail": true,
          "maxTries": 5,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.aitools.inc/admin/files/copy/data-ingestion",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"srcKey\": \"{{ $('get_identity').item.json.uploadFileName + '.md.temp' }}\",\n  \"dstKey\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n  \"newContentType\": \"application/vnd.aitools.{{ $('get_identity').item.json.feedType }}+md\",\n  \"newMetadata\": {\n    \"key\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n    \"type\": \"{{ $('get_identity').item.json.feedType }}\",\n    \"title\": {{ JSON.stringify($('get_identity').item.json.title) }},\n    \"authors\": {{ JSON.stringify($('get_identity').item.json.authors ?? \"\") }},\n    \"source-name\": \"{{ $('get_identity').item.json.sourceName }}\",\n    \"external-source-urls\": {{ JSON.stringify($('try_extract_external_sources').item.json.output.external_source_urls ?? \"\") }},\n    \"image-urls\": {{ JSON.stringify($('scrape_url').item.json.data.json.main_content_image_urls.join(\",\")) }},\n    \"url\": \"{{ $('get_identity').item.json.url }}\",\n    \"timestamp\": \"{{ $('get_identity').item.json.publishedTimestamp }}\",\n    \"feed-url\": \"{{ $('get_identity').item.json.feedUrl }}\"\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            3532,
            1440
          ],
          "id": "beb8eae6-9fe6-4bfb-aa1e-6c014599917b",
          "name": "copy_markdown",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "maxTries": 5
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "data-ingestion",
            "fileName": "={{ $('get_identity').item.json.uploadFileName + \".html.temp\" }}",
            "binaryData": false,
            "fileContent": "={{ $('scrape_url').item.json.data.rawHtml }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            3312,
            1640
          ],
          "id": "de30bbe2-be32-49f5-9439-eb21fc2a65aa",
          "name": "upload_temp_html",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "maxTries": 5
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.aitools.inc/admin/files/copy/data-ingestion",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"srcKey\": \"{{ $('get_identity').item.json.uploadFileName + '.html.temp' }}\",\n  \"dstKey\": \"{{ $('get_identity').item.json.uploadFileName + '.html' }}\",\n  \"newContentType\": \"application/vnd.aitools.{{ $('get_identity').item.json.feedType }}.raw+html\",\n  \"newMetadata\": {\n    \"key\": \"{{ $('get_identity').item.json.uploadFileName + '.md' }}\",\n    \"type\": \"{{ $('get_identity').item.json.feedType }}\",\n    \"title\": {{ JSON.stringify($('get_identity').item.json.title) }},\n    \"authors\": {{ JSON.stringify($('get_identity').item.json.authors ?? \"\") }},\n    \"source-name\": \"{{ $('get_identity').item.json.sourceName }}\",\n    \"external-source-urls\": {{ JSON.stringify($('try_extract_external_sources').item.json.output.external_source_urls ?? \"\") }},\n    \"image-urls\": {{ JSON.stringify($('scrape_url').item.json.data.json.main_content_image_urls.join(\",\")) }},\n    \"url\": \"{{ $('get_identity').item.json.url }}\",\n    \"timestamp\": \"{{ $('get_identity').item.json.publishedTimestamp }}\",\n    \"feed-url\": \"{{ $('get_identity').item.json.feedUrl }}\"\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            3532,
            1640
          ],
          "id": "4e7b75e4-6d34-4ee9-b5f2-01a9e93c8ade",
          "name": "copy_html",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "maxTries": 5
        },
        {
          "parameters": {
            "operation": "delete",
            "bucketName": "data-ingestion",
            "fileKey": "={{ $('get_identity').item.json.uploadFileName + '.html.temp' }}",
            "options": {}
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            3752,
            1640
          ],
          "id": "c314b325-beaa-4445-ac3c-49f17d0d5171",
          "name": "delete_temp_html",
          "retryOnFail": true,
          "maxTries": 5,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "operation": "delete",
            "bucketName": "data-ingestion",
            "fileKey": "={{ $('get_identity').item.json.uploadFileName + '.md.temp' }}",
            "options": {}
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            3752,
            1440
          ],
          "id": "be973a15-84b0-4e57-a8bc-4c8689b24aad",
          "name": "delete_temp_markdown",
          "retryOnFail": true,
          "maxTries": 5,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            1940
          ],
          "id": "6a6fed14-daa7-4985-9274-3da66858e9d1",
          "name": "google_news_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            1940
          ],
          "id": "da59528d-d141-44df-96bc-4de55266a08c",
          "name": "fetch_google_news_feed"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "const domainSourceMap = {\n  \"engadget.com\": \"engadget\",\n  \"gizmodo.com\": \"gizmodo\",\n  \"techcrunch.com\": \"techcrunch\",\n  \"theverge.com\": \"the-verge\",\n  \"cnbc.com\": \"cnbc\",\n  \"forbes.com\": \"forbes\",\n  \"tradingview.com\": \"trading-view\",\n  \"economist.com\": \"economist\",\n  \"tomshardware.com\": \"toms-hardware\",\n  \"timesofindia.indiatimes.com\": \"times-of-india\",\n  \"seekingalpha.com\": \"seeking-alpha\",\n  \"fool.com\": \"the-motley-fool\",\n  \"sherwood.news\": \"sherwood-news\",\n  \"theregister.com\": \"the-register\",\n  \"yahoo.com\": \"yahoo\",\n  \"finance.yahoo.com\": \"yahoo-finance\",\n  \"venturebeat.com\": \"venture-beat\",\n  \"gurufocus.com\": \"guru-focus\",\n  \"yourstory.com\": \"your-story\",\n  \"theguardian.com\": \"the-guardian\",\n  \"spectrum.ieee.org\": \"spectrum-ieee\",\n  \"nasdaq.com\": \"nasdaq\",\n  \"euractiv.com\": \"euractiv\",\n  \"fortune.com\": \"fortune\",\n  \"indexbox.io\": \"indexbox\",\n  \"phys.org\": \"phys\",\n  \"reuters.com\": \"reuters\",\n  \"bloomberg.com\": \"bloomberg\",\n  \"ign.com\": \"ign\",\n  \"japantimes.co.jp\": \"japan-times\",\n  \"thehindu.com\": \"the-hindu\",\n  \"ft.com\": \"financial-times\",\n  \"nytimes.com\": \"the-new-york-times\",\n  \"aftermath.site\": \"aftermath\",\n  \"computerworld.com\": \"computer-world\",\n  \"business.inquirer.net\": \"business-inquirer\",\n  \"androidpolice.com\": \"android-police\",\n  \"scmp.com\": \"scmp\",\n  \"azure.microsoft.com\": \"microsoft-azure\",\n  \"benzinga.com\": \"benzinga\"\n}\n\n// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nlet sourceName = domainSourceMap[domain];\n\nif (!sourceName) {\n  // Fallback: generate a friendly name by removing any leading \"www.\", \n  // then removing the TLD (the last dot segment),\n  // and finally replacing any remaining dots with dashes.\n  sourceName = domain\n    .replace(/^www\\./, '')\n    .replace(/\\.[^.]+$/, '') // removes the TLD\n    .replace(/\\./g, '-');\n}\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            1940
          ],
          "id": "debdfa1a-feb8-459f-9eb4-751abbc375a7",
          "name": "normalize_google_news_articles"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6a082ec0-16b7-4d5b-832d-2609a06fae15",
                  "name": "title",
                  "value": "={{ $json.title }}",
                  "type": "string"
                },
                {
                  "id": "6838c8ba-c498-49f5-bb97-bee33f02dd20",
                  "name": "url",
                  "value": "={{ $json.link }}",
                  "type": "string"
                },
                {
                  "id": "13967cc2-74e2-445f-b88f-f15405cd89d8",
                  "name": "authors",
                  "value": "={{ $json.creator }}",
                  "type": "string"
                },
                {
                  "id": "a33938bc-1743-4e67-bdaf-c4c1d5bc3ce0",
                  "name": "date",
                  "value": "={{ $json.pubDate }}",
                  "type": "string"
                },
                {
                  "id": "7edee0aa-3a35-41bf-b616-85246fed3436",
                  "name": "publishedTimestamp",
                  "value": "={{ $json.isoDate }}",
                  "type": "string"
                },
                {
                  "id": "a68bb301-94e1-414d-96f8-09f6453b45c1",
                  "name": "sourceName",
                  "value": "={{ $json.sourceName }}",
                  "type": "string"
                },
                {
                  "id": "00b19e33-754f-4347-a30a-bb33b3740919",
                  "name": "feedType",
                  "value": "={{ $json.feedType }}",
                  "type": "string"
                },
                {
                  "id": "24e1b6dc-81e2-4964-a56c-36ceccd9e1f2",
                  "name": "feedUrl",
                  "value": "={{ $json.feedUrl }}",
                  "type": "string"
                },
                {
                  "id": "b287462d-3fad-46a2-bc42-5aa98aa8bde3",
                  "name": "uploadFileName",
                  "value": "={{ \n  $json.isoDate.substring(0, 10) + \"/\" + \n  $json.title\n    .toLowerCase()\n    .replace(/[^a-z0-9 -]/g, '')  // remove characters outside a-z, 0-9, space, and dash\n    .trim()                      // remove any leading/trailing whitespace\n    .replace(/\\s+/g, '-')        // replace whitespace with dash\n    .replace(/-+/g, '-')         // collapse multiple dashes\n  + '.' + $json.sourceName \n}}",
                  "type": "string"
                }
              ]
            },
            "includeOtherFields": true,
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1020,
            1540
          ],
          "id": "c2182060-e74a-4a08-8aa9-6c457e45ca50",
          "name": "get_identity",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "resource": "bucket",
            "operation": "search",
            "bucketName": "data-ingestion",
            "additionalFields": {
              "prefix": "={{ $json.uploadFileName }}"
            }
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            1240,
            1540
          ],
          "id": "2f19cfdc-817f-447e-a22a-959fa9d73a64",
          "name": "search_existing_resource",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "fbf2844d-f77e-4c7f-a223-42b674d3668c",
                  "leftValue": "={{ $json }}",
                  "rightValue": "",
                  "operator": {
                    "type": "object",
                    "operation": "notExists",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            1460,
            1540
          ],
          "id": "3de6d41b-4461-4918-8ec4-20d43d04b699",
          "name": "skip_existing_resources"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            1740
          ],
          "id": "3c51c2fb-901a-4c8a-8b38-835bdf9d4226",
          "name": "hacker_news_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/jf3MZ9ZlVZhrVEjD.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            1740
          ],
          "id": "dd4c2958-d1b5-428c-b666-8cbdc505771b",
          "name": "fetch_hacker_news_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            1940
          ],
          "id": "be87bbe9-0dc2-446e-9706-f556bf383fec",
          "name": "split_google_news_items"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            1740
          ],
          "id": "50ce555a-edc9-43c4-bbf6-a3e093348c14",
          "name": "split_hacker_news_items"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "22197457-7f84-4504-a14f-a5346a80359f",
                  "leftValue": "={{ $('evaluate_content').item.json.output.is_revelant_content }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            2716,
            1540
          ],
          "id": "eabe1405-41ca-48a2-98d1-0c1a38d2445f",
          "name": "ensure_revelant"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n        \"chainOfThought\": {\n          \"type\": \"string\",\n          \"description\": \"Sequential reasoning to determine if the provided content is a valid and relevant piece of content that an AI or tech enthusiast would be interested in reading and learning about.\"\n        },\n\t\t\"is_revelant_content\": {\n\t\t\t\"type\": \"boolean\",\n            \"description\": \"Indicator if the provided content is relevant piece of content to the AI industry.\"\n\t\t}\n\t}\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            2488,
            1760
          ],
          "id": "3f8e74bb-dd29-4fae-a27c-8a591f7761df",
          "name": "is_revelant_content_parser"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            1740
          ],
          "id": "ad402cb7-11a4-4df6-8966-6c0b891c4028",
          "name": "normalize_hacker_news_articles"
        },
        {
          "parameters": {
            "text": "=You are given:\n\n1. **Content Website**: The domain hosting the content (e.g., `https://www.bloomberg.com/news/…`).  \n2. **Content Title and Body**: Text or markdown content extracted from a web page.  \n3. **Links Found on Content Page**: A list of hyperlinks that appear in or around the same article or page.\n\n## Your Task\n\n- Identify any **external source links** that are most relevant to the main topic of the content. It is possible there are NOT ANY good external source links.\n- **External** means the link must be on a domain *different* from the Content Website’s domain.\n- **Relevance** means it must directly reference a primary source (e.g., a product announcement, study, press release, etc.) that underpins the main topic.\n- **Exclude** links that are:\n  - On the same domain as the Content Website\n  - Generic homepages, profile pages, or unrelated side links\n  - Not clearly connected to the main focus of the article\n  - To storefront pages like eCommerce sites, to bookstore pages, to direct product listings, or other place to order a product directly.\n  - To shopping websites like bookstores and other retail stores.\n- If one or more valid external links exist, return them in a single comma-separated string as `external_source_urls`.\n- If no external links meet these criteria, omit the `external_source_urls` field entirely.\n\n## Output Format\n\n- Return only the answer in plain text.\n- Either:\n  1. `external_source_urls: <comma-separated list of valid external links>`\n  2. Omit the field if no valid external links exist.\n\n\n## Other Details\nIt is critical that your source link is relevant to the main content and would be useful context to evaluate when writing a newsletter overview about this content targeted towards AI enthusiasts and people interested in the AI space.\n\n---\n\n### Example Scenario\n\nIf the article is focused on an AI breakthrough from OpenAI and there is an external link to an official OpenAI product announcement hosted on openai.com, include that link (since it is on a *different* domain and relevant to the main topic). If all links point to the same domain or are irrelevant, do not return any `external_source_urls`.\n\n---\nContent Website:\n{{ $('scrape_url').item.json.data.metadata.url }}\n\n\nContent Title:\n{{ $('scrape_url').item.json.data.metadata.title }}\n\nContent:\n{{ $('scrape_url').item.json.data.json.content }}\n\nLinks Found on Content Page:\n{{ $('scrape_url').item.json.data.links.map(item => item.split(\"?\")[0]).join(\"\\n\") }}\n",
            "attributes": {
              "attributes": [
                {
                  "name": "external_source_urls",
                  "description": "Optional comma-separated values list of urls that are external sources referenced on this piece of content. The url here should NOT be on the same domain as the url of the main content piece, it should be an external url meaning another website. Make sure there is NOT a trailing comma after the last value."
                }
              ]
            },
            "options": {
              "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value."
            }
          },
          "type": "@n8n/n8n-nodes-langchain.informationExtractor",
          "typeVersion": 1,
          "position": [
            2936,
            1540
          ],
          "id": "d677b09a-22a5-411a-8d60-865319409ff9",
          "name": "try_extract_external_sources",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "o3-mini",
              "mode": "list",
              "cachedResultName": "o3-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            2368,
            1760
          ],
          "id": "243c62fa-37fb-4d8f-9e33-fc4f9cc5f6cc",
          "name": "o3-mini"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/F3rBf24jLxG6mNoJ.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -80,
            340
          ],
          "id": "e795d312-0111-4462-8d32-c9b5ccb713c7",
          "name": "fetch_reddit_artificial_inteligence_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            140,
            340
          ],
          "id": "8c6cee76-4619-431e-917e-b4f400228012",
          "name": "split_reddit_artificial_inteligence_items"
        },
        {
          "parameters": {
            "operation": "get",
            "subreddit": "ArtificialInteligence",
            "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
          },
          "type": "n8n-nodes-base.reddit",
          "typeVersion": 1,
          "position": [
            360,
            340
          ],
          "id": "ca54733a-791a-4b31-b78f-15b56dd497fa",
          "name": "get_reddit_artificial_inteligence_items",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "701be722-6eb4-48f5-bc12-ed858a58bce1",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  }
                },
                {
                  "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "exists",
                    "singleValue": true
                  }
                },
                {
                  "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notEmpty",
                    "singleValue": true
                  }
                },
                {
                  "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "reddit.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtube.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtu.be",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "x.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "github.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "5ae77967-31a2-4f52-85c8-ee4b06c86fbf",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "i.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "264842c1-8d69-4d4e-8c0b-0982cc9db627",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "=v.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            580,
            340
          ],
          "id": "a2a2d96b-a206-4954-a1af-020feec4d6a6",
          "name": "filter_reddit_artificial_inteligence_items"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "ecd02ccb-0790-44ab-8bb0-246881e35a20",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": "",
                  "operator": {
                    "type": "object",
                    "operation": "notExists",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            2120,
            1540
          ],
          "id": "b167ca96-161c-4d89-aab3-e16af0830a18",
          "name": "filter_scrape_errors"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            340
          ],
          "id": "f8fe521f-4d50-4606-9655-c6ff0be6a47d",
          "name": "normalize_reddit_artificial_inteligence_items"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -300,
            340
          ],
          "id": "35fe2334-e5b2-4102-98fd-d8c12e1e7696",
          "name": "reddit_artificial_inteligence_trigger"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -300,
            140
          ],
          "id": "b0ec5132-26ff-4970-86f9-140567f4e3d1",
          "name": "reddit_open_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/1LDBacY8BC2qJaZh.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -80,
            140
          ],
          "id": "154aba08-1747-47eb-8f14-0e7cd3c64ad3",
          "name": "fetch_reddit_open_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            140,
            140
          ],
          "id": "c345b0cd-bb31-43fc-ba8d-30f494fbc146",
          "name": "split_reddit_open_ai_items"
        },
        {
          "parameters": {
            "operation": "get",
            "subreddit": "OpenAI",
            "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
          },
          "type": "n8n-nodes-base.reddit",
          "typeVersion": 1,
          "position": [
            360,
            140
          ],
          "id": "22729727-bc57-4daf-aa89-fe7705f063be",
          "name": "get_reddit_open_ai_items",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "9743b6e1-a915-4a5c-b133-1e94d68e060d",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  }
                },
                {
                  "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "exists",
                    "singleValue": true
                  }
                },
                {
                  "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notEmpty",
                    "singleValue": true
                  }
                },
                {
                  "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "reddit.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtube.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtu.be",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "x.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "github.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "3edaa177-9a40-41de-bcc2-fe248a777626",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "i.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "13ab666b-fcbf-4798-b3f6-f74079b8f6fa",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "v.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            580,
            140
          ],
          "id": "a71fb92a-0c2e-4eb0-8d9b-22ded8d07792",
          "name": "filter_reddit_open_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/1LDBacY8BC2qJaZh.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            140
          ],
          "id": "d9e5c5c1-82bc-4b92-9189-3fc5cb88f3f4",
          "name": "normalize_reddit_open_ai_items"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -300,
            -60
          ],
          "id": "b6d968b8-3d39-4538-91f8-57119033cb0d",
          "name": "reddit_artificial_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/upLgfm9lv7RXwzes.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -80,
            -60
          ],
          "id": "50f2f646-6e7a-4e95-a5a9-f72af6d9087f",
          "name": "fetch_reddit_artificial_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            140,
            -60
          ],
          "id": "38a2111b-0632-4979-8cb6-1932dd9a5aa6",
          "name": "split_reddit_artificial_items"
        },
        {
          "parameters": {
            "operation": "get",
            "subreddit": "artificial",
            "postId": "={{ $json.url.match(/comments\\/([^/]+)/)[1] }}"
          },
          "type": "n8n-nodes-base.reddit",
          "typeVersion": 1,
          "position": [
            360,
            -60
          ],
          "id": "9cabb4a9-5f0f-463b-8ca4-69fe93568fe5",
          "name": "get_reddit_artificial_items",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "0c525d94-7ad5-49ef-b5cd-f149992e85cd",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  }
                },
                {
                  "id": "7e9f6852-ccf6-488e-8019-899aaa1ef6ff",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "exists",
                    "singleValue": true
                  }
                },
                {
                  "id": "79bc5622-4063-48a8-835b-8b45746a7f2e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notEmpty",
                    "singleValue": true
                  }
                },
                {
                  "id": "1a4ca682-edac-47b1-8e84-dbaa3f79a819",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "reddit.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "f29b29c7-d183-450a-b9e6-b02635a2dead",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtube.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "ab07ea23-fe91-4669-8417-396fe65765bf",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "youtu.be",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "eb92ce45-bdb8-4e8e-bf6b-d3d27a3d9108",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "x.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "6f51a62d-08ca-4ef4-abf1-cb29f8b3734e",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "github.com",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "3edaa177-9a40-41de-bcc2-fe248a777626",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "i.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                },
                {
                  "id": "13ab666b-fcbf-4798-b3f6-f74079b8f6fa",
                  "leftValue": "={{ $json.url_overridden_by_dest }}",
                  "rightValue": "v.redd.it",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            580,
            -60
          ],
          "id": "5f3a87a3-4d96-4848-96dd-08867cae5096",
          "name": "filter_reddit_artificial_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "// Use a regex to extract the hostname.\n// The regex breakdown:\n// ^(?:https?:\\/\\/)?  --> Optionally match the protocol (http:// or https://)\n// (?:www\\.)?         --> Optionally match \"www.\"\n// ([^\\/]+)           --> Capture all characters until the first \"/\" (the hostname)\nconst match = $input.item.json.url.match(/^(?:https?:\\/\\/)?(?:www\\.)?([^\\/]+)/i);\n\nif (!match) {\n  throw new Error(\"Unable to regex match url\")\n}\n\nconst domain = match[1];\nconst sourceName = domain\n  .replace(/^www\\./, '')\n  .replace(/\\.[^.]+$/, '') // removes the TLD\n  .replace(/\\./g, '-');\n\nif (!sourceName) {\n    throw new Error(`Unknown source detected: ${domain}`);\n}\n\nreturn {\n  sourceName: sourceName,\n  title: $input.item.json.title,\n  link: $input.item.json.url,\n  pubDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  isoDate: new Date($input.item.json.created_utc * 1000).toISOString(),\n  feedType: \"subreddit\",\n  feedUrl: \"https://rss.app/feeds/v1.1/upLgfm9lv7RXwzes.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            -60
          ],
          "id": "117da8c7-65d2-4340-b443-04c58f183a7b",
          "name": "normalize_reddit_artificial_items"
        },
        {
          "parameters": {
            "content": "## Web Content",
            "height": 3960,
            "width": 5380,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -860,
            -640
          ],
          "typeVersion": 1,
          "id": "74471f37-3e99-42df-95e6-39431198294a",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            1540
          ],
          "id": "f404855d-4133-4f66-a320-cd89aa90d9f4",
          "name": "blog_meta_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/zqVI3dZrdbmZjbR8.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            1540
          ],
          "id": "820224ef-019a-452d-97d6-42974772358a",
          "name": "fetch_blog_meta_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            1540
          ],
          "id": "01e78e6b-f788-4e6f-8724-231e04c724d0",
          "name": "split_blog_meta_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-meta\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/zqVI3dZrdbmZjbR8.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            1540
          ],
          "id": "5367577d-3e70-4029-95ad-bdf887b4dbfc",
          "name": "normalize_blog_meta_ai_articles"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            1340
          ],
          "id": "0ec334a5-ce3e-4978-945d-4e0e1b318857",
          "name": "blog_cloudflare_ai_trigger"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            1340
          ],
          "id": "a39eb0a4-303d-4c5c-85d0-62df11ad9c48",
          "name": "split_blog_cloudflare_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-cloudflare\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/iLzlJfBHVV0phe2n.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            1340
          ],
          "id": "889c7c45-25b9-42d1-97e8-4aa479553c75",
          "name": "normalize_blog_cloudflare_ai_articles"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            1140
          ],
          "id": "79a7e36e-30a3-4a87-9a27-2982f56a1e02",
          "name": "blog_anthropic_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/iLzlJfBHVV0phe2n.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            1340
          ],
          "id": "9da7f138-dcf7-472c-bdc2-9c3cfde18e41",
          "name": "fetch_blog_cloudflare_ai_feed"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/OFdSUsziElw0rkpx.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            1140
          ],
          "id": "1fc84178-caa0-4c2c-9587-338c668a6d70",
          "name": "fetch_blog_anthropic_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            1140
          ],
          "id": "93b757a8-ebce-4d36-8153-aad888ba1151",
          "name": "split_blog_anthropic_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-anthropic\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/OFdSUsziElw0rkpx.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            1140
          ],
          "id": "c258f4e5-7c3a-4fdf-8727-729c02d718bd",
          "name": "normalize_blog_anthropic_ai_articles"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            940
          ],
          "id": "60591c14-e351-4c4c-8db8-9e94ff49b2cd",
          "name": "blog_google_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/2CtvCsOtZS35jJgp.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            940
          ],
          "id": "8aa3ab7b-bafd-4786-9e37-dedccead8978",
          "name": "fetch_blog_google_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            940
          ],
          "id": "9be490b6-afb8-41a9-843b-e05e10ff2f43",
          "name": "split_blog_google_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-google\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/2CtvCsOtZS35jJgp.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            940
          ],
          "id": "3512e2e3-47d6-4929-8604-669dac56a529",
          "name": "normalize_blog_google_ai_articles"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            740
          ],
          "id": "ccb46891-5ecb-4230-a381-3d948f41dd76",
          "name": "blog_open_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/6BnoYYEtnCHXfHj0.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            740
          ],
          "id": "555004d0-3c3c-4789-b579-85a454f5cc5e",
          "name": "fetch_blog_open_ai_feed"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-open-ai\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/6BnoYYEtnCHXfHj0.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            740
          ],
          "id": "0ecbae88-a192-4920-8712-c0eac7b21a4b",
          "name": "normalize_blog_open_ai_articles"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            740
          ],
          "id": "36a509d3-067c-42a8-ae8c-dfea3db950c1",
          "name": "split_blog_open_ai_items"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            140,
            540
          ],
          "id": "ab6865e3-660f-441c-b7e0-606ed6ef352c",
          "name": "blog_nvidia_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/rXJrh1u8zDwJLUJK.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            360,
            540
          ],
          "id": "5595e0d1-6a1b-4dd8-b8b5-c81695b17cdd",
          "name": "fetch_blog_nvidia_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            580,
            540
          ],
          "id": "a4d52693-f5f2-4b64-a6fa-816f6945fa36",
          "name": "split_blog_nvidia_ai_items"
        },
        {
          "parameters": {
            "mode": "runOnceForEachItem",
            "jsCode": "return {\n  sourceName: \"blog-nvidia-ai\",\n  title: $input.item.json.title,\n  creator: $input.item.json.authors[0]?.name,\n  link: $input.item.json.url,\n  pubDate: $input.item.json.date_published,\n  isoDate: $input.item.json.date_published,\n  feedType: \"article\",\n  feedUrl: \"https://rss.app/feeds/v1.1/rXJrh1u8zDwJLUJK.json\"\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            800,
            540
          ],
          "id": "7c20280f-be66-4632-9736-fb2a4d4771f0",
          "name": "normalize_blog_nvidia_ai_articles"
        },
        {
          "parameters": {
            "amount": 180
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1680,
            1540
          ],
          "id": "5cfe1fc8-5b82-4b62-8232-41941e691f4a",
          "name": "delay",
          "webhookId": "ea003ac0-5583-4e8d-812a-c9dd73c09cf4"
        }
      ],
      "connections": {
        "the_neuron_trigger": {
          "main": [
            [
              {
                "node": "normalize_neuron",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "futurepedia_trigger": {
          "main": [
            [
              {
                "node": "normalize_futurepedia",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "superhuman_trigger": {
          "main": [
            [
              {
                "node": "normalize_superhuman",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "scrape_url": {
          "main": [
            [
              {
                "node": "filter_scrape_errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "evaluate_content": {
          "main": [
            [
              {
                "node": "ensure_revelant",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_neuron": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_futurepedia": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_superhuman": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "the_rundown_ai_trigger": {
          "main": [
            [
              {
                "node": "normalize_the_rundown_ai",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_the_rundown_ai": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "taaft_trigger": {
          "main": [
            [
              {
                "node": "normalize_taaft",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_taaft": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "bens_bites_trigger": {
          "main": [
            [
              {
                "node": "normalize_bens_bites",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_bens_bites": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "upload_temp_markdown": {
          "main": [
            [
              {
                "node": "copy_markdown",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "upload_temp_html": {
          "main": [
            [
              {
                "node": "copy_html",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "copy_html": {
          "main": [
            [
              {
                "node": "delete_temp_html",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "copy_markdown": {
          "main": [
            [
              {
                "node": "delete_temp_markdown",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "google_news_trigger": {
          "main": [
            [
              {
                "node": "fetch_google_news_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_google_news_feed": {
          "main": [
            [
              {
                "node": "split_google_news_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_identity": {
          "main": [
            [
              {
                "node": "search_existing_resource",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_google_news_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "search_existing_resource": {
          "main": [
            [
              {
                "node": "skip_existing_resources",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "skip_existing_resources": {
          "main": [
            [
              {
                "node": "delay",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "hacker_news_trigger": {
          "main": [
            [
              {
                "node": "fetch_hacker_news_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_google_news_items": {
          "main": [
            [
              {
                "node": "normalize_google_news_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_hacker_news_feed": {
          "main": [
            [
              {
                "node": "split_hacker_news_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "ensure_revelant": {
          "main": [
            [
              {
                "node": "try_extract_external_sources",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "is_revelant_content_parser": {
          "ai_outputParser": [
            [
              {
                "node": "evaluate_content",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "split_hacker_news_items": {
          "main": [
            [
              {
                "node": "normalize_hacker_news_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_hacker_news_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "try_extract_external_sources": {
          "main": [
            [
              {
                "node": "upload_temp_markdown",
                "type": "main",
                "index": 0
              },
              {
                "node": "upload_temp_html",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "o3-mini": {
          "ai_languageModel": [
            [
              {
                "node": "try_extract_external_sources",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "evaluate_content",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "fetch_reddit_artificial_inteligence_feed": {
          "main": [
            [
              {
                "node": "split_reddit_artificial_inteligence_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_reddit_artificial_inteligence_items": {
          "main": [
            [
              {
                "node": "get_reddit_artificial_inteligence_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_reddit_artificial_inteligence_items": {
          "main": [
            [
              {
                "node": "filter_reddit_artificial_inteligence_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_reddit_artificial_inteligence_items": {
          "main": [
            [
              {
                "node": "normalize_reddit_artificial_inteligence_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_scrape_errors": {
          "main": [
            [
              {
                "node": "evaluate_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_reddit_artificial_inteligence_items": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "reddit_artificial_inteligence_trigger": {
          "main": [
            [
              {
                "node": "fetch_reddit_artificial_inteligence_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "reddit_open_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_reddit_open_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_reddit_open_ai_feed": {
          "main": [
            [
              {
                "node": "split_reddit_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_reddit_open_ai_items": {
          "main": [
            [
              {
                "node": "get_reddit_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_reddit_open_ai_items": {
          "main": [
            [
              {
                "node": "filter_reddit_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_reddit_open_ai_items": {
          "main": [
            [
              {
                "node": "normalize_reddit_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_reddit_open_ai_items": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "reddit_artificial_trigger": {
          "main": [
            [
              {
                "node": "fetch_reddit_artificial_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_reddit_artificial_feed": {
          "main": [
            [
              {
                "node": "split_reddit_artificial_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_reddit_artificial_items": {
          "main": [
            [
              {
                "node": "get_reddit_artificial_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_reddit_artificial_items": {
          "main": [
            [
              {
                "node": "filter_reddit_artificial_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_reddit_artificial_items": {
          "main": [
            [
              {
                "node": "normalize_reddit_artificial_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_reddit_artificial_items": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_meta_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_meta_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_meta_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_meta_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_meta_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_meta_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_meta_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_cloudflare_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_cloudflare_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_cloudflare_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_cloudflare_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_cloudflare_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_anthropic_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_anthropic_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_cloudflare_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_cloudflare_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_anthropic_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_anthropic_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_anthropic_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_anthropic_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_anthropic_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_google_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_google_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_google_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_google_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_google_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_google_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_google_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_open_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_open_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_open_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_open_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_open_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_open_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_nvidia_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_nvidia_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_nvidia_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_nvidia_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_nvidia_ai_items": {
          "main": [
            [
              {
                "node": "normalize_blog_nvidia_ai_articles",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "normalize_blog_nvidia_ai_articles": {
          "main": [
            [
              {
                "node": "get_identity",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "delay": {
          "main": [
            [
              {
                "node": "scrape_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "cb34758a-8e83-41fe-9dfd-e112631382f9",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-08T05:14:45.848Z",
      "updatedAt": "2025-06-08T18:28:27.175Z",
      "id": "hzDpHbgqt2SD7pEg",
      "name": "Projects Agent",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hello! 👋 I'm your AI Assistant Router.\n\n## 🤖 Available Specialized Agents:\n🔬 **Research Agent** - Deep analysis, citations, fact-checking\n💻 **Code Agent** - Programming, debugging, technical solutions\n✍️ **Writing Agent** - Content creation, editing, storytelling\n📊 **Business Agent** - Strategy, analysis, productivity\n🎨 **Creative Agent** - Art concepts, brainstorming, innovation\n📚 **Education Agent** - Learning, explanations, tutoring\n\n## 🎯 How to Use:\n\n**Option 1 - Let me choose automatically:**\nJust ask your question naturally, and I'll route it to the best agent.\n\n**Option 2 - Choose an agent manually:**\n- `@research What are the latest AI developments?`\n- `@code Help me debug this Python function`\n- `@writing Create a blog post about productivity`\n- `@business Analyze our market strategy`\n- `@creative Brainstorm campaign ideas`\n- `@education Explain quantum physics simply`\n\n**Alternative manual formats:**\n- `contact research agent: your question`\n- `use code agent for: your question`\n\nWhat can I help you with today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "66a6f78f-0a5b-4cac-85f7-d3ef4aa58dd8",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            -820,
            -40
          ],
          "webhookId": "specialized-ai-router",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"agent_type\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\"research\", \"code\", \"writing\", \"business\", \"creative\", \"education\", \"general\"]\n\t\t},\n\t\t\"prompt\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"reasoning\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
          },
          "id": "2ace1747-fced-46a3-8d4b-50d66381ad41",
          "name": "Agent Selector Parser",
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "position": [
            -320,
            120
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "content": "## 🎯 Specialized AI Agent Router\n\nThis workflow intelligently routes user queries to specialized AI agents based on the query's purpose and domain:\n\n**Available Agents:**\n- 🔬 Research Agent (facts, analysis, citations)\n- 💻 Code Agent (programming, debugging)\n- ✍️ Writing Agent (content, editing)\n- 📊 Business Agent (strategy, productivity)\n- 🎨 Creative Agent (brainstorming, art)\n- 📚 Education Agent (learning, tutoring)\n\nEach agent has specialized prompts, tools, and capabilities for optimal results.",
            "height": 220,
            "width": 900
          },
          "id": "52704f1f-0f70-487c-9d0c-29bf4a2fb124",
          "name": "Workflow Description",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -520,
            -320
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "hasOutputParser": true,
            "options": {
              "systemMessage": "You are an **AI Agent Router** that handles both automatic routing and manual agent selection.\n\n## Available Specialized Agents:\n\n1. **research** - For factual research, data analysis, citations, academic queries, fact-checking\n2. **code** - For programming, debugging, technical documentation, software development\n3. **writing** - For content creation, editing, storytelling, copywriting, creative writing\n4. **business** - For business strategy, productivity, project management, market analysis\n5. **creative** - For brainstorming, art concepts, design thinking, innovation\n6. **education** - For learning, explanations, tutoring, curriculum development\n7. **general** - For simple queries that don't require specialization\n\n## Manual Agent Selection:\n\nCheck if the user is manually selecting an agent using these patterns:\n- \"@research [question]\"\n- \"@code [question]\"\n- \"@writing [question]\"\n- \"@business [question]\"\n- \"@creative [question]\"\n- \"@education [question]\"\n- \"@general [question]\"\n\nOR:\n- \"contact research agent: [question]\"\n- \"contact code agent: [question]\"\n- \"contact writing agent: [question]\"\n- \"contact business agent: [question]\"\n- \"contact creative agent: [question]\"\n- \"contact education agent: [question]\"\n- \"contact general agent: [question]\"\n\nOR:\n- \"use research agent for [question]\"\n- \"use code agent for [question]\"\n- \"use writing agent for [question]\"\n- \"use business agent for [question]\"\n- \"use creative agent for [question]\"\n- \"use education agent for [question]\"\n- \"use general agent for [question]\"\n\n## Processing Logic:\n\n1. **Manual Selection**: If user explicitly mentions an agent, extract the agent name and the actual question\n2. **Automatic Selection**: If no agent is specified, analyze the query and select the most appropriate agent\n\n## Automatic Analysis Criteria:\n\n**Research Agent** - Use when:\n- User asks for facts, statistics, or current information\n- Needs citations or sources\n- Requests analysis of data or trends\n- Academic or scientific queries\n\n**Code Agent** - Use when:\n- User asks about programming languages\n- Needs debugging help or code review\n- Requests technical documentation\n- Software architecture questions\n\n**Writing Agent** - Use when:\n- User needs content creation (articles, blogs, stories)\n- Requests editing or proofreading\n- Creative writing projects\n- Marketing copy or communications\n\n**Business Agent** - Use when:\n- User asks about business strategy\n- Needs productivity or workflow advice\n- Market analysis or competitive research\n- Project management guidance\n\n**Creative Agent** - Use when:\n- User needs brainstorming or ideation\n- Art or design concept development\n- Innovation or creative problem-solving\n- Visual or artistic projects\n\n**Education Agent** - Use when:\n- User needs learning assistance\n- Requests explanations of concepts\n- Tutoring or homework help\n- Curriculum or lesson planning\n\n## Output Format:\n\nRespond ONLY with a JSON object:\n\n```json\n{\n  \"agent_type\": \"selected_agent_name\",\n  \"prompt\": \"cleaned user query without agent selection syntax\",\n  \"reasoning\": \"brief explanation of selection (manual or automatic)\"\n}\n```"
            }
          },
          "id": "10ae9130-60a4-44c0-98ce-1b8591eddb86",
          "name": "AI Agent Router",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -540,
            -40
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {
              "maxTokensToSample": 1024
            }
          },
          "id": "c00b0af2-0b5a-4b51-b1c3-6339779c8b3b",
          "name": "Router LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -600,
            120
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "",
                        "rightValue": "",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                }
              ]
            },
            "options": {}
          },
          "id": "53cae9b1-2f02-4338-aded-a4676e689086",
          "name": "Agent Switch",
          "type": "n8n-nodes-base.switch",
          "position": [
            -100,
            -40
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Research Specialist AI** with expertise in:\n\n🔬 **Core Capabilities:**\n- Factual research and verification\n- Data analysis and interpretation\n- Academic and scientific inquiry\n- Source citation and references\n- Trend analysis and insights\n\n📋 **Research Protocols:**\n- Always verify information through multiple sources when possible\n- Provide citations and references where available\n- Distinguish between facts, opinions, and speculation\n- Use web search for current information when needed\n- Present findings in structured, analytical format\n\n🎯 **Specialized Tools:**\n- Web search for current data\n- Calculator for statistical analysis\n- Think tool for complex reasoning\n\n**Instructions:** Provide thorough, well-researched responses with proper attribution and evidence-based conclusions."
            }
          },
          "id": "aa88b4da-9594-4956-92be-02c7570e4a86",
          "name": "🔬 Research Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            500,
            -40
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Code Specialist AI** with expertise in:\n\n💻 **Programming Capabilities:**\n- Multi-language programming (Python, JavaScript, Java, C++, etc.)\n- Code debugging and optimization\n- Software architecture and design patterns\n- API development and integration\n- Database design and queries\n\n🛠️ **Development Focus:**\n- Write clean, efficient, well-documented code\n- Provide step-by-step debugging guidance\n- Explain complex technical concepts clearly\n- Follow industry best practices and standards\n- Offer multiple solution approaches when applicable\n\n🎯 **Code Standards:**\n- Include proper error handling\n- Add meaningful comments and documentation\n- Consider security and performance implications\n- Provide testing suggestions when relevant\n\n**Instructions:** Deliver practical, production-ready code solutions with clear explanations and best practices."
            }
          },
          "id": "1597092a-f77d-43bb-b90d-91cb1f22603d",
          "name": "💻 Code Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            340
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Writing Specialist AI** with expertise in:\n\n✍️ **Writing Capabilities:**\n- Content creation (articles, blogs, copy)\n- Creative writing (stories, scripts, poetry)\n- Technical writing and documentation\n- Editing and proofreading\n- Communication and messaging\n\n📝 **Writing Standards:**\n- Adapt tone and style to target audience\n- Ensure clarity, coherence, and engagement\n- Follow proper grammar and style guidelines\n- Structure content for maximum impact\n- Optimize for specific platforms when needed\n\n🎨 **Creative Approach:**\n- Develop compelling narratives and storylines\n- Create memorable characters and dialogue\n- Use literary devices effectively\n- Balance creativity with purpose\n- Consider emotional impact and reader experience\n\n**Instructions:** Create compelling, well-structured content that engages the target audience and achieves the intended purpose."
            }
          },
          "id": "06930839-c968-4321-afd4-ec201e6c80ce",
          "name": "✍️ Writing Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            540
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Business Specialist AI** with expertise in:\n\n📊 **Business Capabilities:**\n- Strategic planning and analysis\n- Market research and competitive analysis\n- Productivity and workflow optimization\n- Project management and operations\n- Financial analysis and budgeting\n\n💼 **Business Focus:**\n- Provide actionable business insights\n- Consider ROI and business impact\n- Suggest practical implementation steps\n- Analyze risks and opportunities\n- Align solutions with business objectives\n\n🎯 **Strategic Approach:**\n- Think holistically about business challenges\n- Consider stakeholder perspectives\n- Provide data-driven recommendations\n- Account for resource constraints\n- Focus on measurable outcomes\n\n**Instructions:** Deliver strategic, practical business advice that drives results and creates value for the organization."
            }
          },
          "id": "3f9b2916-3831-45b8-bab2-b804b99ffe03",
          "name": "📊 Business Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            740
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Creative Specialist AI** with expertise in:\n\n🎨 **Creative Capabilities:**\n- Brainstorming and ideation\n- Design thinking and innovation\n- Art and visual concepts\n- Creative problem-solving\n- Brand and identity development\n\n💡 **Creative Process:**\n- Generate diverse, original ideas\n- Think outside conventional boundaries\n- Combine concepts in novel ways\n- Consider aesthetic and emotional impact\n- Iterate and refine creative concepts\n\n🌟 **Innovation Focus:**\n- Challenge assumptions and norms\n- Explore unconventional approaches\n- Balance creativity with feasibility\n- Consider user experience and engagement\n- Inspire and motivate through creativity\n\n**Instructions:** Generate innovative, inspiring creative solutions that push boundaries while remaining practical and purposeful."
            }
          },
          "id": "f048fa43-72cc-425c-920d-402f6e96a6c1",
          "name": "🎨 Creative Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            940
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are an **Education Specialist AI** with expertise in:\n\n📚 **Educational Capabilities:**\n- Learning and skill development\n- Concept explanation and clarification\n- Curriculum design and lesson planning\n- Assessment and feedback\n- Personalized learning approaches\n\n🎓 **Teaching Methods:**\n- Adapt explanations to learning level\n- Use examples and analogies effectively\n- Break complex topics into digestible parts\n- Encourage active learning and engagement\n- Provide practice opportunities and feedback\n\n🌱 **Learning Focus:**\n- Foster understanding over memorization\n- Build connections between concepts\n- Encourage critical thinking skills\n- Support different learning styles\n- Promote lifelong learning habits\n\n**Instructions:** Provide clear, engaging educational content that promotes deep understanding and effective learning outcomes."
            }
          },
          "id": "2c44c9a2-52db-44f0-b85b-99b48529955d",
          "name": "📚 Education Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            1160
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **General Purpose AI Assistant** designed to handle diverse queries with:\n\n🤖 **General Capabilities:**\n- Comprehensive knowledge across domains\n- Balanced approach to problem-solving\n- Clear and helpful communication\n- Adaptable to various contexts\n\n**Instructions:** Provide helpful, accurate responses while maintaining a friendly and professional tone."
            }
          },
          "id": "c10b8a6a-6ad9-4bb9-9470-e03df046c21a",
          "name": "🤖 General Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -860,
            1360
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {}
          },
          "id": "b42ef627-6f52-4037-8424-3a3151f74107",
          "name": "Agent LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            300,
            140
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionIdType": "customKey",
            "sessionKey": "={{ $('When chat message received').item.json.sessionId }}"
          },
          "id": "05a72036-3a91-4bf5-9959-20ffcc80b07a",
          "name": "Conversation Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "position": [
            300,
            320
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {},
          "id": "f48eb115-c655-4245-b3c1-de5ea411a576",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            300,
            540
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "41e8fdc3-d0aa-4e63-8ad2-287944ecd594",
          "name": "Calculator",
          "type": "@n8n/n8n-nodes-langchain.toolCalculator",
          "position": [
            300,
            720
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "toolDescription": "Search the web for current information and facts",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"model\": \"claude-3-5-sonnet-20241022\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_query}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}",
            "options": {}
          },
          "id": "f91312a8-f907-4afa-9810-211788b65781",
          "name": "Web Search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            300,
            920
          ],
          "typeVersion": 4.2
        }
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent Selector Parser": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent Router": {
          "main": [
            [
              {
                "node": "Agent Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Router LLM": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Agent Switch": {
          "main": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent LLM": {
          "ai_languageModel": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Conversation Memory": {
          "ai_memory": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_memory",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calculator": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Web Search": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "b6baefbc-0ad3-4fe6-ba6b-cf09f0d59a08",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-05T22:59:24.209Z",
      "updatedAt": "2025-06-08T04:27:06.281Z",
      "id": "Q6jitHjFMTl2xpq6",
      "name": "PDF Summary 1",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -3400,
            780
          ],
          "id": "1311badc-70c3-4ea2-be46-d40a29623a92",
          "name": "On form submission",
          "webhookId": "f766ed71-52de-4747-bf1e-2020cbe40928"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -3180,
            860
          ],
          "id": "f81f5801-3488-4d7f-bc46-297ee344ed20",
          "name": "Extract from File",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2740,
            780
          ],
          "id": "01dd1a31-52c3-4620-b180-ef3a9f9c9c5c",
          "name": "Text Processing & Setup"
        },
        {
          "parameters": {
            "url": "={{ $json.urls[0] }}",
            "options": {
              "response": {
                "response": {
                  "neverError": true,
                  "responseFormat": "file",
                  "outputPropertyName": "coverImage"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1860,
            780
          ],
          "id": "16c56d04-55d4-45e7-8eb6-6917364f1bd2",
          "name": "Download Cover Image"
        },
        {
          "parameters": {
            "jsCode": "// Get the original text data from the Check Cover Extraction node\nconst originalData = $input.first().json;\nconst imageData = $input.last().binary?.coverImage;\n\nreturn [{\n  json: {\n    text: originalData.text,\n    hasCoverImage: !!imageData,\n    coverImageName: imageData ? 'cover-page.png' : null\n  },\n  binary: imageData ? {\n    coverImage: imageData\n  } : {}\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1640,
            620
          ],
          "id": "8759933e-d11e-4e9f-bbe4-3d478b44a9d2",
          "name": "Combine Text & Image"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -1420,
            520
          ],
          "id": "a1c35ffd-7bee-42d4-a617-b7f957cf9c8f",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1060,
            620
          ],
          "id": "2a77417a-46b5-40d6-afb9-111492757484",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-opus-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Opus 4"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -1360,
            740
          ],
          "id": "dea73bdc-1a15-40a2-8d47-72dfb3aed774",
          "name": "Anthropic Chat Model",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/file/upload/base64",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBearerAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "=bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{$json}}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2300,
            780
          ],
          "id": "8429e8bc-a2dd-417b-986e-2c47e7573b8d",
          "name": "Upload PDF to PDF.co1",
          "credentials": {
            "httpBearerAuth": {
              "id": "K1q8u1aqz0KKzpwN",
              "name": "Bearer Auth account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/pdf/convert/to/png",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"pages\": \"\",\n  \"inline\": true,\n  \"async\": false\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2080,
            780
          ],
          "id": "e8d37dfc-e33e-4b27-a206-3821eb4d53b6",
          "name": "PDF to PNG conversion"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -2960,
            780
          ],
          "id": "e4dd01a2-4ca5-4886-b8d0-eb4558afdc8f",
          "name": "Merge"
        },
        {
          "parameters": {
            "jsCode": "const binaryData = $input.first().binary.data;\nconst fileName = binaryData.fileName || 'document.pdf';\nconst buffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst fileBase64 = buffer.toString('base64');\nreturn [{\n  json: {\n    file: `data:application/pdf;base64,${fileBase64}`,\n    name: fileName\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2520,
            780
          ],
          "id": "8ec84946-5471-4b78-9e33-0d66e2713fe6",
          "name": "Code"
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "=ban/pdf_summary/{{ $json.coverImageFileName }}",
            "binaryPropertyName": "coverImage",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -1360,
            920
          ],
          "id": "09a11766-7ce3-4ec9-b677-0de1a8831ca3",
          "name": "AWS S3",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -840,
            780
          ],
          "id": "b38655bc-f57e-4416-bfe1-06b8783054a6",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fileName =\n  input.binary &&\n  input.binary.coverImage &&\n  input.binary.coverImage.fileName\n    ? input.binary.coverImage.fileName\n    : 'default.png';\n\nreturn [{\n  json: {\n    ...input.json,\n    coverImageFileName: fileName\n  },\n  binary: input.binary\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1640,
            920
          ],
          "id": "d0df7639-f378-4d0f-9714-d43cf708589c",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst key = input.json.Key || 'default.png'; // S3 node outputs the file path in \"Key\"\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${key}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1060,
            920
          ],
          "id": "ef699ec5-a1a4-4b43-8577-3f761f4d44ae",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "type": "=paragraph",
                  "textContent": "=={{ $json.block1 }}"
                },
                {
                  "type": "=paragraph",
                  "textContent": "=={{ $json.block2 }}"
                },
                {
                  "richText": "={{ false }}",
                  "textContent": "=={{ $json.block3 }}"
                },
                {
                  "type": "=paragraph",
                  "richText": "={{ false }}",
                  "textContent": "={{ $json.s3Url }}"
                },
                {
                  "textContent": "={\n  \"type\": \"image\",\n  \"image\": {\n    \"type\": \"external\",\n    \"external\": {\n      \"url\": \"{{ $json.s3Url }}\"\n    }\n  }\n}\n"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -580,
            40
          ],
          "id": "4e77f9aa-1d26-4159-982c-16e3ecb38a87",
          "name": "Notion_good",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -500,
            760
          ],
          "id": "cfc35036-10f1-46c6-9bac-863c5574c413",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text Processing & Setup": {
          "main": [
            [
              {
                "node": "Code",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Cover Image": {
          "main": [
            [
              {
                "node": "Combine Text & Image",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine Text & Image": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Upload PDF to PDF.co1": {
          "main": [
            [
              {
                "node": "PDF to PNG conversion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDF to PNG conversion": {
          "main": [
            [
              {
                "node": "Download Cover Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Text Processing & Setup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code": {
          "main": [
            [
              {
                "node": "Upload PDF to PDF.co1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "AWS S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "27346832-ec11-460d-8926-ef815200efe7",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T15:00:51.725Z",
      "updatedAt": "2025-06-12T15:03:40.578Z",
      "id": "0yMtmGcVMHrdIZdf",
      "name": "My workflow 5",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "minutes"
                },
                {}
              ]
            }
          },
          "id": "ca645038-3992-4902-ad57-6dcd832679c6",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -560,
            300
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "operation": "subtractFromDate",
            "magnitude": "={{ $now }}",
            "duration": 30,
            "options": {}
          },
          "id": "d38630dc-d3b5-44c0-af8e-39651b83ad4c",
          "name": "PURGE DAYS",
          "type": "n8n-nodes-base.dateTime",
          "position": [
            -160,
            580
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "operation": "delete",
            "path": "={{ $json.pathDisplay }}"
          },
          "id": "c84c13a1-dec4-4261-a121-1f50e0d75a77",
          "name": "DELETE OLD BACKUPS",
          "type": "n8n-nodes-base.dropbox",
          "position": [
            520,
            580
          ],
          "typeVersion": 1,
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "content": "MOVE CURRENT BACKUPS TO OLD FOLDER",
            "height": 223.80675203725258,
            "width": 932.4394074276975
          },
          "id": "8a0056d0-33ff-4eb4-954c-e2ca489e0b5d",
          "name": "Sticky Note",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -200,
            60
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "BACKUP ALL CURRENT WORKFLOWS",
            "height": 185.32013969732247,
            "width": 931.4765002625034
          },
          "id": "0410bb36-8f7b-4f83-af1a-a786b42bf698",
          "name": "Sticky Note1",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -200,
            320
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "PURGE BACKUPS OLDER THEN 30 DAYS\n",
            "height": 203.55064027939466,
            "width": 932.4394074276973
          },
          "id": "d6acef71-bf69-4f18-89b3-97d784742b65",
          "name": "Sticky Note2",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -240,
            520
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "mode": "jsonToBinary",
            "options": {
              "fileName": "={{ $('HTTP Request').item.json.name }}"
            }
          },
          "id": "eaa58950-bcec-41a0-aa44-98933ae64c23",
          "name": "MAKE JSON FILES",
          "type": "n8n-nodes-base.moveBinaryData",
          "position": [
            340,
            340
          ],
          "notesInFlow": true,
          "typeVersion": 1
        },
        {
          "parameters": {
            "path": "={{ $('DESTINATION FOLDER').last().json.folder }}{{ $('HTTP Request').item.json.name }}.json",
            "binaryData": true
          },
          "id": "0afeb076-8c21-4200-b844-368060d616cf",
          "name": "UPLOAD WORKFLOWS",
          "type": "n8n-nodes-base.dropbox",
          "position": [
            560,
            340
          ],
          "notesInFlow": true,
          "typeVersion": 1,
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "fields": {
              "values": [
                {
                  "name": "folder",
                  "stringValue": "/n8n_backups/"
                }
              ]
            },
            "include": "none",
            "options": {}
          },
          "id": "5e5893b3-8ce6-4fb2-88d0-ff16e5c996e6",
          "name": "DESTINATION FOLDER",
          "type": "n8n-nodes-base.set",
          "position": [
            -340,
            300
          ],
          "notesInFlow": true,
          "typeVersion": 3.2
        },
        {
          "parameters": {
            "mode": "chooseBranch",
            "output": "input2"
          },
          "id": "99a4e7a1-8a59-40d1-acbe-2c59569df3d9",
          "name": "WAIT FOR MOVE TO FINISH",
          "type": "n8n-nodes-base.merge",
          "position": [
            -120,
            340
          ],
          "typeVersion": 2.1
        },
        {
          "parameters": {
            "resource": "folder",
            "operation": "list",
            "path": "={{ $('DESTINATION FOLDER').last().json.folder }}",
            "limit": 250,
            "filters": {}
          },
          "id": "203ddd7b-132d-4111-8916-4a089eca99e4",
          "name": "GET CURRENT BACKUPS",
          "type": "n8n-nodes-base.dropbox",
          "position": [
            120,
            140
          ],
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 1
              },
              "conditions": [
                {
                  "id": "a13e9fd6-ef31-4e23-bde6-955ffab5849b",
                  "operator": {
                    "type": "string",
                    "operation": "notEquals"
                  },
                  "leftValue": "={{ $json.type }}",
                  "rightValue": "folder"
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "id": "5ed3599e-ac5e-4997-8a6d-fd067e3cdd92",
          "name": "IGNORE FOLDERS",
          "type": "n8n-nodes-base.filter",
          "position": [
            340,
            140
          ],
          "typeVersion": 2,
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "operation": "move",
            "path": "={{ $json.pathDisplay }}",
            "toPath": "={{ $('DESTINATION FOLDER').last().json.folder }}old/{{ $json.name }}_{{ $('GET CURRENT DATE').last().json.formattedDate }}.json"
          },
          "id": "5907f280-0aa5-43e9-95f6-91515b1dc37b",
          "name": "MOVE INTO OLD FOLDER",
          "type": "n8n-nodes-base.dropbox",
          "position": [
            560,
            140
          ],
          "executeOnce": false,
          "notesInFlow": true,
          "retryOnFail": false,
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "resource": "folder",
            "operation": "list",
            "path": "={{ $('DESTINATION FOLDER').last().json.folder }}old",
            "limit": 500,
            "filters": {}
          },
          "id": "2c04bb45-c97c-4e30-b972-51d987c9ba2f",
          "name": "LIST OLD BACKUPS",
          "type": "n8n-nodes-base.dropbox",
          "position": [
            80,
            580
          ],
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "leftValue": "",
                "caseSensitive": true,
                "typeValidation": "strict"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "e0aa83a7-a65b-4008-9010-bf4f14c0c398",
                  "operator": {
                    "type": "dateTime",
                    "operation": "before"
                  },
                  "leftValue": "={{ $json.lastModifiedServer }}",
                  "rightValue": "={{ $('PURGE DAYS').item.json.newDate }}"
                }
              ]
            },
            "options": {}
          },
          "id": "351d2986-7e3e-4684-97f4-376eb0e2029a",
          "name": "CHECK DATES",
          "type": "n8n-nodes-base.if",
          "position": [
            300,
            580
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "operation": "formatDate",
            "date": "={{ $now }}",
            "format": "=yyyy-MM-dd_HHmm",
            "options": {}
          },
          "id": "73cbacfa-9530-4c11-8b39-360bbf061452",
          "name": "GET CURRENT DATE",
          "type": "n8n-nodes-base.dateTime",
          "position": [
            -120,
            140
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "url": "https://primary-production-a00b4.up.railway.app/api/v1/workflows",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            120,
            340
          ],
          "id": "04867201-6545-44ec-8932-025f0d67abad",
          "name": "HTTP Request",
          "credentials": {
            "httpHeaderAuth": {
              "id": "tEIZVxbqmyosk2tI",
              "name": "Header Auth account 2"
            }
          }
        }
      ],
      "connections": {
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "DESTINATION FOLDER",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PURGE DAYS": {
          "main": [
            [
              {
                "node": "LIST OLD BACKUPS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MAKE JSON FILES": {
          "main": [
            [
              {
                "node": "UPLOAD WORKFLOWS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "DESTINATION FOLDER": {
          "main": [
            [
              {
                "node": "GET CURRENT DATE",
                "type": "main",
                "index": 0
              },
              {
                "node": "WAIT FOR MOVE TO FINISH",
                "type": "main",
                "index": 1
              },
              {
                "node": "PURGE DAYS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "WAIT FOR MOVE TO FINISH": {
          "main": [
            [
              {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "GET CURRENT BACKUPS": {
          "main": [
            [
              {
                "node": "IGNORE FOLDERS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "IGNORE FOLDERS": {
          "main": [
            [
              {
                "node": "MOVE INTO OLD FOLDER",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MOVE INTO OLD FOLDER": {
          "main": [
            [
              {
                "node": "WAIT FOR MOVE TO FINISH",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "LIST OLD BACKUPS": {
          "main": [
            [
              {
                "node": "CHECK DATES",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "CHECK DATES": {
          "main": [
            [
              {
                "node": "DELETE OLD BACKUPS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "GET CURRENT DATE": {
          "main": [
            [
              {
                "node": "GET CURRENT BACKUPS",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request": {
          "main": [
            [
              {
                "node": "MAKE JSON FILES",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "9598ec7e-3c40-469a-bb08-576ac8bf8017",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:30:25.525Z",
      "updatedAt": "2025-06-12T19:30:25.525Z",
      "id": "G0XIxqbrZSioe8p4",
      "name": "ai_scraping_pipeline",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -100,
            280
          ],
          "id": "0f7a20d9-6604-464c-814b-58c901acf3fe",
          "name": "google_news_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            120,
            280
          ],
          "id": "3869ada3-c233-4955-af97-894bbd13f0a1",
          "name": "fetch_google_news_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            340,
            280
          ],
          "id": "dfca5c16-3d56-46b0-9de1-296b21860fd2",
          "name": "split_google_news_items"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -100,
            20
          ],
          "id": "571fd898-8aad-4c6f-bc4b-30f90c33fbd1",
          "name": "blog_open_ai_trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/xNVg2hbY14Z7Gpva.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            120,
            20
          ],
          "id": "7655a00f-63c3-4485-90f4-5e5617603d0d",
          "name": "fetch_blog_open_ai_feed"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            340,
            20
          ],
          "id": "f2a11fcc-b331-4c35-8a78-16c83494797b",
          "name": "split_blog_open_ai_items"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.firecrawl.dev/v1/scrape",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"formats\": [\"json\", \"markdown\", \"rawHtml\", \"links\"],\n  \"excludeTags\": [\"iframe\", \"nav\", \"header\", \"footer\"],\n  \"onlyMainContent\": true,\n  \"jsonOptions\": {\n    \"prompt\": \"Identify the main content of the text (i.e., the article or newsletter body). Provide the exact text for that main content verbatim, without summarizing or rewriting any part of it. Exclude all non-essential elements such as banners, headers, footers, calls to action, ads, or purely navigational text. Format this output as markdown using appropriate '#' characters as heading levels. Exclude any promotional or sponsored content on your output.\",\n    \"schema\": {\n      \"type\": \"string\",\n      \"description\": \"The exact verbatim main text content of the web page in markdown format.\"\n    }\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            640,
            280
          ],
          "id": "fdf087bc-44ea-4126-b80a-c9306f0d9b47",
          "name": "scrape_url",
          "retryOnFail": true,
          "maxTries": 3,
          "waitBetweenTries": 5000,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "name": "={{ $binary.data.fileName }}",
            "driveId": {
              "__rl": true,
              "value": "My Drive",
              "mode": "list",
              "cachedResultName": "My Drive",
              "cachedResultUrl": "https://drive.google.com/drive/my-drive"
            },
            "folderId": {
              "__rl": true,
              "value": "13_W8MvFeaIdGNdkX8lSNV-zVFraoG6j6",
              "mode": "list",
              "cachedResultName": "News Scraper Automation",
              "cachedResultUrl": "https://drive.google.com/drive/folders/13_W8MvFeaIdGNdkX8lSNV-zVFraoG6j6"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            1120,
            280
          ],
          "id": "f116c59d-fce7-49a6-976c-f5f1254319d1",
          "name": "upload_markdown",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "operation": "toText",
            "sourceProperty": "data.markdown",
            "options": {
              "fileName": "=news_story_{{ $itemIndex + 1 }}.md"
            }
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            880,
            280
          ],
          "id": "72a1beb5-5630-4c64-adc1-3c1863d712b6",
          "name": "create_markdown_file",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -100,
            560
          ],
          "id": "5f67747e-6d4b-4641-9833-ce1f58a4add9",
          "name": "Schedule Trigger"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/sgHcE2ehHQMTWhrL.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            120,
            560
          ],
          "id": "a97fae07-d63e-4261-b58a-d96825244e0c",
          "name": "HTTP Request"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            340,
            560
          ],
          "id": "5875f210-8ee3-471a-80d2-e212e61fd2c1",
          "name": "Split Out"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -620,
            180
          ],
          "id": "31c0821e-a4e0-4a87-a7a1-f0b17809b9cd",
          "name": "google_news_trigger1"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/AkOariu1C7YyUUMv.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -400,
            180
          ],
          "id": "48b38e3b-9470-49e8-a250-11e7b0adb2e7",
          "name": "fetch_google_news_feed1"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            -180,
            180
          ],
          "id": "906eeae3-8e76-4783-be2c-bf6e6e3170e8",
          "name": "split_google_news_items1"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 4
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -620,
            -80
          ],
          "id": "477e6246-52f0-459d-aa28-58a956a95793",
          "name": "blog_open_ai_trigger1"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/xNVg2hbY14Z7Gpva.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -400,
            -80
          ],
          "id": "cdb85580-2a67-458b-9d1f-7d8df3447ef1",
          "name": "fetch_blog_open_ai_feed1"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            -180,
            -80
          ],
          "id": "7c5f0e1a-4159-4f6f-849c-80e4760470c8",
          "name": "split_blog_open_ai_items1"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.firecrawl.dev/v1/scrape",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"formats\": [\"json\", \"markdown\", \"rawHtml\", \"links\"],\n  \"excludeTags\": [\"iframe\", \"nav\", \"header\", \"footer\"],\n  \"onlyMainContent\": true,\n  \"jsonOptions\": {\n    \"prompt\": \"Identify the main content of the text (i.e., the article or newsletter body). Provide the exact text for that main content verbatim, without summarizing or rewriting any part of it. Exclude all non-essential elements such as banners, headers, footers, calls to action, ads, or purely navigational text. Format this output as markdown using appropriate '#' characters as heading levels. Exclude any promotional or sponsored content on your output.\",\n    \"schema\": {\n      \"type\": \"string\",\n      \"description\": \"The exact verbatim main text content of the web page in markdown format.\"\n    }\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            120,
            180
          ],
          "id": "b68a4355-3f33-4858-ab5d-fdf4031b17c5",
          "name": "scrape_url1",
          "retryOnFail": true,
          "maxTries": 3,
          "waitBetweenTries": 5000,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "name": "={{ $binary.data.fileName }}",
            "driveId": {
              "__rl": true,
              "value": "My Drive",
              "mode": "list",
              "cachedResultName": "My Drive",
              "cachedResultUrl": "https://drive.google.com/drive/my-drive"
            },
            "folderId": {
              "__rl": true,
              "value": "13_W8MvFeaIdGNdkX8lSNV-zVFraoG6j6",
              "mode": "list",
              "cachedResultName": "News Scraper Automation",
              "cachedResultUrl": "https://drive.google.com/drive/folders/13_W8MvFeaIdGNdkX8lSNV-zVFraoG6j6"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            600,
            180
          ],
          "id": "0a4eb405-bcc0-4f26-8c8e-a31157f61c8b",
          "name": "upload_markdown1",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "operation": "toText",
            "sourceProperty": "data.markdown",
            "options": {
              "fileName": "=news_story_{{ $itemIndex + 1 }}.md"
            }
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            360,
            180
          ],
          "id": "6343a815-c540-49c8-8ebe-c564234ff33d",
          "name": "create_markdown_file1",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 3
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -620,
            460
          ],
          "id": "5d9b1c74-b06d-4602-bcd4-7b8a12931b29",
          "name": "Schedule Trigger1"
        },
        {
          "parameters": {
            "url": "https://rss.app/feeds/v1.1/sgHcE2ehHQMTWhrL.json",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -400,
            460
          ],
          "id": "e6674296-e9a3-4811-8ffc-78b37dd0c023",
          "name": "HTTP Request1"
        },
        {
          "parameters": {
            "fieldToSplitOut": "items",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            -180,
            460
          ],
          "id": "66d167d4-2aff-4c14-8a19-bf502fff9a9e",
          "name": "Split Out1"
        }
      ],
      "connections": {
        "google_news_trigger": {
          "main": [
            [
              {
                "node": "fetch_google_news_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_google_news_feed": {
          "main": [
            [
              {
                "node": "split_google_news_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_google_news_items": {
          "main": [
            [
              {
                "node": "scrape_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_open_ai_trigger": {
          "main": [
            [
              {
                "node": "fetch_blog_open_ai_feed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_open_ai_feed": {
          "main": [
            [
              {
                "node": "split_blog_open_ai_items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_open_ai_items": {
          "main": [
            [
              {
                "node": "scrape_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "scrape_url": {
          "main": [
            [
              {
                "node": "create_markdown_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "create_markdown_file": {
          "main": [
            [
              {
                "node": "upload_markdown",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request": {
          "main": [
            [
              {
                "node": "Split Out",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Out": {
          "main": [
            [
              {
                "node": "scrape_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "google_news_trigger1": {
          "main": [
            [
              {
                "node": "fetch_google_news_feed1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_google_news_feed1": {
          "main": [
            [
              {
                "node": "split_google_news_items1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_google_news_items1": {
          "main": [
            [
              {
                "node": "scrape_url1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "blog_open_ai_trigger1": {
          "main": [
            [
              {
                "node": "fetch_blog_open_ai_feed1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_blog_open_ai_feed1": {
          "main": [
            [
              {
                "node": "split_blog_open_ai_items1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_blog_open_ai_items1": {
          "main": [
            [
              {
                "node": "scrape_url1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "scrape_url1": {
          "main": [
            [
              {
                "node": "create_markdown_file1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "create_markdown_file1": {
          "main": [
            [
              {
                "node": "upload_markdown1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger1": {
          "main": [
            [
              {
                "node": "HTTP Request1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request1": {
          "main": [
            [
              {
                "node": "Split Out1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Out1": {
          "main": [
            [
              {
                "node": "scrape_url1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "0fab8c0b-beef-40e2-b4ea-d6ec20896bb6",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-13T13:47:33.814Z",
      "updatedAt": "2025-06-13T14:35:18.236Z",
      "id": "Dqsp8D7z4riWNcCU",
      "name": "Github backup",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "rule": {
              "interval": [
                {}
              ]
            }
          },
          "id": "465fdf62-04e8-4be7-9824-d9204ac61ac5",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -280,
            140
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "fieldsToAggregate": {
              "fieldToAggregate": [
                {
                  "fieldToAggregate": "name"
                }
              ]
            },
            "options": {}
          },
          "id": "4a86aea4-9179-4011-90a1-74abd1fc3ff9",
          "name": "Aggregate",
          "type": "n8n-nodes-base.aggregate",
          "position": [
            160,
            140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "list",
            "owner": {
              "__rl": true,
              "value": "zumbador",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n_backup",
              "mode": "list",
              "cachedResultName": "n8n_backup",
              "cachedResultUrl": "https://github.com/zumbador/n8n_backup"
            },
            "filePath": "="
          },
          "id": "8962a266-aa74-4349-8f9e-e76b794136ea",
          "name": "List files from repo",
          "type": "n8n-nodes-base.github",
          "position": [
            -60,
            140
          ],
          "webhookId": "354d699e-44b0-4444-9d31-af7fd4ff5561",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "value": "zumbador",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n_backup",
              "mode": "list",
              "cachedResultName": "n8n_backup",
              "cachedResultUrl": "https://github.com/zumbador/n8n_backup"
            },
            "filePath": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json",
            "fileContent": "={{ $('To base64').item.json.data }}",
            "commitMessage": "=backup-{{ $('Commit date & file name').item.json.commitDate }}"
          },
          "id": "426f4f93-6754-44ed-a745-6e53a0dd1c8f",
          "name": "Update file",
          "type": "n8n-nodes-base.github",
          "position": [
            1480,
            40
          ],
          "webhookId": "27218087-8df7-474d-a39f-70cfa9c34ec8",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "value": "zumbador",
              "mode": "name"
            },
            "repository": {
              "__rl": true,
              "value": "n8n_backup",
              "mode": "list",
              "cachedResultName": "n8n_backup",
              "cachedResultUrl": "https://github.com/zumbador/n8n_backup"
            },
            "filePath": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json",
            "fileContent": "={{ $('To base64').item.json.data }}",
            "commitMessage": "=backup-{{ $node['Commit date & file name'].json.commitDate }}"
          },
          "id": "0dd3cc7c-7dc3-408a-b0b5-4e7f0379a8e7",
          "name": "Upload file",
          "type": "n8n-nodes-base.github",
          "position": [
            1480,
            240
          ],
          "webhookId": "ce4b561b-acb9-4cd8-b76f-4928dada9674",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "string": [
                {
                  "value1": "={{ $('Aggregate').item.json.name }}",
                  "operation": "contains",
                  "value2": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json"
                }
              ]
            }
          },
          "id": "a8d61d77-2ffe-4eb2-a628-3ee1dc4672f5",
          "name": "Check if file exists",
          "type": "n8n-nodes-base.if",
          "position": [
            1260,
            140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "operation": "toJson",
            "mode": "each",
            "options": {
              "format": true
            }
          },
          "id": "c9f97c6f-db98-4fbe-86e9-fd63fa79e976",
          "name": "Json file",
          "type": "n8n-nodes-base.convertToFile",
          "position": [
            600,
            140
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "operation": "binaryToPropery",
            "options": {}
          },
          "id": "c13d387d-5abe-4ed8-85e0-f6d103f1e3e5",
          "name": "To base64",
          "type": "n8n-nodes-base.extractFromFile",
          "position": [
            820,
            140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "### Retrieve previous file names from Github",
            "height": 380,
            "width": 300,
            "color": 5
          },
          "id": "08364894-1ed0-4ba7-812e-d556892f91e0",
          "name": "Sticky Note1",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -50,
            -80
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "fe4a36ef-9f04-40e3-99bd-cc517a49b440",
                  "name": "commitDate",
                  "type": "string",
                  "value": "={{ $now.format('dd-MM-yyyy/H:mm') }}"
                },
                {
                  "id": "b0fe1bcc-e79c-4a6b-b8b4-44222c8bf4e8",
                  "name": "fileName",
                  "type": "string",
                  "value": "={{ $('Retrieve workflows').item.json.name.replace(/\\s+/g, '-').toLowerCase() }}-{{ $('Retrieve workflows').item.json.tags[0].name }}.json"
                }
              ]
            },
            "options": {}
          },
          "id": "a43dff6d-e820-4ca0-a808-e367f35cfb72",
          "name": "Commit date & file name",
          "type": "n8n-nodes-base.set",
          "position": [
            1040,
            140
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "content": "### Retrieve and process workflows from n8n",
            "height": 380,
            "width": 460,
            "color": 3
          },
          "id": "11bfae89-f594-41ff-be96-f0ee28bb7515",
          "name": "Sticky Note2",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            420,
            -80
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "### Commit + edit/create files if needed",
            "height": 380,
            "width": 460,
            "color": 4
          },
          "id": "73ab047e-5641-4b66-aa06-c56aba94a680",
          "name": "Sticky Note3",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            1080,
            -80
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "url": "=https://primary-production-a00b4.up.railway.app/api/v1/workflows",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "n8nApi",
            "options": {}
          },
          "id": "b6d33b7c-ebc9-4d7e-a4b1-fd57f8af9dde",
          "name": "Retrieve workflows",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            400,
            140
          ],
          "typeVersion": 4.2,
          "credentials": {
            "n8nApi": {
              "id": "5XHOo0XHlTPF4J0g",
              "name": "n8n account"
            }
          }
        }
      ],
      "connections": {
        "Aggregate": {
          "main": [
            [
              {
                "node": "Retrieve workflows",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Json file": {
          "main": [
            [
              {
                "node": "To base64",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "To base64": {
          "main": [
            [
              {
                "node": "Commit date & file name",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "List files from repo",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check if file exists": {
          "main": [
            [
              {
                "node": "Update file",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Upload file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "List files from repo": {
          "main": [
            [
              {
                "node": "Aggregate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Commit date & file name": {
          "main": [
            [
              {
                "node": "Check if file exists",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Retrieve workflows": {
          "main": [
            [
              {
                "node": "Json file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "7ac09445-dcfd-4fe2-ba5d-c6cce40857bc",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T23:53:29.919Z",
      "updatedAt": "2025-06-12T23:55:43.144Z",
      "id": "fAMFYTdbSYpp4gTd",
      "name": "My workflow 6",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                  "name": "Done",
                  "type": "boolean",
                  "value": true
                }
              ]
            },
            "options": {}
          },
          "id": "71b05df8-e4ed-4c90-9111-b35feb8cf446",
          "name": "Return",
          "type": "n8n-nodes-base.set",
          "position": [
            -1380,
            780
          ],
          "typeVersion": 3.3
        },
        {
          "parameters": {
            "url": "={{ $json.download_url }}",
            "options": {}
          },
          "id": "a2c8e021-fe61-4837-ac76-15f6447377a6",
          "name": "Get File",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            -2700,
            630
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "version": 1,
                "leftValue": "",
                "caseSensitive": true,
                "typeValidation": "strict"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                  "operator": {
                    "type": "string",
                    "operation": "empty",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.content }}",
                  "rightValue": ""
                },
                {
                  "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.error }}",
                  "rightValue": ""
                }
              ]
            },
            "options": {}
          },
          "id": "935852b1-7512-4d5d-a8ab-fbaccecbfc41",
          "name": "If file too large",
          "type": "n8n-nodes-base.if",
          "position": [
            -2920,
            705
          ],
          "typeVersion": 2
        },
        {
          "parameters": {},
          "id": "fd6fd5d3-5e23-434e-96e1-445e0091b252",
          "name": "Merge Items",
          "type": "n8n-nodes-base.merge",
          "position": [
            -2480,
            780
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
          },
          "id": "b14db6b7-1e74-48a4-bbab-cedf6dce6a53",
          "name": "isDiffOrNew",
          "type": "n8n-nodes-base.code",
          "position": [
            -2260,
            780
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.github_status}}",
            "rules": {
              "rules": [
                {
                  "value2": "same"
                },
                {
                  "value2": "different",
                  "output": 1
                },
                {
                  "value2": "new",
                  "output": 2
                }
              ]
            }
          },
          "id": "a73d19fc-f063-4b1c-9011-41785dc7ac27",
          "name": "Check Status",
          "type": "n8n-nodes-base.switch",
          "position": [
            -2040,
            759
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "57ff4136-c2e8-4c10-81a7-9a54c04ec88a",
          "name": "Same file - Do nothing",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -1600,
            580
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "63e388a8-15ac-45e2-8ebd-1d8c6f2b5658",
          "name": "File is different",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -1820,
            780
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "f46989fc-1ca1-45e0-84f9-98814804528f",
          "name": "File is new",
          "type": "n8n-nodes-base.noOp",
          "position": [
            -1820,
            980
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "8db330d2-89ee-4e20-93f4-9eb876ac5cfe",
          "name": "Create new file",
          "type": "n8n-nodes-base.github",
          "position": [
            -1600,
            980
          ],
          "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "f027308c-d39d-4808-9eb4-121024cdd8d4",
          "name": "Edit existing file",
          "type": "n8n-nodes-base.github",
          "position": [
            -1600,
            780
          ],
          "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "get",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.name }}"
            },
            "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
            "asBinaryProperty": false,
            "additionalParameters": {}
          },
          "id": "1a5ac1db-ebe3-41e9-83d3-2bf2172b97b7",
          "name": "Get file data",
          "type": "n8n-nodes-base.github",
          "position": [
            -3140,
            705
          ],
          "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "githubApi": {
              "id": "LBtQD0iKjRkQ4STc",
              "name": "GitHub backup"
            }
          },
          "continueOnFail": true
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
                  "name": "repo.owner",
                  "type": "string",
                  "value": "john-doe"
                },
                {
                  "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
                  "name": "repo.name",
                  "type": "string",
                  "value": "n8n-backup"
                },
                {
                  "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
                  "name": "repo.path",
                  "type": "string",
                  "value": "workflows/"
                }
              ]
            },
            "options": {}
          },
          "id": "0651d0d3-2184-4711-81f7-bdb24d7c7f46",
          "name": "Globals",
          "type": "n8n-nodes-base.set",
          "position": [
            -3360,
            705
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "inputSource": "passthrough"
          },
          "id": "020df89a-8d66-4c6e-bc69-66c4c51352dc",
          "name": "Execute Workflow Trigger",
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "position": [
            -3580,
            780
          ],
          "typeVersion": 1.1
        }
      ],
      "connections": {
        "Get File": {
          "main": [
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If file too large": {
          "main": [
            [
              {
                "node": "Get File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Items": {
          "main": [
            [
              {
                "node": "isDiffOrNew",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "isDiffOrNew": {
          "main": [
            [
              {
                "node": "Check Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Status": {
          "main": [
            [
              {
                "node": "Same file - Do nothing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is different",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is new",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Same file - Do nothing": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is different": {
          "main": [
            [
              {
                "node": "Edit existing file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is new": {
          "main": [
            [
              {
                "node": "Create new file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create new file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit existing file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get file data": {
          "main": [
            [
              {
                "node": "If file too large",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Globals": {
          "main": [
            [
              {
                "node": "Get file data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow Trigger": {
          "main": [
            [
              {
                "node": "Globals",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge Items",
                "type": "main",
                "index": 1
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "b6739d64-310f-4c53-a35a-c8eb766fcfb1",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:24:36.907Z",
      "updatedAt": "2025-06-12T19:24:36.907Z",
      "id": "hg1ArFmfIBakg1MF",
      "name": "Firecrawl Scrape Url Sub-Workflow",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "workflowInputs": {
              "values": [
                {
                  "name": "url"
                }
              ]
            }
          },
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "typeVersion": 1.1,
          "position": [
            -240,
            -80
          ],
          "id": "38a346d6-497a-46ea-8d9d-cec2ad018fa1",
          "name": "workflow_trigger"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.firecrawl.dev/v1/scrape",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"formats\": [\"json\", \"markdown\", \"rawHtml\", \"links\"],\n  \"excludeTags\": [\"iframe\", \"nav\", \"header\", \"footer\"],\n  \"onlyMainContent\": true,\n  \"jsonOptions\": {\n    \"prompt\": \"Identify the main content of the text (i.e., the article or newsletter body). Provide the exact text for that main content verbatim, without summarizing or rewriting any part of it. Exclude all non-essential elements such as banners, headers, footers, calls to action, ads, or purely navigational text. Format this output as markdown using appropriate '#' characters as heading levels. Exclude any promotional or sponsored content on your output. Additionally, you must identify and extract the image urls within this main content. These images must be inside the main content of the page so you must exclude small logo images, icons, avatars and other images which aren't a core part of the main content. The images you extract should at least have a width of 600 pixels (px) so it can be included on our content.\",\n    \"schema\": {\n    \"type\": \"object\",\n      \"properties\": {\n        \"content\": {\n          \"type\": \"string\",\n          \"description\": \"The exact verbatim main text content of the web page in markdown format.\"\n        },\n        \"main_content_image_urls\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"description\": \"An image url that appears within the main content of the web page. This image must be inside the main content of the page so you must exclude small logo images, icons, avatars and other images which aren't a core part of the main content. The image should be at least 600px in width.\"\n          },\n          \"description\": \"An array of the exact image urls that appear within the main content of the web page. Extra images such as icons and images not relevant to the main content MUST be excluded.\"\n        }\n      },\n      \"required\": [\"content\", \"main_content_image_urls\"]\n    }\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            140,
            -80
          ],
          "id": "59f74fd2-8982-477c-bc60-178fcb30f23c",
          "name": "scrape_url",
          "retryOnFail": true,
          "maxTries": 3,
          "waitBetweenTries": 5000,
          "onError": "continueRegularOutput"
        }
      ],
      "connections": {
        "workflow_trigger": {
          "main": [
            [
              {
                "node": "scrape_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {
        "workflow_trigger": [
          {
            "json": {
              "url": "https://techcrunch.com/2025/04/22/ex-meta-engineer-raises-14m-for-lace-an-ai-powered-revenue-generation-software-startup/"
            }
          }
        ]
      },
      "versionId": "838f8d38-4f29-4c8a-88ed-f8415cc13636",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-06T20:34:55.413Z",
      "updatedAt": "2025-06-08T04:27:32.766Z",
      "id": "ijoXxbyMFMgI3ezJ",
      "name": "My workflow 2 import",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -2820,
            -680
          ],
          "id": "14bfdb83-64bf-4b0b-8444-3568906cc7da",
          "name": "On form submission",
          "webhookId": "f766ed71-52de-4747-bf1e-2020cbe40928"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -2600,
            -600
          ],
          "id": "d377ea23-0884-4c28-b152-601ccc202238",
          "name": "Extract from File",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2160,
            -680
          ],
          "id": "2772a6e4-efdc-4ec4-997f-56bd4a21818d",
          "name": "Text Processing & Setup"
        },
        {
          "parameters": {
            "url": "={{ $json.urls[0] }}",
            "options": {
              "response": {
                "response": {
                  "neverError": true,
                  "responseFormat": "file",
                  "outputPropertyName": "coverImage"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1280,
            -680
          ],
          "id": "13f145b6-8aab-41ff-978a-6e1a3e762828",
          "name": "Download Cover Image"
        },
        {
          "parameters": {
            "jsCode": "// Get the original text data from the Check Cover Extraction node\nconst originalData = $input.first().json;\nconst imageData = $input.last().binary?.coverImage;\n\nreturn [{\n  json: {\n    text: originalData.text,\n    hasCoverImage: !!imageData,\n    coverImageName: imageData ? 'cover-page.png' : null\n  },\n  binary: imageData ? {\n    coverImage: imageData\n  } : {}\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1060,
            -840
          ],
          "id": "8d2961b9-6941-4b8d-a012-5e448160c2f4",
          "name": "Combine Text & Image"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -840,
            -940
          ],
          "id": "ec8b019a-1b0d-421e-99a5-da4dfa6939d7",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -460,
            -840
          ],
          "id": "9cfaa144-571a-4a03-89fc-6f28f922103d",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-opus-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Opus 4"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -760,
            -720
          ],
          "id": "d5d9d1bc-1aed-4d8a-af2f-982bf6d7ff15",
          "name": "Anthropic Chat Model",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/file/upload/base64",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBearerAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "=bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{$json}}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1720,
            -680
          ],
          "id": "567326ef-ee80-436f-88ba-eced663f1e04",
          "name": "Upload PDF to PDF.co1",
          "credentials": {
            "httpBearerAuth": {
              "id": "K1q8u1aqz0KKzpwN",
              "name": "Bearer Auth account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/pdf/convert/to/png",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"pages\": \"\",\n  \"inline\": true,\n  \"async\": false\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1500,
            -680
          ],
          "id": "fc651f12-4478-437f-a982-ad6bba6b4517",
          "name": "PDF to PNG conversion"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -2380,
            -680
          ],
          "id": "df24b4b4-843f-4aa6-8e46-e2c1a652a74f",
          "name": "Merge"
        },
        {
          "parameters": {
            "jsCode": "const binaryData = $input.first().binary.data;\nconst fileName = binaryData.fileName || 'document.pdf';\nconst buffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst fileBase64 = buffer.toString('base64');\nreturn [{\n  json: {\n    file: `data:application/pdf;base64,${fileBase64}`,\n    name: fileName\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1940,
            -680
          ],
          "id": "dcc07a90-17df-43c3-b51b-ebbe5ca9279c",
          "name": "Code"
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "=ban/pdf_summary/{{ $json.coverImageFileName }}",
            "binaryPropertyName": "coverImage",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -760,
            -540
          ],
          "id": "ee6952c4-dbbd-4686-8159-1d4d31164381",
          "name": "AWS S3",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -240,
            -680
          ],
          "id": "7cd83e8e-489d-49ad-8df5-da104e2fb4fe",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fileName =\n  input.binary &&\n  input.binary.coverImage &&\n  input.binary.coverImage.fileName\n    ? input.binary.coverImage.fileName\n    : 'default.png';\n\nreturn [{\n  json: {\n    ...input.json,\n    coverImageFileName: fileName\n  },\n  binary: input.binary\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1060,
            -540
          ],
          "id": "e0bac6ac-33d2-44b6-8152-1b4acfa83a5f",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst key = input.json.Key || 'default.png'; // S3 node outputs the file path in \"Key\"\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${key}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -460,
            -540
          ],
          "id": "95337cd3-d53f-405a-8896-e2d5cf4347d7",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "type": "=paragraph",
                  "textContent": "=={{ $json.block1 }}"
                },
                {
                  "type": "=paragraph",
                  "textContent": "=={{ $json.block2 }}"
                },
                {
                  "richText": "={{ false }}",
                  "textContent": "=={{ $json.block3 }}"
                },
                {
                  "type": "=paragraph",
                  "richText": "={{ false }}",
                  "textContent": "={{ $json.s3Url }}"
                },
                {
                  "textContent": "={\n  \"type\": \"image\",\n  \"image\": {\n    \"type\": \"external\",\n    \"external\": {\n      \"url\": \"{{ $json.s3Url }}\"\n    }\n  }\n}\n"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            0,
            -1420
          ],
          "id": "f2754422-64ca-4b49-83d3-7b979c246e89",
          "name": "Notion_good",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            80,
            -700
          ],
          "id": "12d741bf-afad-4d89-8267-2b178c86e010",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text Processing & Setup": {
          "main": [
            [
              {
                "node": "Code",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Cover Image": {
          "main": [
            [
              {
                "node": "Combine Text & Image",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Combine Text & Image": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Upload PDF to PDF.co1": {
          "main": [
            [
              {
                "node": "PDF to PNG conversion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDF to PNG conversion": {
          "main": [
            [
              {
                "node": "Download Cover Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Text Processing & Setup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code": {
          "main": [
            [
              {
                "node": "Upload PDF to PDF.co1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "AWS S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "b77c1c64-9f82-4b99-8488-f5010cbda9e5",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:25:28.221Z",
      "updatedAt": "2025-06-12T19:27:52.224Z",
      "id": "ax3Hu8vbn9bBSpva",
      "name": "AI Newsletter Generator Workflow",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Retrive Data",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "Date",
                  "fieldType": "date",
                  "requiredField": true
                },
                {
                  "fieldLabel": "Previous Newsletter Content",
                  "placeholder": "Copy and paste the markdown content of the previous newsletter here. This is used to avoid duplicate coverage of stories."
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -400,
            340
          ],
          "id": "2c1e4894-3acd-4c8b-998b-2f77e9c8c2c2",
          "name": "form_trigger",
          "webhookId": "2a7def93-8055-4f04-8a5c-a8786d01a2fd"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "cb1ba2cf-90d6-4f99-bdf0-96bf8c9ce6c6",
                  "leftValue": "={{ $json.Key }}",
                  "rightValue": ".md",
                  "operator": {
                    "type": "string",
                    "operation": "endsWith"
                  }
                },
                {
                  "id": "f031d067-6edb-4938-b67d-0b55966b6fb7",
                  "leftValue": "",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            40,
            340
          ],
          "id": "5e9caed1-16f7-4c87-a52f-4bfe9a0bbdcc",
          "name": "filter_only_markdown"
        },
        {
          "parameters": {
            "content": "## 1. Retrieve Markdown Content\n",
            "height": 260,
            "width": 2620
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -560,
            240
          ],
          "typeVersion": 1,
          "id": "15ae2503-3e8e-443a-a2d5-4c1265a6ab11",
          "name": "Sticky Note"
        },
        {
          "parameters": {
            "content": "## Pick Top Stories",
            "height": 1300,
            "width": 1900,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            3696,
            -800
          ],
          "typeVersion": 1,
          "id": "4a17965f-578d-4d8c-9e14-090ab0f60c37",
          "name": "Sticky Note1"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "f986e5a7-3723-4a90-a61c-3d3008f0b022",
                  "leftValue": "={{ $('get_markdown_object_info').item.json.Metadata.type }}",
                  "rightValue": "newsletter",
                  "operator": {
                    "type": "string",
                    "operation": "notEquals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            480,
            340
          ],
          "id": "44e378f9-7ee1-4201-92d6-e6eb9207c92e",
          "name": "exclude_newsletters"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $('stories_prompt').item.json.select_top_stories_prompt }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are an AI assistant specialized in reading raw text about AI-related news, trends, and breakthroughs. Your objective is to determine which stories should be included in our AI Tools newsletter, based on their relevance, impact, and interest to a tech-savvy audience. You are also an expert at crafting subject lines for newsletter emails that leads to great open rates and keeps our readers interested."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            3780,
            340
          ],
          "id": "1acbbcaa-ad48-4c9c-bd7f-2e7eb3ed5126",
          "name": "pick_top_stories",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"top_selected_stories_chain_of_thought\": {\n      \"type\": \"string\",\n      \"description\": \"A detailed chain of thought explaining why you selected the top stories for our audience to feature in this newsletter. You must enumerate EVERY story you are considering and expand on why the story was either included or rejected from your final selections. It is critical that you provide reasoning on why stories are both included AND excluded. This should also include detailed reasoning why the other stories were excluded. You should detail at least 1-2 sentences on why each story was selected OR excluded. Each story analysis should include a CSV of the source identifiers that were analyzed and were read when making this decision. You must think deeply about the top story analysis and reference the provided guidelines for story importance. This will be shared in slack so please format this in slack's format so that it is easy for a slack user to read. You MUST use numbered lists that reference the source where it came from. Avoid regular bullets and use numbered lists. IF feedback was provided in the context of editing the top stories, include how you considered that feedback in your changes. It will be considered a failed task if you DO NOT providethe references to sources where stories came from and the detailed reasoning why that story was either included or excluded. You are expected to list out this reasoning and source material deatils for EVERY SINGLE STORY provided and evaluated. For each story in the (including the stories that were NOT selected), you are required to output the identifiers you evaluated for the story along with a detailed reason for why the story was included or excluded. You are NOT allowed to skip these details in your output for any story. In your output please include a section for the stories that were CLOSE to being selected but ultimately were not selected due to othedr stories being a better fit (format this as a bulleted list along with a summary of each story close to being selected along with reasoning why). Again, you are reminded that you MUST list out the content identifiers and provide a detailed explaination for all stories and provide reasoning on the selection choice. It is absolutely critical and required for you to include each of the content identifiers grouped together under each story. You may not skip this in your output.\"\n    },\n    \"top_selected_stories\": {\n      \"type\": \"array\",\n      \"description\": \"A list of four chosen stories (including the top/main story).\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"title\": {\n            \"type\": \"string\",\n            \"description\": \"A concise, catchy headline for this story section that follows the style of 'Axios' or 'The Rundown' segment headings. This MUST be compelling and interesting to our readers and target audience of AI enthusiasts so they are interested in reading the section about this story.\"\n          },\n          \"summary\": {\n            \"type\": \"string\",\n            \"description\": \"A brief summary or description of this story section. Please also include notes on what we can further write about / expand on for this story in our AI newsletter.\"\n          },\n          \"identifiers\": {\n            \"type\": \"array\",\n            \"description\": \"Array of relevant content piece IDs for this story.\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          },\n          \"external_source_links\": {\n            \"type\": \"array\",\n            \"description\": \"The top-level sources (press releases, official blog posts, etc.) drawn directly from the provided text. Only include links if they appear in the raw content provided or in the external-source-urls provided.\",\n            \"items\": {\n              \"type\": \"string\"\n            }\n          }\n        },\n        \"required\": [\n          \"title\",\n          \"summary\",\n          \"reason_for_selecting\",\n          \"identifiers\",\n          \"external_source_links\"\n        ]\n      }\n    }\n  },\n  \"required\": [\n    \"top_selected_stories_chain_of_thought\",\n    \"top_selected_stories\"\n  ]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            5900,
            560
          ],
          "id": "0a7be067-dbf5-441f-b5dc-567ec8c45e5d",
          "name": "top_stories_parser"
        },
        {
          "parameters": {
            "content": "## Iterate Over & Write Each Selected Story\n\n1. Resolve identifier for the story\n2. Load up 1-N story references\n3. Pass in writing guidelines\n4. Write headline and section",
            "height": 1300,
            "width": 4980,
            "color": 5
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            8174,
            295
          ],
          "typeVersion": 1,
          "id": "023eb100-40bc-48c1-aaa6-1ae5f2eea3fb",
          "name": "Sticky Note3",
          "disabled": true
        },
        {
          "parameters": {
            "fieldToSplitOut": "top_selected_stories",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            8576,
            1040
          ],
          "id": "50f5c35f-ba27-4f21-985f-339f7f67bce8",
          "name": "split_stories"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            8796,
            1040
          ],
          "id": "5f7a8da0-e78a-4ad3-8ff7-faad183eff6f",
          "name": "iterate_stories"
        },
        {
          "parameters": {
            "fieldToSplitOut": "current_story.identifiers",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            9236,
            1040
          ],
          "id": "4eea32d0-8844-40ba-b20f-3395f72a9a56",
          "name": "split_content_ids"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "c677aa22-37e5-4d3b-9b53-409fb3c74b81",
                  "leftValue": "={{ $node[\"set_current_segment\"].json.current_story.external_source_links }}",
                  "rightValue": "",
                  "operator": {
                    "type": "array",
                    "operation": "exists",
                    "singleValue": true
                  }
                },
                {
                  "id": "6f3cee68-49b0-4cb6-871e-4cb12a306b06",
                  "leftValue": "={{ $node[\"set_current_segment\"].json.current_story.external_source_links }}",
                  "rightValue": "",
                  "operator": {
                    "type": "array",
                    "operation": "notEmpty",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            10868,
            1040
          ],
          "id": "5a644e39-d5c7-4092-842a-a85e82a510df",
          "name": "check_external_urls"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "ba33265f-73f6-4561-9cf0-dcb2f0b52a78",
                  "name": "story_sections",
                  "value": "={{ $node[\"iterate_stories\"].json.story_segment.newsletter_section_content }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            9016,
            642.5
          ],
          "id": "5da57fba-8ebf-42e7-86a6-21a051d16fb9",
          "name": "set_story_segments"
        },
        {
          "parameters": {
            "url": "=https://api.aitools.inc/admin/files/info/data-ingestion/{{ $json['current_story.identifiers'] }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            9456,
            1040
          ],
          "id": "1174601b-5b66-4910-b0d2-1cbd07d7af51",
          "name": "get_segment_content_info",
          "alwaysOutputData": false,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "bucketName": "data-ingestion",
            "fileKey": "={{ $node[\"split_content_ids\"].json['current_story.identifiers'] }}"
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            9754,
            1040
          ],
          "id": "6b47f3a9-d3d9-465e-b3aa-29320bab9f50",
          "name": "download_segment_content",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "operation": "text",
            "binaryPropertyName": "=data",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            10130,
            1040
          ],
          "id": "d7e9f5f4-3eaf-4468-99d8-a234b1013405",
          "name": "get_segment_content_text"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d2054552-ac25-41e0-9f09-faa9cea840e6",
                  "name": "content_item",
                  "value": "=<{{ $node[\"split_content_ids\"].json['current_story.identifiers'] }}>\n---\nidentifier: {{ $node[\"split_content_ids\"].json['current_story.identifiers'] }}\nfriendlyType: {{ $node[\"get_segment_content_info\"].json.Metadata.type }}\nsourceName: {{ $node[\"get_segment_content_info\"].json.Metadata['source-name'] }}\nauthors: {{ $node[\"get_segment_content_info\"].json.Metadata.authors }}\nexternalSourceUrls: {{ $node[\"get_segment_content_info\"].json.Metadata[\"external-source-urls\"\n] }}\nimageUrls: {{ $node[\"get_segment_content_info\"].json.Metadata[\"image-urls\"\n] }}\n---\n\n{{ $('get_segment_content_text').item.json.data }}\n</{{ $node[\"split_content_ids\"].json['current_story.identifiers'] }}>",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            10428,
            1040
          ],
          "id": "a3558183-fa2c-43dc-962c-d933430d3519",
          "name": "prepare_segment_content_item"
        },
        {
          "parameters": {
            "fieldsToAggregate": {
              "fieldToAggregate": [
                {
                  "fieldToAggregate": "content_item"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            10648,
            1040
          ],
          "id": "9f2032ed-2093-4e6f-8f2a-2ed7e77e7f72",
          "name": "aggregate_segment_text_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "81a924a0-5bab-423a-a41a-4fe7a0345f68",
                  "name": "segment_external_source_links",
                  "value": "={{ $node[\"set_current_segment\"].json.current_story.external_source_links }}",
                  "type": "array"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            11088,
            941.25
          ],
          "id": "61d168b6-6676-4287-acf3-d635ecdc90d6",
          "name": "set_segment_external_source_links"
        },
        {
          "parameters": {
            "fieldToSplitOut": "=segment_external_source_links",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            11308,
            941.25
          ],
          "id": "fcc11f34-01cd-4e64-aa6f-51bfc84c9acb",
          "name": "split_segment_external_source_urls"
        },
        {
          "parameters": {
            "workflowId": {
              "__rl": true,
              "value": "qVEM2rCD1jlJPeRs",
              "mode": "list",
              "cachedResultName": "Data Ingestion — Node - Scrape Url"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {
                "url": "={{ $json.segment_external_source_links }}"
              },
              "matchingColumns": [
                "url"
              ],
              "schema": [
                {
                  "id": "url",
                  "displayName": "url",
                  "required": false,
                  "defaultMatch": false,
                  "display": true,
                  "canBeUsedToMatch": true,
                  "type": "string",
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": true
            },
            "options": {}
          },
          "type": "n8n-nodes-base.executeWorkflow",
          "typeVersion": 1.2,
          "position": [
            11528,
            941.25
          ],
          "id": "7f0ae20e-6cfe-4575-b8e2-2a191ff2a2dd",
          "name": "scrape_segment_external_source_url",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "fieldsToAggregate": {
              "fieldToAggregate": [
                {
                  "fieldToAggregate": "data"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            11968,
            941.25
          ],
          "id": "5ec39e36-38cf-479b-bd40-4477dd8c800e",
          "name": "aggregate_segment_external_source_content",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "ecd02ccb-0790-44ab-8bb0-246881e35a20",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": "",
                  "operator": {
                    "type": "object",
                    "operation": "notExists",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            11748,
            941.25
          ],
          "id": "28c36b11-862b-40e0-a7e4-b202f5c52beb",
          "name": "filter_segment_external_source_errors",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=## Task and Purpose\n\nCreate a single newsletter section focused on **AI developments, tools, and applications** that help professionals automate tasks, boost productivity, and stay on the cutting edge. You will be given details of a single section to write about and supporting source material. Use this to write this newsletter section.\n\nToday's date for the newsletter is *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}*.\n\n### Audience\n\n- **Tech-forward readers**—developers, entrepreneurs, AI enthusiasts, and early adopters.\n- Those looking for **new AI trends**, developments, and **real-world use cases** that can make their work more efficient.\n\n### Style Inspiration\n\n- **Axios-like** and **Rundown** approach with **short, punchy paragraphs**, clear headers, bullet points, and a **“Why it matters”** or **“Bottom line”** section.\n- **Enthusiastic, optimistic, forward-looking** voice that highlights AI’s future-shaping potential.\n\n### Additional Writing Guidelines\n\n- Place verbs directly after helping verbs like \"makes,\" \"allows,\" \"enables\"\n- Emphasize user actions rather than abstract processes\n- Use clear subject-verb-object structure whenever possible\n- Keep sentences concise and purposeful\n- Avoid unnecessary nominalization (turning verbs into nouns) and keep the language direct and dynamic.\n- Avoid technical jargon. Your writing should be easy to understand for non-technical readers.\n\nPlease use active verb constructions rather than noun phrases. For example:\n- WEAK: \"Intuitive interface that makes voiceover creation accessible to non-technical users\"\n- STRONG: \"Intuitive interface that makes creating voiceovers accessible to non-technical users\"\n\n### Section Struture\n\nFollow this structure when writing your newsletter segment:\n\n1. **The Recap:** (should be bolded)\n  - Provide a **quick summary and overview** of the topic.\n  - This should be a brief 1-2 sentences.\n  - Start this section with **The Recap:** followed by your 1-2 sentences.\n  - This is a good place to link to any annoucment or other external urls relevant to this content.\n\n2. **Unpacked:** (should be bolded)\n  - Expand on **additional details** and context around the story that provides our readers with value. This can be in the form of (but is not limited to) expanding on the important details of the story they would care about, connecting the story into the larger AI space and other recent developments, or take an approach that \"Axios\" and \"The Rundown AI\" newsletters take with their bullet points to help readers get the most useful information around he story in bullet point form. The goal here is to \"unpack\" the most useful details around the story in an easy to digest format for our readers. We are looking for added \"depth\" around this story.\n  - This should be formatted as a bulleted list where each bullet item is a single sentence that expands around the context of the story / source material.\n  - This should not be overly technical. It should be easy for an entry level AI enthusiast to understand. It must also be easy for someone new to AI who is looking to learn the basics to understand.\n  - You may ONLY write about information that is included in the provided source  materia, you may NOT make up or invent your own facts. The facts you output must exist on the provided sources materials and context.\n  - You should provide a total of 3 bullets. Each bullet you include MUST be very relevant to the story and provide the reader with necessary context. You must avoid adding bullets that are not useful to the reader. The number of bullets points to include is truly your choice. You should aim to \"unpack\" the story in 3 bullets.\n  - You must use the `-` character instead of a `*` for each bullet in this section.\n  - Use regular markdown bullet formatting for each of these bullets. Your output will be directly sent in an email to our readers so think carefully and make sure the formatting is correct. There MUST NOT be any extra spacing after the `-` character and the text content for this bullet, only the single space according to the markdown specification. Review this requirement carefully before you write your output.\n  - You may only include a maximum of 1 single link/hyperlink in each bullet you write. A link/hyperlink is not required, but you are allowed to include a maximum of 1 link so you must be sure the link you select is the best placement for it.\n  - You are NOT allowed to format links as bold in your output.\n  - You are allowed to **bold** a maximum of a single phrase (or single word) in the scope of each bullet. You may NOT bold multiple phrases withing the scope of a SINGLE bullet so pick the word or phrase that makes the most sense to bold if you choose to bold. It is truly optional to bold a word or phrase within the scope of a bullet. Don't 'force' bolding a word or phrase that doesn't make sense. The bolding should feel natural to the reader.\n\n3. **Bottom line:** (should be bolded)\n  - Offer a **short, final insight** into why this story matters or how it impacts the reader. This must be 2 sentences in length. Avoid repeating ideas or duplicating information withing this \"Bottom Line\" section.\n  - You must **AVOID** writing a phrase that include the word \"We're\" or \"We are\" in this \"Bottom Line\" section.\n  - You must avoid overly-flower language that is excessively descriptive. This sentences in this bottom line needs to still be easy to read while offering insight(s) to the reader. \n\n---\n### Tone and Voice\n\n1. **Optimistic and Enthusiastic**  \n   - Show excitement about AI’s potential in a **balanced, non-overbearing** way.  \n   - Demonstrate genuine curiosity—celebrate successes and **promising experiments**.\n\n2. **Clear, Direct, and Data-Driven**  \n   - Use bullet points and **bolded keywords** for critical stats and key points/details. Bolded values should be used to highlight important words of text so don't bold too much or else it will lose its meaning.\n   - Keep language **straightforward**—avoid deep academic jargon, but don’t oversimplify.\n\n3. **Conversational and Personable**  \n   - Use **friendly, casual style** with first- or second-person pronouns (“we,” “you”).  \n   - Engage the reader: “Here’s what caught our attention,” “We’re excited to see how this unfolds.”\n\n4. **Authoritative Without Being Overly Formal**  \n   - **Cite sources** and link to relevant external sources when possible.  \n   - Combine excitement with **credible facts** to maintain trust. Review the linking requirements to understand the correct way to cite.\n    - **Authoritative yet approachable**, focusing on credible facts and references. Always include a markdown link when you can tie back back a concept like a person, event, annoucment, social media post to what you are writing about. This is important.\n\n---\n### Word and Phrase Blacklist\n\nAvoid using these words and phrases in your output:\n\n- Smarts\n- Game changing\n- Revolutionize\n- sophisticated\n\n---\n## Formatting and Layout Tips\n\n1. **Short Paragraphs and Bullet Points**  \n  - Keep **1–2 sentences per paragraph** when not using bullets.  \n  - Use bullet points to **list features, stats, or steps** clearly.\n  - Bullet points must be in proper markdown format. Here's an example of a properly formatted markdown bullet (make note of the spacing). `- This is a proper bullet that will exist on its own line`\n\n2. **Visual Cues and Emphasis**  \n  - **Bold** key data points or important terms (e.g., **80%+ accuracy**, **multi-agent system**).  \n  - Use *italics* or _underlines_ sparingly for references, notable phrases, or quotes.\n\n3. **Format In Markdown**\n  - Format your output in markdown using best practices for headings, paragraphs, bulleted lists, bold text, and hyperlinks.\n  - You should use markdown formatting where the section heading is a the `#` heading level for the header of this segment.\n  - Pay close attention to your markdown formating to make sure it is valid and clean.\n\nPay close attention and ensure your output matches the provided JSON schema format. Make sure any special characters our correctly handled so that your output can be parsed. If you make any mistakes here and return output that does NOT match the provided, this task will be considered a complete failure and I will lose my car, my house, and my family.\n\n---\n### Additional Notes\n\nA main goal of our is to provide concise yet powerful insights, your publication can stand out as a **trusted source** for the latest in AI innovation.\n\nYou MUST also reference \"Additional Source Materials\" to get more context around the segment you are writing. This should be very helpful for adding commentary, making better summaries, extracting data points, and giving more context to the reader.\n\n---\n### Link and Hyperlinking Requirements\n\nIt is critical that you follow these requirements when inserting links into your output. Read through this carefully, reflect on it for 25 minutes, and double check your work to ensure you follow these requirements correctly.\n\n1.  **Strategic Linking for Validation & Context:** Embed hyperlinks purposefully.\n    * Link specific entities (companies, products, technologies) to their official source on first mention.\n    * Link data, statistics, claims, or direct quotes to their precise origin (e.g., study, press release, specific article/report section).\n    * Where appropriate (e.g., in concluding sections), consider linking to resources offering broader context or further exploration of the topic.\n\n2.  **Mandatory Verified Deep Links:** All hyperlinks MUST point to the *exact*, specific page, document, or section directly supporting the assertion being made. Before including *any* link:\n    * **Verify:** Confirm the destination directly and explicitly supports the specific information it's linked to.\n    * **Prioritize:** Use primary or the most authoritative sources available.\n    * **Deep Link:** Absolutely NO linking to generic homepages or main site sections (e.g., link to the specific *project page* or *announcement*, not just the company's top-level domain). An example of linking to a generic homepage would be `https://openai.com/`. Make sure you DO NOT DO THIS.\n    * **Omit if Uncertain:** If the precise, credible, and directly supporting URL cannot be confidently identified and verified, DO NOT include a link for that piece of information.\n\n3.  **Seamless Integration & Readability:** Weave links naturally into the narrative flow.\n    * **Anchor Text:** Use brief, relevant anchor text (typically 2-5 words) that accurately describes the link's destination or topic. Avoid overly long anchor text.\n    * **Density:** You MUST limit links to 1 (one) per paragraph or self-contained bullet point. If multiple sources are essential for a single point, prioritize the single most direct/authoritative one, or carefully distribute links across different sentences only if absolutely necessary for clarity and validation.\n\n4.  **Leverage Provided Source Materials:** Actively consult the `Current Segment Story Context` and `Additional Current Segment Source Materials` sections (if provided) to identify, verify, and select the most appropriate and accurate hyperlinks based on the available information.\n\n5. Verify link destinations - Before suggesting a link in your response, confirm the URL directly relates to the exact topic, product, or claim being discussed. You MUST NOT link to a web page that doesn't exist or a web page that would result in a HTTP 404 error when a user clicks on it. If you include a link that goes to a web page that does not exist or results in an error, it will result in us completely losing the trust of our readers. You are not allowed to make any mistakes here or insert links that are to web pages that don't exist on the internet. Think through this requirement carefully and deeply.\n\n6. Remember that links should be incorporated naturally into the text rather than appearing as separate references. The goal is to provide readers with a seamless way to verify information and explore topics further while maintaining the newsletter's readability. Avoid adding this contextual link to more than three (3) words at once — it should not feel super long. The hyperlink/contextual link should be on a few anchor words (maximum of 3 (three) words. Pay close attention to the anchor text you are placing the link on. It MUST be intentional and it must be the set of words that makes the most sense to place the link. Think deeply about where the link is getting placed on each sentence or bullet point for at least 25 minutes before creating your output. You MUST place this in the best possible spot with the best anchor text that is most relevant to the link destination.\n\n7. Multiple sources and links can be found below under the `Current Segment Story Context` and `Additional Current Segment Source Materials` headings. Please think deeply and review this context in order to place the best links. You must read all additional source materials and think on the best links to reference for 30 minutes before you decide to add them in. Links to evaluate and consider can be found by looking for the `url` value on the \"Additional Current Segment Source Materials\" content items. You can also look in the `external_source_links` array inside the JSON provided in \"Current Segment Story Context\".\n\n8. Prefer linking to credible sources and avoid linking to unknown websites or websites that have very poor reputations.\n\n9. You MUST ENSURE that the links you are including and inserting are exactly the same urls copied from the provided source urls. You may not change or modify these urls because the url is required to work. When including a URL it should be copied and pasted in. NOT URL MODIFICATION IS ALLOWED. Before inserting a link, you must load this URL from the internet to ensure it is still valid and can be seen when people click on it. YOU MUST INSERT AND PROVIDE CORRECT HYPERLINKS.\n\n10. You MUST avoid linking the same URL more than once in the scope of this newsletter section. You are allowed to use a source one so pick the spot this is the most contextually relevant.\n\n11. When writing about product annoucements, new releases, major updates, or other big annoucements, I would expect you to link back to the source material put out by the company. This is typically a blog post, Tweet / X post, a research paper, or another piece of content release by the company, entity, or person who created it. It is most useful to link back to the main source material for these types of stories. You MUST remember that you are NOT allowed to make up or use links that were not provided as input.\n\n12. Source Requirement: You must only use URLs found within the provided text designated as \"Current Segment Story Context\" or \"Additional Current Segment Source Materials\". Do not search elsewhere or use external knowledge. Accuracy Requirement: The URL included in your output must be a perfect, character-for-character copy of the URL found in the source. It must be reproduced verbatim. Prohibition: You are strictly forbidden from creating, guessing, modifying, shortening, or completing URLs. If a URL is incomplete or looks incorrect in the provided context, copy it exactly as it is. Rationale: Users will click this URL; therefore, it must precisely match the provided source url to potentially function as intended. Handling Absence: If you cannot find any URL within the specified source sections, you *MUST* omit inserting an link and output plain text instead.\n\n---\n## Newsletter Context\n\n- Newsletter Subject Line: {{ $node[\"set_selected_stories\"].json.subject_line }}\n- Newsletter Pre-Header Text: {{ $node[\"set_selected_stories\"].json.pre_header_text }}\n\n### Current Segment Story Context\n\nTitle: {{ $node[\"set_current_segment\"].json.current_story.title }}\nSummary:  {{ $node[\"set_current_segment\"].json.current_story.summary }}\n\n{{ $node[\"aggregate_segment_text_content\"].json.content_item.join(\"\\n\\n\") }}\n\n### Additional Current Segment Source Materials\n\n{{\n  $('aggregate_segment_external_source_content').isExecuted\n    ? $node[\"aggregate_segment_external_source_content\"].json.data.map(item => {\n      let result = \"\";\n      result += `<${item.metadata.url}>\\n`;\n      result += \"---\\n\";\n      result += `url: ${item.metadata.url}\\n`;\n      result += \"---\\n\";\n      result += item?.markdown;\n      result += `</${item.metadata.url}>\\n`;\n\n      return result;\n    }).join(\"/n/n\")\n    : \"N/A\"\n}}\n\n",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are an expert AI copywriter tasked with creating **engaging** newsletter segments that **resonate** with a **tech-savvy audience**. Your goal is to deliver concise, \"Axios-like\" and \"The Rundown-like\" summary sections of **AI developments** and other interesting news."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            12188,
            1040
          ],
          "id": "0544a24c-3839-41ca-86d7-0b775288849f",
          "name": "write_segment_content",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "e37da3c8-902a-406d-a5c7-195a9b8c32e7",
                  "name": "current_story",
                  "value": "={{ $json }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            9016,
            1040
          ],
          "id": "bbebe76c-3adf-4ff0-a4d2-613629563637",
          "name": "set_current_segment"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "144dbdda-e76e-452c-b1a1-6bbbcba2a477",
                  "name": "story_sections",
                  "value": "={{ $json.story_sections.join(\"\\n\\n---\\n\") }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            9456,
            642.5
          ],
          "id": "0ff4a5f4-7878-4ec3-9425-bcbd12ca1569",
          "name": "set_combined_sections_content"
        },
        {
          "parameters": {
            "fieldsToAggregate": {
              "fieldToAggregate": [
                {
                  "fieldToAggregate": "story_sections"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            9236,
            642.5
          ],
          "id": "066ab616-472d-4262-a404-1764fe441030",
          "name": "aggregate_story_sections"
        },
        {
          "parameters": {
            "model": "claude-3-5-sonnet-20241022",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.2,
          "position": [
            5780,
            560
          ],
          "id": "b18e3938-0c9a-4ab6-a452-aa71b60096ef",
          "name": "claude-3-5-sonnet"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-pro-preview-06-05",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            5632,
            360
          ],
          "id": "45ae9243-e5de-46aa-b93b-858c7dcb1185",
          "name": "gemini-2.5-pro"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            12188,
            1260
          ],
          "id": "7be4b2b7-ada0-4b55-9510-12bb64af01c5",
          "name": "story_segment_auto_parser"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Write your sequential reasoning to write this section for the AI Tools newsletter and determine what content to write, what formatting to use, what links to include to external sources, and other content decisions to make while following the provided guidelines. Please expand on the decisions you are making on each link you choose to insert. You MUST list out each of the sources you evaluated when writing this newsletter content along with the reasoning for using it as a reference or not. You MUST also share your reasoning for each link/hyperlink that you decide to place in this newsletter content along with how it meets the linking requirements.\"\n    },\n    \"newsletter_section_content\": {\n      \"type\": \"string\",\n      \"description\": \"The main content of the newsletter section formatted as markdown.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"newsletter_section_content\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            12276,
            1455
          ],
          "id": "dcc24a2b-fa02-4483-89fa-329f0de8d0be",
          "name": "story_segment_output_parser"
        },
        {
          "parameters": {
            "content": "## Write Intro Section\n",
            "height": 1040,
            "width": 460
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            9574,
            -40
          ],
          "typeVersion": 1,
          "id": "a0b41a54-cddc-442c-bcd5-80ce7312a857",
          "name": "Sticky Note2"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=# Prompt for Generating Newsletter Intro Section\n\n## Role:\n\nYou are an expert AI Newsletter Writer, skilled at crafting engaging and informative introductory sections that precisely match a specific style and format.\n\n## Goal:\n\nGenerate an introductory section for our AI email newsletter, \"The Recap,\" based on the provided inputs. The generated intro must strictly adhere to the format, style, length, and tone demonstrated in the examples below.\n\nToday's date for the newsletter is *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}*.\n\n## Input Provided:\n\nYou will receive the following information for each newsletter edition:\n1.  **Subject Line:** The subject line of the email.\n2.  **Pre-header Text:** The pre-header text (preview text) of the email.\n3.  **Newsletter Content:** The full text content of the body of the newsletter.\n\n## Constraints & Instructions:\n\n1.  **Format Mimicry:** Replicate the exact structure of the examples:\n    *   Greeting: Start *precisely* with \"Good morning, AI enthusiasts.\" - Instead of just printing \"AI enthusiast\" you should output an expersion that is surrounding by double handlebars/mustache characters `{` to open and `}` to close it. The inside of the handlebars should be `first_name | AI enthusiast` so the value is dynamic. Please also make sure this entire greeting is formated as bold in markdown.\n    *   Paragraph 1: Introduce the most prominent news story or theme from the provided `Newsletter Content`. This should be concise (typically 2-3 sentences). In this Paragraph, you MUST AVOID repeating the exact same sentence structure that the first story / top story uses. It will appear strange to our readers if you use the exact same sentence or extremely similar sentences in both this intro and the content already written for the first story / top story. Avoid flowerly language here, this should be simple to read and make make the reader want to continue forward.\n    *   Paragraph 2: Briefly elaborate on the main topic, pose a key question about its implications, or highlight its significance (typically 2-3 sentences). Avoid duplicating or repeating information across these paragraphs. Avoid flowerly language here, this should be simple to read.\n    *   Transition Phrase: Use the *exact* phrase \"In today’s AI recap:\" (Note: Use \"recap\", **not** \"rundown\"). This transition phrase MUST be bolded text in markdown format.\n    *   Bulleted List: Create a bulleted list (using `-` for each point) summarizing the main topics covered in the `Newsletter Content` (usually 4 items). Derive these items directly from the provided content.\n2.  **Style & Tone:** Match the style and tone of the examples: informative, engaging, slightly speculative/analytical (often posing a question in the second paragraph), concise, and enthusiastic, targeted towards an audience interested in AI developments.\n3.  **Length:** Ensure the overall length of the generated introduction section is very similar to the examples provided.\n4.  **Content Derivation:** Base the content of the two introductory paragraphs and the bulleted list *solely* on the information present in the provided `Newsletter Content`. Identify the most significant news item for the opening paragraphs.\n5.  **Keyword:** Use the word \"recap\" in the transition phrase before the bulleted list, as the newsletter is named \"The Recap\".\n\n## Examples of Desired Output Format, Style, Length, and Tone:\n\n**(Note: The examples below use \"rundown\" but your output MUST use \"recap\" in the transition phrase)**\n\n**Example 1 (Illustrative - use \"recap\" in your output):**\n\nGood morning, AI enthusiasts. OpenAI has “a lot of good stuff” lined up this week, according to Sam Altman—and its first release is a step back…in name only.\n\nA newly launched GPT-4.1 (?) family features million-token context windows, improved coding abilities, and significantly lower prices across the board — potentially laying a new foundation for the fast-approaching era of agentic AI development.\n\nIn today’s AI rundown:\n\n- OpenAI’s dev-focused GPT-4.1 family\n- ByteDance’s efficient Seaweed video AI\n- Create conversational branches to explore ideas\n- Google’s AI to decode dolphin speech\n\n---\n\n**Example 2 (Illustrative - use \"recap\" in your output):**\n\nGood morning, AI enthusiasts. OpenAI’s future may stretch beyond frontier models…to a social network riding ChatGPT’s wave of success.\n\nThe move could unlock much-needed real-time data for Sam Altman’s AI ambitions, but the question is: could OpenAI match the scale, engagement, stickiness, and broader cultural pull of X or Meta’s platforms?\n\nIn today’s AI rundown:\n\n- OpenAI reportedly building social network\n- Kling AI drops new video and image models\n- Build a personal data analyst with n8n automation\n- AI models play detective in Ace Attorney\n\n---\n\n**Example 3 (Illustrative - use \"recap\" in your output):**\n\nGood morning, AI enthusiasts. Meta’s hotly-anticipated Llama 4 family is here — with a surprise weekend release debuting new open-weights models with massive context windows and benchmark-beating performances.\n\nWith a 2T “Behemoth” still in training and claims of outperforming GPT-4.5, is this release a true next-gen step forward? Or will user experience tell a different story?\n\nIn today’s AI rundown:\n\n- Meta launches Llama 4 model family\n- Copilot’s new personalization upgrades\n- Unlock the power of AI across your apps\n- ‘AI 2027’ forecasts existential risks of ASI\n\n---\n\n**Example 4 (Illustrative - use \"recap\" in your output):**\n\nGood morning, AI enthusiasts. AI-generated video has always faced major limitations in length and consistency, but new research may have just unlocked a major leap in storytelling capabilities.\n\nWith researchers using a new method and a dataset of Tom and Jerry cartoons to create minute-long, coherent generations, the days of short, disconnected AI video clips may finally be numbered.\n\nIn today’s AI rundown:\n\n- NVIDIA and Stanford’s one-minute AI cartoons\n- Amazon’s new voice model, video upgrade\n- Create eye-catching thumbnails with GPT-4o\n- Murati’s Thinking Machines adds ex-OpenAI talent\n\n---\n### Word and Phrase Blacklist\n\nAvoid using these words and phrases in your output:\n\n- Smarts\n- Game changing\n- game-changing\n- next-level\n- Revolutionize\n- sophisticated\n- enhanced\n\n---\n\n## Your Task:\n\nBased on the `Subject Line`, `Pre-header Text`, and `Newsletter Content` I provide, generate the introductory section for \"The Recap\" newsletter, following all the instructions and mimicking the examples precisely, ensuring you use \"In today’s AI recap:\".\n\n### Subject Line\n{{ $('set_selected_stories').item.json.subject_line }}\n\n### Pre-header Text\n{{ $('set_selected_stories').item.json.pre_header_text }}\n\n### Newsletter Content\n{{ $('set_combined_sections_content').item.json.story_sections }}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.6,
          "position": [
            9676,
            445
          ],
          "id": "a6764983-c219-4e09-8d83-47a8d96e9f4e",
          "name": "write_intro"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Write your sequential reasoning to write this intro section for the AI Tools newsletter and determine what content to write, what formatting to use, and any other thoughts made during the process of writing.\"\n    },\n    \"newsletter_intro_section_content\": {\n      \"type\": \"string\",\n      \"description\": \"The 'intro' newsletter section content formatted as markdown.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"newsletter_intro_section_content\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            9764,
            860
          ],
          "id": "53cb9f7f-8066-4aaf-9f0b-3c1e618ba31e",
          "name": "intro_parser"
        },
        {
          "parameters": {
            "content": "## Write \"The Shortlist\" Section\n",
            "height": 1040,
            "width": 460,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            9950,
            -40
          ],
          "typeVersion": 1,
          "id": "e8555d62-7426-49c9-81ff-d59acae26479",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Write your sequential reasoning to write this 'other top stories stories' section for the AI Tools newsletter and determine what content to write, what formatting to use, what links to copy/paste over from the provided stories, and any other thoughts made during the process of writing. You MUST list out each of the sources you evaluated when writing this newsletter section along with the reasoning for using it as a reference or not. You MUST also share your reasoning for each link/hyperlink that you decide to place in this newsletter content along with how it meets the provided linking requirements. Your are not allowed to fabricate for make-up a link. Links MUST be extracted directly from the provided source materials.\"\n    },\n    \"newsletter_other_top_stories_section_content\": {\n      \"type\": \"string\",\n      \"description\": \"The 'other top stories' newsletter section content formatted as markdown. You must include your analysis of which link to include and validation of it being copied directly from source materials. You MUST directly extract this link from the provided source materials. You are REQUIRED to pick out at least 3 (three) stories to be included here. The URL included in your output for any given story **MUST** be a perfect, 100% **character-for-character copy** of the URL as it appears in the `List of Potential Other AI Stories` section. It must be reproduced *exactly* as written in the source, including case sensitivity, punctuation, and any apparent errors or incompleteness.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"newsletter_other_top_stories_section_content\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            10140,
            860
          ],
          "id": "23ce57a0-184e-47ea-95e6-4f1b2aecbfc0",
          "name": "other_top_stories_parser"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=## Role:\n\nYou are an expert AI Newsletter Writer, specializing in crafting concise, engaging, and informative summaries of the latest AI news for a tech-savvy audience. You are writing a specific section for the newsletter \"The Recap\".\n\n## Context:\n\nWe are creating the \"Other Top AI Stories\" section for our email newsletter, \"The Recap\". This section should highlight interesting and relevant AI news items that were *not* covered in the main segments of the newsletter. The goal is to provide readers with a quick overview of other significant developments in the AI space. The stories you pick MUST be related to AI.\n\nToday's date for the newsletter is *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}*.\n\n## Input Data:\n\nYou will be provided with the following information:\n\n1.  **Newsletter Subject Line:** \"\"{{ $('set_selected_stories').item.json.subject_line }}\"\n2.  **Main Stories Already Covered (Do NOT repeat these topics or include them in your output)**\n3. **The Full Text Content of Our Last Newsletter Edition** (Do NOT repeat stories or include duplicates that have already been covered in \"The Shortlist\" section of the previous edition)\n4.  **List of Potential Other AI Stories (Analyze these and evaluate these in order to determine the best stories)**\n5. **List of Potential Other AI Stories from Tweets / X Posts (Analyze these and evaluate these in order to determine the best stories)**\n\n## Task:\n\nYour task is to analyze the provided list of AI news stories, select the most relevant and interesting stories for a tech and AI enthusiast audience (typically 3-5 stories, use your judgment. It is truly your choice to pick the number of stories), ensuring they do *not* overlap with the stories already in the newsletter, and then write a short summary for each selected story in the specified format and style. You are not allowed to make up or guess a link to include for a story. You MUST have a link that you can copy and paste into your output for it to be valid story to include. If there is not a valid link to include, you MUST omit this story from your output. You must include a minimum of at least 3 (three) stories in your output. \n\n## Formatting and Style Requirements:\n*   **Output Format:** Generate the output in Markdown.\n*   **Story Structure:**\n    *   The **first word** of each story summary *must* be **bolded**.\n    *   The **second word** *must* be a **verb** and formatted as a Markdown **link** (`[verb](URL)`). If a verb does not work here for the story, you should skip/omit this story.\n    *   The **URL** used in the link *must* be the **exact** URL provided for that story in the list of stories / story context. You must copy and paste this value for your output — there can be no changes to this url. This is critical.\n    *   The rest of the sentence should be a concise summary of the story's key takeaway.\n    *    Your output must be in  markdown format.\n*   **Style:**\n    *   Mimic the writing style of \"The Rundown\" and the provided examples below. The tone should be concise, informative, slightly informal, and engaging for AI/tech professionals and enthusiasts.\n    *   Each story summary *must* be its own paragraph. **Do NOT use bullet points or numbered lists.**\n*   **Selection Criteria:** Choose stories that are significant, interesting, or offer a unique perspective within the AI landscape. Avoid minor updates unless particularly noteworthy. Prioritize variety if possible. Make sure you DO NOT repeat stories in your selection or output duplicates. You MUST use specifics when referencing stories, instead of saying a generic term like \"AI\", you must pick a story that references specific companies, entities, models, or some other specific term.\n\n## Examples of Desired Output Format and Style (Use these as your guide):\n\n**NVIDIA** [released](<URL_placeholder>) Nemotron-Ultra, a 253B parameter open-source reasoning model that surpasses DeepSeek R1 and Llama 4 Behemoth across key benchmarks.\n\n**OpenAI** [published](<URL_placeholder>) its EU Economic Blueprint, proposing a €1B AI accelerator fund and aiming to train 100M Europeans in AI skills by 2030.\n\n**Deep Cogito** [emerged](<URL_placeholder>) from stealth with Cogito v1 Preview, a family of open-source models that it claims beats the best available open models of the same size.\n\n**Google** [rolled out](<URL_placeholder>) its Deep Research feature on Gemini 2.5 Pro, claiming superior research report generation over rivals and adding new audio overview capabilities.\n\n## Link and Hyperlinking Requirements\n\nIt is critical that you follow these requirements when inserting links into your output. Read through this carefully, reflect on it for 25 minutes, and double check your work to ensure you follow these requirements correctly.\n\n1.  **Mandatory Verified Deep Links:** All hyperlinks MUST point to the *exact*, specific page, document, or section directly supporting the assertion being made. Before including *any* link:\n    * **Verify:** Confirm the destination directly and explicitly supports the specific information it's linked to.\n    * **Prioritize:** Use primary or the most authoritative sources available.\n    * **Deep Link:** Absolutely NO linking to generic homepages or main site sections (e.g., link to the specific *project page* or *announcement*, not just the company's top-level domain). An example of linking to a generic homepage would be `https://openai.com/`. Make sure you DO NOT DO THIS.\n    * **Omit if Uncertain:** If the precise, credible, and directly supporting URL cannot be confidently identified and verified, DO NOT include a link for that piece of information.\n\n2.  **Leverage Provided Source Materials:** Actively consult the `Current Segment Story Context` and `Additional Current Segment Source Materials` sections (if provided) to identify, verify, and select the most appropriate and accurate hyperlinks based on the available information.\n\n3. Verify link destinations - Before suggesting a link in your response, confirm the URL directly relates to the exact topic, product, or claim being discussed. You MUST NOT link to a web page that doesn't exist or a web page that would result in a HTTP 404 error when a user clicks on it. If you include a link that goes to a web page that does not exist or results in an error, it will result in us completely losing the trust of our readers. You are not allowed to make any mistakes here or insert links that are to web pages that don't exist on the internet. Think through this requirement carefully and deeply.\n\n7. Multiple sources and links can be found below in the list of other stories to evaluate and consider. Please think deeply and review this context in order to place the best links. You must read all additional source materials and think on the best links to reference for 30 minutes before you decide to add them in.\n\n8. Prefer linking to credible sources and avoid linking to unknown websites.\n\n9. You MUST ENSURE that the links you are including and inserting are exactly the same urls copied from the provided source urls. You may not change or modify these urls because the url is required to work. When including a URL it should be copied and pasted in. NOT URL MODIFICATION IS ALLOWED. Before inserting a link, you must load this URL from the internet to ensure it is still valid and can be seen when people click on it. YOU MUST INSERT AND PROVIDE CORRECT HYPERLINKS.\n\n10. Strict URL Handling Requirements:\n\n*   **Source Constraint:** You **MUST** exclusively use URLs found *verbatim* within the provided text section explicitly labeled `\"List of Potential Other AI Stories\"`. Absolutely **NO** external searching or use of prior knowledge is permitted to find, verify, or complete URLs.\n*   **Accuracy Mandate - Verbatim Copying:** The URL included in your output for any given story **MUST** be a perfect, 100% **character-for-character copy** of the URL as it appears in the `\"List of Potential Other AI Stories\"` section. It must be reproduced *exactly* as written in the source, including case sensitivity, punctuation, and any apparent errors or incompleteness.\n    *   **Verification Step:** Before outputting any URL, perform a mental (or procedural) **direct comparison** between the URL in the source text and the URL you plan to output. Ensure every single character matches perfectly.\n*   **Strict Prohibition on Modification:** You are explicitly **FORBIDDEN** from:\n    *   Creating, generating, or inventing URLs.\n    *   Guessing or completing partial URLs found in the source.\n    *   Modifying URLs in *any* way (e.g., correcting perceived typos, adding/removing `http://` or `https://` unless present in the source, changing case, URL encoding/decoding, shortening).\n    *   Using URLs that merely *resemble* source URLs but are not exact matches.\n    *   **Rule:** If a URL appears incomplete, broken, misspelled, or otherwise incorrect within the source text, you **MUST** copy it precisely in that flawed state. **Do NOT attempt to \"fix\" it.**\n*   **Handling Missing URLs:** If you examine the `\"List of Potential Other AI Stories\"` section and cannot find *any* URL explicitly associated with a potential story mentioned therein, you **MUST OMIT that specific story entirely** from your output. Do not mention the story if its corresponding URL is absent in the designated source section.\n*   **Critical Importance & Consequence:** Failure to adhere strictly to these URL rules, especially the verbatim copy requirement, is unacceptable. An incorrect or modified URL will fail. **Treat every URL extraction as a critical data integrity task requiring maximum precision.** Double-check your work meticulously against the source before finalizing the output.\n\n## Output Generation:\n\nBased on the inputs provided (Subject Line, The content of stories already covered, list of all AI stories), generate the \"Other Top AI Stories\" section following all instructions precisely. Ensure the selected stories are distinct from the main covered topics and formatted correctly.\n\n## Subject Line (Input #1)\n\n{{ $('set_selected_stories').item.json.subject_line }}\n\n## Main Stories Already Covered (Input #2)\n\n{{ $('set_combined_sections_content').item.json.story_sections }}\n\n## Last/Previous Edition of Our Newsletter (Input #3)\n\n```\n{{ $('form_trigger').item.json[\"Previous Newsletter Content\"] }}\n```\n\n## List of Potential Other AI Stories (Input #4)\n\n{{ $('combine_markdown_content').item.json.content_result }}\n\n## List of Potential Other AI Stories (Tweets / X Posts) (Input #5)\n\n{{ $('combine_tweet_content').isExecuted\n  ? $('combine_tweet_content').item.json?.content_result ?? \"N/A\"\n  : \"N/A\"\n}}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.6,
          "position": [
            10052,
            445
          ],
          "id": "f8af7190-0286-4b3a-bba0-450012760b10",
          "name": "write_other_top_stories"
        },
        {
          "parameters": {
            "content": "## Format Full Newsletter",
            "height": 1040,
            "width": 1300,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            10158,
            -237.5
          ],
          "typeVersion": 1,
          "id": "4e6529ad-d2dd-4a8f-89a3-88ef313f7259",
          "name": "Sticky Note5"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "cba28e4d-4a34-4765-b456-16c81479da9e",
                  "name": "full_newsletter_content",
                  "value": "=# {{ $('set_selected_stories').item.json.subject_line }}\n\n{{ $('set_selected_stories').item.json.pre_header_text }}\n\n---\n{{ $('write_intro').item.json.output.newsletter_intro_section_content }}\n\n---\n{{ $('set_combined_sections_content').item.json.story_sections }}\n\n---\n## The Shortlist\n\n{{ $('write_other_top_stories').item.json.output.newsletter_other_top_stories_section_content }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            10428,
            642.5
          ],
          "id": "1235dc3b-9140-4b80-932c-864235a1b553",
          "name": "set_full_newsletter"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            9676,
            665
          ],
          "id": "0cdf8144-6988-4be2-8088-905b31d6f666",
          "name": "intro_auto_parser"
        },
        {
          "parameters": {
            "content": "## 2. Retrieve Twitter Content\n",
            "height": 260,
            "width": 2340,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            1450,
            240
          ],
          "typeVersion": 1,
          "id": "1a9c83b5-b2c4-4667-8667-9cdf8d44271d",
          "name": "Sticky Note6"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "00d2afe0-255b-45c0-b501-6844c615915d",
                  "name": "content_result",
                  "value": "={{ $('aggregate_markdown_content').item.json.data.map(item => item.content).join(\"\\n\\n\") }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1580,
            340
          ],
          "id": "c20e38cd-f2e2-411d-a4f8-aae993b3f8ee",
          "name": "combine_markdown_content"
        },
        {
          "parameters": {
            "aggregate": "aggregateAllItemData",
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            1360,
            340
          ],
          "id": "9b7cb33b-9464-41e3-9407-e135781044ce",
          "name": "aggregate_markdown_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "0d20cf16-c938-4ad4-a343-d32ab8070067",
                  "name": "content",
                  "value": "=<{{ $('filter_only_markdown').item.json.Key }}>\n---\nidentifier: {{ $('filter_only_markdown').item.json.Key }}\nfriendlyType: {{ $('get_markdown_object_info').item.json.Metadata.type }}\nsourceName: {{ $('get_markdown_object_info').item.json.Metadata[\"source-name\"] }}\nauthors: {{ $('get_markdown_object_info').item.json.Metadata.authors }}\nexternalSourceUrls: {{ $('download_markdown_object').item.json.Metadata['external-source-urls'] }}\n---\n\n{{ $('get_markdown_file_content').item.json.data }}\n</{{ $('filter_only_markdown').item.json.Key }}>",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1140,
            340
          ],
          "id": "896e9c6d-41ad-440f-9888-fc58bbb6ba2b",
          "name": "prepare_markdown_content"
        },
        {
          "parameters": {
            "operation": "text",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            920,
            340
          ],
          "id": "abecf0a9-77cd-44d1-b8eb-585b1f3a9f61",
          "name": "get_markdown_file_content"
        },
        {
          "parameters": {
            "bucketName": "data-ingestion",
            "fileKey": "={{ $('filter_only_markdown').item.json.Key }}"
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            700,
            340
          ],
          "id": "72373236-3250-4d30-a213-0b8c59832855",
          "name": "download_markdown_object",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "url": "=https://api.aitools.inc/admin/files/info/data-ingestion/{{ $json.Key }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            260,
            340
          ],
          "id": "9aa47cc7-e6b5-46ee-a784-ea3988d60e3d",
          "name": "get_markdown_object_info",
          "alwaysOutputData": false,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "resource": "bucket",
            "operation": "search",
            "bucketName": "data-ingestion",
            "limit": 500,
            "additionalFields": {
              "prefix": "={{ $json.Date }}/"
            }
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            -180,
            340
          ],
          "id": "40f55255-63aa-49c5-8a31-9728e86418b8",
          "name": "search_markdown_objects",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "operation": "fromJson",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            2460,
            340
          ],
          "id": "f044af99-056e-467a-9122-67b51dc97275",
          "name": "extract_tweets"
        },
        {
          "parameters": {
            "resource": "bucket",
            "operation": "search",
            "bucketName": "data-ingestion",
            "limit": 500,
            "additionalFields": {
              "prefix": "={{ $('form_trigger').item.json.Date }}/tweet."
            }
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            1800,
            340
          ],
          "id": "79187c6b-472a-4f8f-8ca3-0df23646dce3",
          "name": "search_tweets",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "bucketName": "data-ingestion",
            "fileKey": "={{ $('search_tweets').item.json.Key }}"
          },
          "type": "n8n-nodes-base.s3",
          "typeVersion": 1,
          "position": [
            2240,
            340
          ],
          "id": "e890226c-517b-4fd0-be92-78548b3ee150",
          "name": "download_tweet_objects",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "4150490e-8cb1-490f-99e4-e4f6893e5f3a",
                  "name": "content",
                  "value": "=<{{ $('search_tweets').item.json.Key }}>\n---\nidentifier: {{ $('search_tweets').item.json.Key }}\nfriendlyType: {{ $('get_tweet_object_info').item.json.Metadata.type }}\nsourceName: {{ $('get_tweet_object_info').item.json.Metadata[\"source-name\"] }}\nauthors: {{ $('get_tweet_object_info').item.json.Metadata.authors }}\nexternalSourceUrls: {{ $('get_tweet_object_info').item.json.Metadata['external-source-urls'] }}\ntweetUrl: https://x.com/{{ $('extract_tweets').item.json.data.user.handle }}/status/{{ $('extract_tweets').item.json.data.id }}\ntweetUserHandle: {{ $('extract_tweets').item.json.data.user.handle }}\ntweetUserFollowerCount: {{ $('extract_tweets').item.json.data.user.followerCount }}\ntweetViewCount: {{ $('extract_tweets').item.json.data.views }}\ntweetReetweetCount: {{ $('extract_tweets').item.json.data.retweets }}\ntweetBookmarkCount: {{ $('extract_tweets').item.json.data.bookmarks }}\ntweetFavoriteCount: {{ $('extract_tweets').item.json.data.favorites }}\n{{ $('extract_tweets').item.json.data?.quotedTweet\n  ?\n    `quoteTweetViewCount: ${$('extract_tweets').item.json.data.quotedTweet.views}\\n` +\n    `quoteTweetRetweetCount: ${$('extract_tweets').item.json.data.quotedTweet.retweets}\\n` +\n    `quoteTweetBookmarkCount: ${$('extract_tweets').item.json.data.quotedTweet.bookmarks}\\n` +\n    `quoteTweetFavoriteCount: ${$('extract_tweets').item.json.data.quotedTweet.favorites}`\n  : \"\\n\"\n}}\n---\n\n## Tweet Text Content\n{{ $('extract_tweets').item.json.data.text }}\n\n{{ $('extract_tweets').item.json.data?.quotedTweet?.text\n  ? `## Quote Tweet Content\\n ${$('extract_tweets').item.json.data.quotedTweet.text}`\n  : \"\\n\"\n}}\n\n</{{ $('search_tweets').item.json.Key }}>",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2900,
            340
          ],
          "id": "03b6fdce-a99d-476b-84dc-60240f14d5d5",
          "name": "prepare_tweet_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "1571fbbb-d836-4df7-8c15-09faddf0db49",
                  "name": "=subject_line",
                  "value": "={{ $node[\"set_current_subject_line\"].json.current_subject_line.subject_line }}",
                  "type": "string"
                },
                {
                  "id": "f0af3af9-7e19-4589-861b-67456d6321b1",
                  "name": "pre_header_text",
                  "value": "={{ $node[\"set_current_subject_line\"].json.current_subject_line.pre_header_text }}",
                  "type": "string"
                },
                {
                  "id": "7ace9fce-eb1c-40d1-938e-c4a5331e2987",
                  "name": "=top_selected_stories",
                  "value": "={{ $node[\"set_current_stories\"].json.current_stories.top_selected_stories }}",
                  "type": "array"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            8278,
            1040
          ],
          "id": "cafbab76-0c31-4245-bfe7-d7ccd03bbfa1",
          "name": "set_selected_stories"
        },
        {
          "parameters": {
            "url": "=https://api.aitools.inc/admin/files/info/data-ingestion/{{ $('search_tweets').item.json.Key }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2680,
            340
          ],
          "id": "439d7fbb-9b89-47d5-835c-9646f922b69e",
          "name": "get_tweet_object_info",
          "alwaysOutputData": false,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "aggregate": "aggregateAllItemData",
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            3120,
            340
          ],
          "id": "d3dd098a-6f11-403b-b367-5f4c8ceee77a",
          "name": "aggregate_tweet_content"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "00d2afe0-255b-45c0-b501-6844c615915d",
                  "name": "content_result",
                  "value": "={{ $('aggregate_tweet_content').item.json.data.map(item => item.content).join(\"\\n\\n\") }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3340,
            340
          ],
          "id": "1d4ff845-7eb7-4447-8361-fc352f8e1bc2",
          "name": "combine_tweet_content"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            10052,
            665
          ],
          "id": "4407c9ee-4cea-4652-a3d8-1ded957fc50c",
          "name": "other_top_stories_auto_parser"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            5752,
            362.5
          ],
          "id": "57f71590-34eb-44b0-9cca-d9673b2e3197",
          "name": "top_stories_auto_parser"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=:calendar: *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }} {{ $('edit_top_stories').isExecuted ? `(Revision #${$runIndex})` : \"\" }}*\n\n---------------------------------\n\n:newspaper: *Selected Stories:*\n\n{{ $json.current_stories.top_selected_stories.map((item, idx) => {\n  let result = `*${idx + 1}. ${item.title}* — ${item.summary}`;\n\n  result += `\\nContent Identifiers:\\n${item.identifiers.join(\"\\n\")}`;\n  result += `\\nExternal Source Links:\\n${item.external_source_links.join(\"\\n\")}`;\n\n  return result;\n}).join(\"\\n\\n\") }}",
            "otherOptions": {
              "includeLinkToWorkflow": false
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            4376,
            340
          ],
          "id": "6cbe36e6-fbe0-4fb8-bdb4-db7a14349404",
          "name": "share_selected_stories",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=<identity>\nAct as an expert editor and writer for newsletter content. Your sole function is to implement specific edits based on provided feedback, without altering any other part of the original content.\n</identity>\n\n<core_directive>\nYou will be given two pieces of information:\n1.  `Feedback`: Specific instructions detailing the required changes.\n2.  `Current_Newsletter_Content`: The complete newsletter story selections in JSON format that includes `top_selected_stories`. This is what you will be making changes to based on the provided feedback.\n\nYour task is to:\n1.  Carefully parse the `Feedback for Newsletter` details.\n2.  Apply **only** the changes specified in the `Feedback for Newsletter` to the `Current Newsletter Content`. Think deeply for several minutes before making this change to be sure it actually will acomplish what is desired by the feedback.\n3.  Output the **entire** \"Current Newsletter Content`, modified precisely according to the `Feedback`.\n4. You are allowed to update, replace, and use your own \"reasoning\" fields with your own thoughts on how you applied these edits.\n\n**Critical Constraint:** You **must not** introduce any changes, additions, deletions, or rephrasing beyond what is explicitly mandated by the `Feedback`. All parts of the `Current Newsletter Content` *not* mentioned in the `Feedback` must remain **absolutely identical** in the output. Preserve the original structure and formatting. The \"reasoning\" fields are the only fields that can be changed. This also applies to all text content and ALL external sources extracted from the original result.\n\nIt is also critical that you retain and keep the correct content `identifiers` and `external_source_links` for the stories that are being kept in your edits. These values critical to the success of this task as we will use that as a reference downstream. This means the same number of identifiers and external source links must be retained when you are applying an edit and keeping the same story in your output from before. You may not remove any identifiers that were orginally outputted in the initial story selection. This is of the most importance that you follow these steps. We need the correct content identifiers and external sources links/urls to remain the same across your edits for the same story.\n\n</core_directive>\n\n---\n## Feedback for Newsletter\n\nHere is the feedback provided the editor for this edition of the newsletter. You must spend a great deal of time reading through all of this feedback carefully multiple times. After that, you must think further on how to apply this feedback to the changes you need to make. Remember, you should only be changing what is specifically asked of you in this feedback. All other items and values *MUST* remain the same unless it explicitly gets referenced in this feedback. This is a critical part of you task so mistakes are not tolerated.\n\nYou MUST pay extremely close attention to the feedback provided and how it relates to the final selected stories. If the feedback only mentions changing or replacing a single story that was selected, you MUST be certain that the referenced story in the feedback is all that changes. You may NOT make extra edits or story selections. The feedback provided takes top priority above all else and you must follow the feedback in your output.\n\n<newsletter_top_stories_feedback>\n{{ $node[\"share_stories_approval_feedback\"].data.data.text }}\n</newsletter_top_stories_feedback>\n\n---\n## Initial Newsletter Prompt\n\nHere is the prompt/task that was used to write the initial newsletter content. You must read this completely and use this as a reference when thinking through the edits you are supposed to make.\n\n<initial_newsletter_prompt>\n{{ $('stories_prompt').item.json.select_top_stories_prompt }}\n</initial_newsletter_prompt>\n\n---\n## Current Newsletter Details\n\nHere is the current version of our newsletter which you will apply the provided feedback to in your edits. You should read this closely and think deeply about this and the provided feedback before you make any changes:\n\n{{ JSON.stringify($node[\"pick_top_stories\"].json.output, null, 2) }}\n\n---\n# Web Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these content pieces when picking out the top stories.\n\n{{ $('combine_markdown_content').item.json.content_result }}\n\n# Twitter / X Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these Tweets / X posts when picking out the top stories.\n\n{{ $('combine_tweet_content').isExecuted\n  ? $('combine_tweet_content').item.json?.content_result ?? \"N/A\"\n  : \"N/A\"\n}}\n",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are an AI assistant specialized in reading raw text about AI-related news, trends, and breakthroughs. Your objective is to determine which stories should be included in our AI Tools newsletter, based on their relevance, impact, and interest to a tech-savvy audience. You are also an expert at crafting subject lines for newsletter emails that leads to great open rates and keeps our readers interested."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            5648,
            140
          ],
          "id": "3cc75532-2d7a-4e5c-8bd5-2afc7101c1f3",
          "name": "edit_top_stories",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6a40f15b-56ac-4b0a-89cb-f5f31cdcdd69",
                  "name": "=subject_line_examples",
                  "value": "=- AI finds cancers with 99% accuracy\n- Claude (finally) searches the web\n- OpenAI's regulatory power play\n- Ilya's secret ASI roadmap\n- Apple's AI emergency\n- DeepMind's AI math genius\n- Mistral's speedy new assistant\n- OpenAI goes nuclear\n- AI's tutoring breakthrough\n- OpenAI's $500B Stargate Project\n- Meta's Manhattan-sized AI play\n- OpenAI's first AI agent arrives\n- OpenAI's o3 and o4-mini arrive\n- Chipmaking rivals join forces\n- Amazon is joining the reasoning race\n- Claude enters the reasoning era\n- Figure's home robot breakthrough\n- OpenAI’s ex-CTO launches rival lab\n- OpenAI's new GPT-5 roadmap\n- AI workforce coming: Anthropic's one-year prediction\n- The state of AI in 2025 (according to Stanford)\n- OpenAI's dev-focused GPT-4.1\n- Google's new AI video generator rivals Sora\n- China declares AI independence",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            5770,
            740
          ],
          "id": "dbc877aa-7d3f-44a4-a094-968cf2cb0585",
          "name": "subject_examples"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "0cf59ec5-e726-4327-9bbb-ebc222040626",
                  "name": "current_stories",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            4156,
            340
          ],
          "id": "f9d69244-fba8-4485-adcf-37fa81206142",
          "name": "set_current_stories"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=---\n:calendar: *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }} | Story Segment:* `{{ $node[\"set_current_segment\"].json.current_story.title }}`\n\n```\n{{ $node[\"write_segment_content\"].json.output.newsletter_section_content }}\n```\n\n*Image Options*\n\n{{ $node[\"extract_image_urls\"].json.output.image_urls.map(item => {\n    return `• ${item}`;\n}).join(\"\\n\") }}",
            "otherOptions": {
              "includeLinkToWorkflow": false
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            12940,
            1040
          ],
          "id": "d718c3e3-b142-4086-8cae-8f3dc027b66d",
          "name": "share_segment_msg",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=## Task\n\n**Objective:** Extract unique, direct image URLs from the provided contexts.\n\n**Inputs:**\n*   `Initial Sources Image Urls Context`\n*   `External Sources Image Urls Context`\n\n**Instructions:**\n1.  **Parse:** Process the XML content from both provided contexts.\n2.  **Extract:** Identify and collect all URLs found within the XML data.\n3.  **Filter:** Scrutinize the extracted URLs. Retain *only* those that appear to be direct links to image files (e.g., URLs ending in `.jpg`, `.png`, `.gif`, `.webp`, `.svg`, or otherwise structured as direct image resources).\n4.  **Exclude:** Explicitly remove any URLs that likely point to web pages (e.g., HTML documents, articles) rather than the image resource itself.\n5.  **Deduplicate:** Ensure the final list contains each unique image URL only once.\n6.  **Output:** Provide the final, unique list of valid image URLs.\n\n\n## Initial Sources Image Urls Context\n\nYou should look for the `imageUrls` value to see a comma-separated list of image urls for each provided story.\n\n{{ $node[\"aggregate_segment_text_content\"].json.content_item.join(\"\\n\\n\") }}\n\n\n## External Sources Image Urls Context\n\nYou should look inside the JSON for a list of image urls for each external source provided.\n\n{{\n  $('aggregate_segment_external_source_content').isExecuted && $node[\"aggregate_segment_external_source_content\"].json.data.length > 0\n    ? $node[\"aggregate_segment_external_source_content\"].json.data.map(item => {\n      let result = \"\";\n      result += `<${item.metadata.url}>\\n`;\n      result += \"---\\n\";\n      result += `Url: ${item.metadata.url}\\n`;\n      result += \"---\\n\";\n      result += JSON.stringify(item?.json?.main_content_image_urls, null, 2);\n      result += `</${item.metadata.url}>\\n`;\n\n      return result;\n    }).join(\"/n/n\")\n    : \"N/A\"\n}}",
            "hasOutputParser": true
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.6,
          "position": [
            12564,
            1040
          ],
          "id": "58d53a74-fc7f-4559-96e5-e53f5a8dd704",
          "name": "extract_image_urls",
          "retryOnFail": true
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n      \"chainOfThought\": {\n        \"type\": \"string\",\n        \"description\": \"Write your sequential reasoning to identify and extract the image urls from the provided sources.\"\n    },\n      \"image_urls\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\",\n          \"description\": \"Image url extracted directly from the provided context. You should only output a url here if you are certain it is form an image.\"\n        },\n        \"description\": \"List of extracted image urls from the provided sources and context.\"\n      }\n\t},\n    \"required\": [\n      \"chainOfThought\",\n      \"image_urls\"\n  ]\n}"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            12652,
            1455
          ],
          "id": "e262771a-b857-4f50-afdc-2c283c2db8cc",
          "name": "extract_image_urls_parser"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "5ae7c9b5-c82b-45c8-aff8-8a59e6028c49",
                  "name": "story_segment",
                  "value": "={{ $node[\"write_segment_content\"].json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            13160,
            1237.5
          ],
          "id": "0c5b05e9-4b11-423d-a6e2-1d0a5aaaf000",
          "name": "set_story_segment"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=*Top Stories Reasoning:*\n{{ $node[\"set_current_stories\"].json.current_stories.top_selected_stories_chain_of_thought }}\n",
            "otherOptions": {
              "includeLinkToWorkflow": false,
              "thread_ts": {
                "replyValues": {
                  "thread_ts": "={{ $json.message_timestamp }}"
                }
              }
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            4596,
            340
          ],
          "id": "540ded30-4d25-411a-b525-00c77cd76ab7",
          "name": "share_stories_reasoning",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985"
        },
        {
          "parameters": {
            "text": "=You must extract the following from the provided input:\n\n1. `approved` (required) - Indicator if the provided message gives a positive \"approval\" message that would indicate we want to proceed with the process. If there is a feedback message provided, you should output false.\n\nFor example \"I like the stories, give me another headline\" means the story selection was good, but there is still feedback around the headline to use.\n\n2. `feedback` - Feedback text content that is provided if the given input. This should be extracted verbatim from the input if there is feedback provided. If you determine this is feedback in this message, the resulting output should be false.\n\n---\nInput To Evaluate and Extract:\n\n{{ $json.data.text }}",
            "attributes": {
              "attributes": [
                {
                  "name": "approved",
                  "type": "boolean",
                  "description": "Indicator if the provided message gives a positive \"approval\" message that would indicate we want to proceed with the process.",
                  "required": true
                },
                {
                  "name": "feedback",
                  "description": "Optional feedback message that should be extracted if the "
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.informationExtractor",
          "typeVersion": 1,
          "position": [
            5036,
            340
          ],
          "id": "416d150b-5dbb-4dce-aa91-a78c629d7abc",
          "name": "extract_stories_approval_feedback"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "741b6ae7-404a-4782-a2c6-47cad99b001d",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            5412,
            340
          ],
          "id": "0f299f10-c1c7-4522-b839-e8ec3a6cbf07",
          "name": "check_stories_feedback"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $('set_subject_line_prompt').item.json.write_subject_line_prompt }}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are also an expert at crafting subject lines for newsletter emails that leads to great open rates and keeps our readers interested."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            6348,
            740
          ],
          "id": "a85a25b9-4155-4ba4-a1c6-0df5bf8f89a9",
          "name": "write_subject_line",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6a40f15b-56ac-4b0a-89cb-f5f31cdcdd69",
                  "name": "=write_subject_line_prompt",
                  "value": "=**Role:** Expert Email Copywriter Specializing in AI Content Engagement\n\n**Core Objective:** Optimize email engagement elements (Subject Line, Pre-header Text) for an AI newsletter to maximize open rates, based on provided story data.\n\n**Input Schema:**\n1.  `top_selected_stories`: JSON array detailing the featured stories for the newsletter edition. The **order is significant**, with the first item being the designated lead story.\n2.  `raw_source_material`: Markdown text containing detailed content for various stories.\n3.  `identifier`/`identifiers`: Linking keys within the JSON and potentially referenced in the Markdown, used to connect `top_selected_stories` entries to their full context in `raw_source_material`.\n\n**Mandatory Pre-computation Analysis & Justification:**\n1.  **Synthesize Insights:** Analyze the provided `top_selected_stories` JSON and `raw_source_material`, using `identifier` fields to deeply understand the core message, value proposition, and points of intrigue for the selected stories, paying special attention to the **lead story** (first in the JSON).\n2.  **State Deliberation:** Explicitly preface your reasoning by stating that the proposed outputs result from deep consideration (simulating >1 hour of strategic analysis) aimed at maximizing engagement within the given constraints.\n3. **Analyze Great Examples:** *Before* you start writing the subject line, you MUST deeply read and analyze the provided \"Great Subject Line Examples\". These examples are great Subject lines that capture what we are going for. You MUST write a subject line as good as these. You must think deeply about what makes these examples great and apply those insights to the subject line you are writing.\n4.  **Deliver Reasoning First:** *Before* providing the Subject Line and Pre-header Text, output a detailed, step-by-step breakdown of your reasoning. Explain:\n    *   How you interpreted the core value/hook of the lead story.\n    *   Why your chosen Subject Line wording effectively teases this hook within constraints.\n    *   How the Pre-header complements the Subject and potentially hints at other content.\n    *   How both elements work together to drive curiosity and perceived value.\n\n**Output Requirements:**\n\n1.  **Reasoning Output:** (Detailed justification as specified above).\n2.  **Subject Line Output:**\n    *   **Focus:** Must exclusively tease/highlight the **lead story** (first item in `top_selected_stories`).\n    *   **Constraint:** Strictly **7-9 words** maximum.\n    *   **Quality:** High-impact - generate curiosity, convey value compellingly but realistically (not overly-hyped).\n3.  **Pre-header Text Output:**\n    *   **Function:** Act as a **complementary extension** of the Subject Line.\n    *   **Quality:** Engaging, informative, reinforces the incentive to open.\n\n**Final Deliverable Structure:**\n1.  Statement of Deep Consideration.\n2.  Detailed Reasoning Breakdown.\n3.  Subject Line: [Your generated subject line]\n4.  Pre-header Text: [Your generated pre-header text]\n\nToday's date for the newsletter is *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}*.\n\n<top_newsletter_stories>\n```json\n{{ JSON.stringify($node[\"set_current_stories\"].json.current_stories.top_selected_stories, null, 2) }}\n```\n</top_newsletter_stories>\n\n## Important Guidelines\n\n**Writing Guidelines:**\n\nYou Should Avoid:\n- AVOID ALL CAPS or excessive punctuation!!!\n- Avoid making the news sound more significant than it actually is\n- Avoid over-exaggeration\n- Avoid using cliché and over-the-top buzzwords like \"revolution\" and \"game-changing\"\n\nYour pre-header text should be a straightforward teaser (15-20 words max) that teases and hints at what other stories will be included on this newsletter (outside of the main story). You should follow the \"PLUS:\" format for the pre-header text. DO NOT end this pre-header text with a period \".\" character.\n\nYou must prefer concrete specificity. It is better to reference a specifc model instead of a generic term like \"Google's AI\" or \"Meta's AI\".\n\n**Audience:**\n\n- Primarily tech-forward readers—developers, entrepreneurs, AI enthusiasts, and early adopters.\n- People who want to learn about new AI trends, developments, and real-world use cases to make their work more efficient.\n\n---\n# Great Subject Line Examples\n\nHere's a list of subject lines that really capture what we are going for with our newsletter. You should deeply think about these subject lines and what makes them great for 1 full hour. Then you should deeply think about how to apply this to the subject line you are writing and your top story selection/choice for an additional 2 full hours. These subject lines are all short, catchy, feature the most interesting story, and are very enticing to the reader. You MUST output a subject line as good as these. This collection exemplifies the target style and quality. Analyze them to understand the core principles of effectiveness.\n\n<great_subject_line_examples>\n{{ $('subject_examples').item.json.subject_line_examples }}\n</great_subject_line_examples>\n\n---\n# Web Content Context (The top stories were sourced from this information)\n\nReference this web content by cross-referencing its `identifier` from the selected stories to explore more context around the selected stories. You may only reference the story content that has a matching `identifer` that you cross-referenced.\n\n{{ $('combine_markdown_content').item.json.content_result }}\n\n# Twitter / X Context (The top stories were sourced from this information)\n\nReference this Twitter / X content by cross-referencing its `identifier` from the selected stories to explore more context around the selected stories. You may only reference the story content that has a matching `identifer` that you cross-referenced.\n\n{{ $('combine_tweet_content').isExecuted\n  ? $('combine_tweet_content').item.json?.content_result ?? \"N/A\"\n  : \"N/A\"\n}}\n\n",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            6128,
            740
          ],
          "id": "2541c1f9-92e8-4357-b4e9-e9120d899ef6",
          "name": "set_subject_line_prompt"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"subject_line_reasoning\": {\n      \"type\": \"string\",\n      \"description\": \"A detailed chain of thought explaining why you wrote the subject line the way you did. This will be shared in slack so please format this in slack's format. Avoid regular bullets and use numbered lists. The more detail of your reasoning, the better. IF feedback was provided in the context of editing the subject line, include how you considered that feedback in your changes.\"\n    },\n    \"subject_line\": {\n      \"type\": \"string\",\n      \"description\": \"A single compelling subject line for the newsletter email that follows the given subject line guidelines.\"\n    },\n    \"additional_subject_lines\": {\n      \"type\": \"array\",\n      \"description\": \"A list of 5-8 additional subject lines that were considered as top options for the selected subject line but were ultimately not selected.\",\n      \"items\": {\n        \"type\": \"string\",\n        \"description\": \"An additional subject line that was considered as a top option but was ultimately not selected.\"\n      }\n    },\n    \"pre_header_text_reasoning\": {\n      \"type\": \"string\",\n      \"description\": \"A detailed chain of thought explaining why you wrote the pre-header text the way you did. This will be shared in slack so please format this in slack's format. Avoid regular bullets and use numbered lists. The more detail of your reasoning, the better. IF feedback was provided in the context of editing the pre header text, include how you considered that feedback in your changes.\"\n    },\n    \"pre_header_text\": {\n      \"type\": \"string\",\n      \"description\": \"A short line of text to appear in email previews that follows the given pre header guidelines.\"\n    }\n  },\n  \"required\": [\n    \"subject_line_reasoning\",\n    \"subject_line\",\n    \"additional_subject_lines\",\n    \"pre_header_text_reasoning\",\n    \"pre_header_text\"\n  ]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            8288,
            860
          ],
          "id": "92701cec-8439-488e-9d53-4cf36e8a7ee3",
          "name": "subject_line_parser"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=:calendar: *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }} {{ $('edit_subject_line').isExecuted ? `(Revision #${$runIndex})` : \"\" }}*\n\n---------------------------------\n\n:loudspeaker: *Subject Line:*\n\n`{{ $json.current_subject_line.subject_line }}`\n`{{ $json.current_subject_line.pre_header_text }}`\n\n*Alternatives:*\n\n```\n{{ $json.current_subject_line.additional_subject_lines.map(item => {\n  return `${item}`;\n}).join(\"\\n\") }}\n```\n",
            "otherOptions": {
              "includeLinkToWorkflow": false
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            6944,
            740
          ],
          "id": "7b2b25f2-e132-4ff9-82fb-bcab767fe2c4",
          "name": "share_subject_line",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "0cf59ec5-e726-4327-9bbb-ebc222040626",
                  "name": "current_subject_line",
                  "value": "={{ $json.output }}",
                  "type": "object"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            6724,
            740
          ],
          "id": "7802e526-2505-4f40-936b-a38dd6dcefc1",
          "name": "set_current_subject_line"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=<identity>\nAct as an expert copyeditor specializing in crafting compelling newsletter subject lines and preheader text. Your sole function is to implement specific edits to provided subject lines and preheaders based on feedback, without altering any other information or generating new creative options unless explicitly asked for in the feedback.\n</identity>\n\n<core_directive>\nYou will be given three pieces of information:\n1.  `Feedback`: Specific instructions detailing the required changes **only for the subject line and/or preheader text**.\n2.  `Current Subject Line`: The original subject line string that might need editing based on the feedback.\n3.  `Current Preheader Text`: The original preheader text string that might need editing based on the feedback.\n\nYour task is to:\n1.  Carefully parse the `Feedback` details. Identify which element (Subject Line, Preheader Text, or both) needs modification.\n2.  Apply **only** the changes specified in the `Feedback` to the corresponding `Current Subject Line` and/or `Current Preheader Text`. Think carefully for several minutes before making the change to be sure it accurately reflects the feedback's intent.\n3.  If the feedback only targets the Subject Line, the Preheader Text must remain **identical** to the input `Current Preheader Text`.\n4.  If the feedback only targets the Preheader Text, the Subject Line must remain **identical** to the input `Current Subject Line`.\n\n**Critical Constraint:** You **must not** introduce any changes, additions, deletions, or rephrasing to the `Current Subject Line` or `Current Preheader Text` beyond what is explicitly mandated by the `Feedback`. If an element is not mentioned in the `Feedback`, it must be returned **absolutely identical** in the output's corresponding field. The `reasoning` field is generated by you to explain your edits based *only* on the provided feedback. Preserve the original case and general style unless the feedback specifically requests changes to them.\n</core_directive>\n\n---\n## Feedback\n\n{{ $node[\"share_subject_line_approval_feedback\"].data.data.text }}\n\n---\n## Initial Subject Line / Pre-Header Text Prompt\n\nThis is the initial prompt that was used to prompt an LLM to create the subject line and pre-header text output. You must read this carefully, think deeply about the initial prompt, and use it as a reference when making your edits.\n\n<initial_subject_line_pre_header_text_prompt>\n{{ $('set_subject_line_prompt').item.json.write_subject_line_prompt }}\n</initial_subject_line_pre_header_text_prompt>\n\n---\n## Current Subject Line / Pre-Header Text Details\n\nHere is the current version of our newsletter subject line and pre-header text which you will apply the provided feedback to in your edits. You should read this closely and think deeply about this and the provided feedback before you make any changes:\n\n{{ JSON.stringify($node[\"write_subject_line\"].json.output, null, 2) }}\n\n---\n# Web Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these content pieces when picking out the top stories.\n\n{{ $('combine_markdown_content').item.json.content_result }}\n\n# Twitter / X Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these Tweets / X posts when picking out the top stories.\n\n{{ $('combine_tweet_content').isExecuted\n  ? $('combine_tweet_content').item.json?.content_result ?? \"N/A\"\n  : \"N/A\"\n}}",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are an expert at crafting subject lines for newsletter emails that leads to great open rates and keeps our readers interested."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            8200,
            640
          ],
          "id": "d07dd0b8-13f2-46d5-8102-2cf02ba0adf6",
          "name": "edit_subject_line",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=*Subject Line Reasoning:*\n{{ $node[\"set_current_subject_line\"].json.current_subject_line.subject_line_reasoning }}\n\n*Pre-Header Text Reasoning:*\n{{ $node[\"set_current_subject_line\"].json.current_subject_line.pre_header_text_reasoning }}\n",
            "otherOptions": {
              "includeLinkToWorkflow": false,
              "thread_ts": {
                "replyValues": {
                  "thread_ts": "={{ $json.message_timestamp }}"
                }
              }
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            7164,
            740
          ],
          "id": "d68edc1c-0ceb-4197-9a02-3cc88410b593",
          "name": "share_subject_line_reasoning",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "operation": "sendAndWait",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "message": "=Please approve or share feedback for the *top stories* for the *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}* Newsletter",
            "responseType": "freeText",
            "options": {
              "messageButtonLabel": "Approve / Add Feedback"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            4816,
            340
          ],
          "id": "7f42de3b-ba18-43b8-bbf5-b8c30ee8dc2d",
          "name": "share_stories_approval_feedback",
          "webhookId": "e87a6c20-99dc-45a7-954d-f9bbdc7029ce"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "operation": "sendAndWait",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "message": "=Please approve or share feedback for the *subject line* for the *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}* Newsletter",
            "responseType": "freeText",
            "options": {
              "messageButtonLabel": "Approve / Add Feedback"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            7384,
            740
          ],
          "id": "2464bc9c-a833-485a-be8a-ac75ac2f0602",
          "name": "share_subject_line_approval_feedback",
          "webhookId": "e87a6c20-99dc-45a7-954d-f9bbdc7029ce"
        },
        {
          "parameters": {
            "text": "=You must extract the following from the provided input:\n\n1. `approved` (required) - Indicator if the provided message gives a positive \"approval\" message that would indicate we want to proceed with the process. If there is a feedback message provided, you should output false. You should really only be going forward if there is 1-2 words that mention it is approved or looks good.\n\nFor example \"Let's try another headline\" means the story selection was there is still feedback around the headline that needs to be resolved.\n\nFor another example: If the given feedback suggests a different headline to use that was ither in the alternatives or a different headline, approved should be false and you should pass along this feedback.\n\n2. `feedback` - Feedback text content that is provided if the given input. This should be extracted verbatim from the input if there is feedback provided. If you determine this is feedback in this message, the resulting output should be false.\n\n---\nInput To Evaluate and Extract:\n\n{{ $json.data.text }}",
            "attributes": {
              "attributes": [
                {
                  "name": "approved",
                  "type": "boolean",
                  "description": "Indicator if the provided message gives a positive \"approval\" message that would indicate we want to proceed with the process.",
                  "required": true
                },
                {
                  "name": "feedback",
                  "description": "Optional feedback message that should be extracted if the "
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.informationExtractor",
          "typeVersion": 1,
          "position": [
            7604,
            740
          ],
          "id": "ae387d96-bc7f-4113-8f65-566024c9f578",
          "name": "extract_subject_line_approval_feedback"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "741b6ae7-404a-4782-a2c6-47cad99b001d",
                  "leftValue": "={{ $json.output.approved }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            7980,
            740
          ],
          "id": "6fa5b00a-5c20-4288-947b-8873e3922a99",
          "name": "check_subject_line_feedback"
        },
        {
          "parameters": {
            "operation": "toText",
            "sourceProperty": "full_newsletter_content",
            "options": {
              "fileName": "={{ new Date($('form_trigger').item.json.Date).format(\"yyyy-MM-dd\") + \".md\" }}"
            }
          },
          "type": "n8n-nodes-base.convertToFile",
          "typeVersion": 1.1,
          "position": [
            10648,
            642.5
          ],
          "id": "eb87c5aa-aab2-4b07-891c-525261540ce2",
          "name": "create_newsletter_file"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "resource": "file",
            "options": {
              "fileName": "={{ new Date($('form_trigger').item.json.Date).format(\"yyyy-MM-dd\") + \".md\" }}"
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            10868,
            642.5
          ],
          "id": "8472d34e-c7fb-42de-ba34-6d92f8364703",
          "name": "upload_newsletter_file",
          "webhookId": "4cbc0321-a8dd-4d49-95d4-3339b6170896"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C08PGU0CLKS",
              "mode": "list",
              "cachedResultName": "ai-tools-newsletter"
            },
            "text": "=---\n:calendar: *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }} Newsletter Finished*\n\n`{{ $json.permalink }}`",
            "otherOptions": {
              "includeLinkToWorkflow": false
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            11088,
            642.5
          ],
          "id": "df7f2488-fffc-4cc4-94f0-0c0fa13ac00b",
          "name": "share_newsletter_msg",
          "webhookId": "5421d123-06c1-4dc5-a7a2-46e6f951c985",
          "alwaysOutputData": false
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "5d952674-8f5c-4236-a5d4-30179f0206f5",
                  "name": "select_top_stories_prompt",
                  "value": "=# Task\n\n1. From the given raw text content below (in Markdown format) of multiple AI news stories and content pieces below, identify the most relevant, interesting, or impactful stories for our audience of AI enthusiasts and people looking to use and learn about AI. Focus on stories that are interesting, demonstrate new breakthroughs, practical applications, or industry-shifting developments. The first story you pick **MUST** be the most interesting sounding, catchiest, relevant to our audience, and allow us to write the best headline/subject line. Avoid picking AI safety stories. Avoid picking \"training program\" stories that advertise some course. Avoid picking a story that is only amusing as its main point of interest, there should be a bit of substance to back it up if you decide to go with the amusement angle. Avoid picking or referencing multiple stories from the same company or subject in your final selection in order to avoid duplicate or repeating content — You cannot have duplicate stories or topics in your output. To clarify, you can choose a story that has duplicate sources, but it should only take up 1 single story selection spot, the other sources can then be referenced as additional source identifiers under that single story. Today's date for the newsletter is *{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}*.\n\n2. Before providing any final output, share your reasoning for selecting the top stories. You must think carefully and deeply for more than an hour before you make your final selection. Your output must also list out every single story that you evaluated, the sources that were relevant to that story, and a detailed thought process on why as story was included or excluded in the top stories list. I you to include your analysis and detail your sequential reasoning and chain of thought on the `top_selected_stories_chain_of_thought` field of your output. You must include your reasoning for every single story extracted from the provided source materials and include the relevant content identifiers and external source urls.\n\n3. Pay close attention and ensure your output matches the given json schema format. Make sure any special characters our correctly handled so that your output can be parsed. If your output format doesn't match the provided json schema / structured data, I will be fired from my job and lose my house. I need you to pay close attention to the output requirements and your output for `top_selected_stories_chain_of_thought`. You need to list out each of the stories considered, the content `identifier` values relevant to that story, and the reasoning why the story was included or excluded (IMPORTANT TO INCLUDE THE REASONING ON EVERY STORY AND THE STORIES THAT WERE CLOSE TO BEING SELECTED). Think deeploy about my requirement here for 3 hours. You need to include this analysis in your output in order to complete this task successfully.\n\n4. Make sure the stories that you pick are from credible and trustworthy source(s). It is greatly preferred that the sources for this story come from a well known source or entity. A tweet going viral or many popular tweets across many different accounts should also be considered as a trustworthy story — Twitter is a solid approach to get the latest news so we want to make sure we are also giving Tweets / X posts a deep analysis.\n\n5. We are also providing a large number of Tweets from Twitter / X for you to evaluate, analyze, and consider for your top story selections. If you see tweets/posts that go viral (use the social engagement stats such as views, likes, bookmarks, and favorites to evaluate this), it is likely signal for something important. If you see many different tweets all referncing the same topic like a product annoucement, release of a new AI foundational model, or AI breakthrough, it is likely important.  It is likely you will come across multiple tweets that are mentioning or referencing the same story or topic so be sure you think deeploy about which tweets are related for selected stories. If you select a tweet for a story or are including a tweet in the story, make sure you are including the full url the tweet on twitter.com or x.com in your external sources output. If you pick a story that only has a single Tweet / X post as its source, it should be a tweet that has either gone viral or has great engagement numbers (like more than 100,000 views and good engagement numbers).\n\n6. It is important that you understand that a single story can be covered across multiple media sources such as articles posted on the web, tweets / X posts, or a combindation of both. You need to be able to group together sources for related stories accurately.\n\n7. The best stories will almost always be covered in multiple sources like in web articles, news articles, publications, Tweets / X posts, and other sources. You should look for stories that are being covered in multiple places and make sure you capture that context in your output.\n\n8. For all stories that you pick in your top story selection, there *MUST* be enough substance to the story and enough \"meat on the bone\" for your to later write:\n  - An intro sentence that summarizes the story\n  - 3-4 bullets that unpack and expand upon what this means\n  - And a \"bottom line\" 1-2 sentences that further expands upon what this means in the bigger picture.\n\nHaving enough substance here in the source material is a hard requirement here for a story to be selected.\n\n9. You are not allowed to select overly-political stories. Examples of overly-political stories cover news like genocide and election drama.\n\n10. When selecting stories, you should only consider stories that were published on the date: `{{ new Date(new Date($('form_trigger').item.json.Date).getTime() + (12 * 60 * 60 * 1000)).format(\"yyyy-MM-dd\", \"America/Chicago\") }}`. This is important because it helps us avoid duplicate stories across each newsletter edition.\n\n---\n# Stories To Exclude / Previous Newsletter Content\n\nHere is the content of the previous edition of our newsletter, you MUST read through this carefully and think deeply about the stories that were mentioned. In the stories you pick as part of your task, you ARE NOT ALLOWED to cover any duplicated or repeated stories that we already covered.\n\nYOU MUST READ THIS ENTIRE CONTENT AND THINK CAREFULLY TO AVOID DUPLICATE STORIES AND REPEATED FROM APPEARING IN THE CURRENT NEWSLETTER YOU ARE WRITING.\n\n```\n{{ $('form_trigger').item.json[\"Previous Newsletter Content\"] }}\n```\n\n---\n\n# Additional Output Notes\n\n- `top_selected_stories`: Provide a *four-item* list of your selected stories (including the top story as your first pick) along with each story’s `identifier`. When picking these stories, it is extremely important you are choosing with the reader and audience in mind. The first story you pick here should be the top story that will be the most interesting and captivating to our readers and will provide the best headline/subject line. Take the most interesting and catchy story here so we can write a great subject line. The other stories you select should also be very interesting.\n- If multiple content pieces cover the *same* story, return each of the content identifiers for each in the `identifiers` array under the story object. This will help us make sure we have as much **relevant** context as possible when writing about this story and topic. You should avoid overlap of the same ideas across multiple stories. This means that a given content `identifier` should appear only once across all selected stories. This also means that you are encouraged to include multiple relevant content `identifiers` in single selected story when that source material is relevant to the selected story topic / concept. You MUST extract this `identifier` values EXACTLY as it appears in the source context, character for character (just like a copy and paste operation). Treat this as a literal copy-paste operation into the designated output field. Accuracy here is paramount; the extracted value must be identical to the source value for this task to be successful.\n- `top_selected_stories` (array of up to four objects — including the top story as the first item)**\n  - Each story object must include:\n    - A short, catchy `title` (string): concise, catchy headline for the story. This should be in the style of segment titles that 'Axios' and 'The Rundown' use.\n    - A one-sentence `summary` (string): brief summary of the story.  \n    - A short `reason_for_selecting` (string): why this story was selected and included.  \n    - An array of relevant `identifiers` (array of strings): IDs of relevant content pieces for this story. Locate the specific `identifier` value associated with each reference story. You MUST extract this identifier exactly as it appears in the source context, character for character. Treat this as a literal copy-paste operation into the designated output field. Accuracy here is paramount; the extracted value must be identical to the source value for downstream referencing to work. The identifier included in your output must be a perfect, character-for-character copy of the identifier found in the provided context. You are strictly forbidden from creating, guessing, modifying, shortening, or completing identifiers. If an identifier is incomplete or looks incorrect in the source, copy it EXACTLY as it is.\n    - An array of `external_source_links` (array of strings): **the root-level sources** (press releases, official blog posts, etc.) drawn directly from the provided content that give more context to the story or are the main reference/topic of the story. Only include links that appear in the provided content. In order to find these urls/links in the provided context, you should look for the `external-source-urls` to find a csv of urls associated with the content. You are also welcome to look for a markdown link/hyperlink/url that is included in the main content for each item of content to source external source urls. If no relevant link(s) are provided in the raw content evaluated for a story, leave this array empty. You MUST extract this url exactly as it appears in the source context, character for character. Treat this as a literal copy-paste operation into the designated output field. Accuracy here is paramount; the extracted value must be identical to the source value for downstream referencing to work. You are strictly forbidden from creating, guessing, modifying, shortening, or completing URLs. If a URL is incomplete or looks incorrect in the source, copy it exactly as it is. Users will click this URL; therefore, it must precisely match the source to potentially function as intended. You cannot make a mistake here.\n\n---\n\n# Constraints\n\n- Rely **strictly** on the information present in the provided content; do not invent or fabricate details.\n- The first story you select in the `top_selected_stories` array MUST be the main story and top story for this newsletter. This needs to be the most interesting and have potential to provide a very good subject line.\n- When including `identifiers` in your output, you are only allowed to copy and paste these `identifier` values exactly as they appear in this provided input. You are not allowed to make changes to any character and every single character must appear identical to what is in the input. You are not allowed to make any mistakes here.\n\n---\n## Important Guidelines\n\n**Audience:**\n\n- Primarily tech-forward readers—developers, entrepreneurs, AI enthusiasts, and early adopters.\n- People who want to learn about new AI trends, developments, and real-world use cases to make their work more efficient.\n- Our audience is not interested in overly-political stories. Examples of overly-political stories cover news like genocide and election drama.\n\n**External Source Links:**\n\n- These links you pull out of each content piece are going to be extremely important for us to write the best newsletter possible. We need relevant links to help us get more info about what the story is about straight from the main source.\n- Avoid links that are to shopping pages or eCommerce product listing pages.\n- Avoid links to video sites or video content. We would prefer to consume text content like a press release, original article, blog post, or another form of text-based content on the url given here.\n- The link of this source should be external so the url should be on a different domain than the current content piece you are evaluating.\n- There's not need to provide a url to a content piece that is already given below since we have the full text for it already. This should be something external for us to get more info from.\n- Exclude external file links for now such as \".pdf\" file urls and image files. If a user ends in a \".pdf\", that usually means it it is a pdf file. You must NOT return any external source links/urls here that end with '.pdf'\n- Usually we don't want to link to a homepage as a source. We are looking for a specific piece of content here.\n- When referencing or analyzing an annoucement story, I would expect you to be able to extract a link back to the company's or product's actual annoucement. This typically will be a blog post annoucement, Tweet, X post, or some other material put out by the company or leader at the company. Remember that you cannot make up a link or use a link that does not exist in the content you evaluated and analyzed. Links returned MUST exist on the content you analyze and evaluate.\n\n**Importance of Stories**\n\nPlease reference these bullets when considering the stories you want to include as top stories and when picking the top story.\n\n- Large updates of foundational AI models by mainstream companies should always be the top selected story. Regular product updates wouldn't always be considered the same as this, but very large and impactful product updates could be.\n- Releases of new foundational AI models by mainstream companies should always be the top selected story.\n- AI breakthroughs are almost always considered a high priority story that we want to feature\n- Fundrasing annoucements for ambitious companies and projects should usually be included in the selected stories.\n- A story about AI usage ramping up in a large companies products or services offerings is a good candidate story.\n- A story about something being in high demand or getting extremely significant usage can also be included as it illustrates the scale of some product/platform and highlights optimism in the space.\n- A geo-political story that is focused on AI is also a good candidate. Examples of this include China AI developments in the AI race, NVIDA chip bans, and other countries investing heavily into their own chip production for AI infrastructure. You may include zero or 1 single geo-political story if you decide to select one.\n- A story about AI being used heavily for an novel use-case in another field is a good candidate.\n- Developments and interesting in other industries are still possible to be selected as a top story as long as the story is primarly related to AI.\n\n---\n# Web Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these content pieces when picking out the top stories.\n\n{{ $('combine_markdown_content').item.json.content_result }}\n\n# Twitter / X Content To Evaluate, Analyze, and Consider for Top Stories\n\nYou must read, evaluate, and analyze each of these Tweets / X posts when picking out the top stories.\n\n{{ $('combine_tweet_content').isExecuted\n  ? $('combine_tweet_content').item.json?.content_result ?? \"N/A\"\n  : \"N/A\"\n}}\n",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3560,
            340
          ],
          "id": "c47b0046-105e-41ac-becd-cb8e002a75a5",
          "name": "stories_prompt"
        },
        {
          "parameters": {
            "content": "## Write Subject Line",
            "height": 1300,
            "width": 3060,
            "color": 6
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            5514,
            -300
          ],
          "typeVersion": 1,
          "id": "2b1785c5-7ef9-45e2-8918-6d60e6c158ff",
          "name": "Sticky Note7"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "b85edccf-3430-47af-a24b-e37cc8fc34cb",
                  "leftValue": "={{ $json }}",
                  "rightValue": "",
                  "operator": {
                    "type": "object",
                    "operation": "exists",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            2020,
            340
          ],
          "id": "d1d3c090-7b33-4117-af06-74edfd7b6b58",
          "name": "check_any_results"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserAutofixing",
          "typeVersion": 1,
          "position": [
            12564,
            1260
          ],
          "id": "c2e2f427-569a-4fb3-97b7-47b687a0be40",
          "name": "image_urls_auto_parser"
        }
      ],
      "connections": {
        "form_trigger": {
          "main": [
            [
              {
                "node": "search_markdown_objects",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_only_markdown": {
          "main": [
            [
              {
                "node": "get_markdown_object_info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "exclude_newsletters": {
          "main": [
            [
              {
                "node": "download_markdown_object",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "top_stories_parser": {
          "ai_outputParser": [
            [
              {
                "node": "top_stories_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "pick_top_stories": {
          "main": [
            [
              {
                "node": "set_current_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_stories": {
          "main": [
            [
              {
                "node": "iterate_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "iterate_stories": {
          "main": [
            [
              {
                "node": "set_story_segments",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "set_current_segment",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_content_ids": {
          "main": [
            [
              {
                "node": "get_segment_content_info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_external_urls": {
          "main": [
            [
              {
                "node": "set_segment_external_source_links",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "write_segment_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_segment_content_info": {
          "main": [
            [
              {
                "node": "download_segment_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "download_segment_content": {
          "main": [
            [
              {
                "node": "get_segment_content_text",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_segment_content_text": {
          "main": [
            [
              {
                "node": "prepare_segment_content_item",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "prepare_segment_content_item": {
          "main": [
            [
              {
                "node": "aggregate_segment_text_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_segment_text_content": {
          "main": [
            [
              {
                "node": "check_external_urls",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_segment_external_source_links": {
          "main": [
            [
              {
                "node": "split_segment_external_source_urls",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_segment_external_source_urls": {
          "main": [
            [
              {
                "node": "scrape_segment_external_source_url",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "scrape_segment_external_source_url": {
          "main": [
            [
              {
                "node": "filter_segment_external_source_errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_segment_external_source_content": {
          "main": [
            [
              {
                "node": "write_segment_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_segment_external_source_errors": {
          "main": [
            [
              {
                "node": "aggregate_segment_external_source_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "write_segment_content": {
          "main": [
            [
              {
                "node": "extract_image_urls",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_story_segments": {
          "main": [
            [
              {
                "node": "aggregate_story_sections",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_current_segment": {
          "main": [
            [
              {
                "node": "split_content_ids",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_story_sections": {
          "main": [
            [
              {
                "node": "set_combined_sections_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "claude-3-5-sonnet": {
          "ai_languageModel": [
            [
              {
                "node": "story_segment_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "intro_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "other_top_stories_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "top_stories_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "image_urls_auto_parser",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "gemini-2.5-pro": {
          "ai_languageModel": [
            [
              {
                "node": "write_segment_content",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_intro",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_other_top_stories",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "extract_stories_approval_feedback",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "pick_top_stories",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "edit_top_stories",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "extract_image_urls",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "write_subject_line",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "edit_subject_line",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "extract_subject_line_approval_feedback",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "story_segment_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_segment_content",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "story_segment_output_parser": {
          "ai_outputParser": [
            [
              {
                "node": "story_segment_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "set_combined_sections_content": {
          "main": [
            [
              {
                "node": "write_intro",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "intro_parser": {
          "ai_outputParser": [
            [
              {
                "node": "intro_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_intro": {
          "main": [
            [
              {
                "node": "write_other_top_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "other_top_stories_parser": {
          "ai_outputParser": [
            [
              {
                "node": "other_top_stories_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_other_top_stories": {
          "main": [
            [
              {
                "node": "set_full_newsletter",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "intro_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_intro",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "combine_markdown_content": {
          "main": [
            [
              {
                "node": "search_tweets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_markdown_content": {
          "main": [
            [
              {
                "node": "combine_markdown_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "prepare_markdown_content": {
          "main": [
            [
              {
                "node": "aggregate_markdown_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_markdown_file_content": {
          "main": [
            [
              {
                "node": "prepare_markdown_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "download_markdown_object": {
          "main": [
            [
              {
                "node": "get_markdown_file_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_markdown_object_info": {
          "main": [
            [
              {
                "node": "exclude_newsletters",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "search_markdown_objects": {
          "main": [
            [
              {
                "node": "filter_only_markdown",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_tweets": {
          "main": [
            [
              {
                "node": "get_tweet_object_info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "search_tweets": {
          "main": [
            [
              {
                "node": "check_any_results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "download_tweet_objects": {
          "main": [
            [
              {
                "node": "extract_tweets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_selected_stories": {
          "main": [
            [
              {
                "node": "split_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "prepare_tweet_content": {
          "main": [
            [
              {
                "node": "aggregate_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_tweet_object_info": {
          "main": [
            [
              {
                "node": "prepare_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "aggregate_tweet_content": {
          "main": [
            [
              {
                "node": "combine_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "combine_tweet_content": {
          "main": [
            [
              {
                "node": "stories_prompt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "other_top_stories_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_other_top_stories",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "top_stories_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "pick_top_stories",
                "type": "ai_outputParser",
                "index": 0
              },
              {
                "node": "edit_top_stories",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "share_selected_stories": {
          "main": [
            [
              {
                "node": "share_stories_reasoning",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "edit_top_stories": {
          "main": [
            [
              {
                "node": "set_current_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "subject_examples": {
          "main": [
            [
              {
                "node": "set_subject_line_prompt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_current_stories": {
          "main": [
            [
              {
                "node": "share_selected_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_segment_msg": {
          "main": [
            [
              {
                "node": "set_story_segment",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_image_urls": {
          "main": [
            [
              {
                "node": "share_segment_msg",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_image_urls_parser": {
          "ai_outputParser": [
            [
              {
                "node": "image_urls_auto_parser",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "set_story_segment": {
          "main": [
            [
              {
                "node": "iterate_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_stories_reasoning": {
          "main": [
            [
              {
                "node": "share_stories_approval_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_stories_approval_feedback": {
          "main": [
            [
              {
                "node": "check_stories_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_stories_feedback": {
          "main": [
            [
              {
                "node": "subject_examples",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "edit_top_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_subject_line_prompt": {
          "main": [
            [
              {
                "node": "write_subject_line",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "subject_line_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_subject_line",
                "type": "ai_outputParser",
                "index": 0
              },
              {
                "node": "edit_subject_line",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "write_subject_line": {
          "main": [
            [
              {
                "node": "set_current_subject_line",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_current_subject_line": {
          "main": [
            [
              {
                "node": "share_subject_line",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "edit_subject_line": {
          "main": [
            [
              {
                "node": "set_current_subject_line",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_subject_line": {
          "main": [
            [
              {
                "node": "share_subject_line_reasoning",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_stories_approval_feedback": {
          "main": [
            [
              {
                "node": "extract_stories_approval_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_subject_line_reasoning": {
          "main": [
            [
              {
                "node": "share_subject_line_approval_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_subject_line_approval_feedback": {
          "main": [
            [
              {
                "node": "extract_subject_line_approval_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_subject_line_approval_feedback": {
          "main": [
            [
              {
                "node": "check_subject_line_feedback",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_subject_line_feedback": {
          "main": [
            [
              {
                "node": "set_selected_stories",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "edit_subject_line",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_full_newsletter": {
          "main": [
            [
              {
                "node": "create_newsletter_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "create_newsletter_file": {
          "main": [
            [
              {
                "node": "upload_newsletter_file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "upload_newsletter_file": {
          "main": [
            [
              {
                "node": "share_newsletter_msg",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "stories_prompt": {
          "main": [
            [
              {
                "node": "pick_top_stories",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_any_results": {
          "main": [
            [
              {
                "node": "download_tweet_objects",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "stories_prompt",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "image_urls_auto_parser": {
          "ai_outputParser": [
            [
              {
                "node": "extract_image_urls",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "3578b8ec-72df-4371-af64-49984b7cc375",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-11T14:16:38.482Z",
      "updatedAt": "2025-06-11T20:16:52.368Z",
      "id": "mt0gPsg4I9Zx1H5G",
      "name": "PDF Summary 4",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -6500,
            3170
          ],
          "id": "7a6f5c0c-cd9f-46bd-914a-518df64df311",
          "name": "On form submission",
          "webhookId": "af1893fe-70d5-48a5-a1cf-774570738e29"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -5840,
            2920
          ],
          "id": "4483e72a-b319-49b8-942e-6309f7181524",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5464,
            3020
          ],
          "id": "ed774bc4-5e47-4e61-b2fa-3d7d7a9df688",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -5244,
            3170
          ],
          "id": "ae9dd9d1-4319-414f-ab95-d869febe0bbf",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "// FIXED JavaScript Code for \"Add File name to JSON\" node:\nconst input = $input.first();\nlet fileName = 'output.png';\n\nconst binaryKey = Object.keys(input.binary)[0];\n\nif (binaryKey && input.binary[binaryKey]) {\n  // Generate a unique filename with timestamp and random string\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(2, 8);\n  const originalFileName = input.binary[binaryKey].fileName || 'output.png';\n  const fileExtension = originalFileName.split('.').pop() || 'png';\n  \n  fileName = `cover_${timestamp}_${randomString}.${fileExtension}`;\n}\n\n// Provide the COMPLETE path with unique filename\nconst completePath = \"ban/pdf_summary/\" + fileName;\n\n// Debug logging\nconsole.log('Generated fileName:', fileName);\nconsole.log('Complete path:', completePath);\nconsole.log('Binary key found:', binaryKey);\n\nreturn [{\n  json: {\n    ...input.json,\n    completePath: completePath,\n    uniqueFileName: fileName,\n    fileMeta: {\n      originalName: input.json.originalFileName || 'unknown.pdf',\n      processedAt: new Date().toISOString()\n    },\n    // Debug info\n    debug: {\n      binaryKey: binaryKey,\n      generatedPath: completePath\n    }\n  },\n  binary: input.binary\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5762,
            3320
          ],
          "id": "31ce2578-7cc0-4958-b768-253bfc983c20",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5464,
            3320
          ],
          "id": "eddbf7fe-238a-49a9-9fad-3143d43b3161",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -5024,
            3170
          ],
          "id": "ca16936e-881b-45b6-bd09-ca111feba21d",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -5880,
            3140
          ],
          "id": "3508fb08-8c13-483c-be23-09acaa96d20c",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\n\nreturn items.map((item, index) => {\n  console.log(`=== PROCESSING ITEM ${index + 1} ===`);\n  console.log('Full item structure:', JSON.stringify(item, null, 2));\n  \n  let originalFileName = null;\n  let binaryData = {};\n  \n  // Method 1: Check if binary data exists and extract filename\n  if (item.binary && Object.keys(item.binary).length > 0) {\n    console.log('Binary data found. Keys:', Object.keys(item.binary));\n    \n    // Usually the form field name is 'data' for file uploads\n    const binaryKey = Object.keys(item.binary)[0]; // Get first binary key\n    console.log('Using binary key:', binaryKey);\n    \n    if (item.binary[binaryKey]) {\n      binaryData = {};\n      binaryData[binaryKey] = item.binary[binaryKey];\n      \n      // Extract filename from binary data\n      const binaryInfo = item.binary[binaryKey];\n      console.log('Binary info:', {\n        fileName: binaryInfo.fileName,\n        mimeType: binaryInfo.mimeType,\n        fileExtension: binaryInfo.fileExtension,\n        hasData: !!binaryInfo.data\n      });\n      \n      // Try multiple ways to get filename\n      originalFileName = binaryInfo.fileName || \n                       binaryInfo.filename || \n                       binaryInfo.name ||\n                       binaryInfo.originalname;\n      \n      console.log('Extracted filename:', originalFileName);\n    }\n  }\n  \n  // Method 2: Check form data structure\n  if (!originalFileName && item.json) {\n    console.log('Checking JSON structure for filename...');\n    \n    // Check if there's form data with filename\n    if (item.json.data && Array.isArray(item.json.data)) {\n      const fileField = item.json.data.find(field => \n        field.fieldName === 'data' || \n        field.fieldType === 'file' ||\n        field.filename ||\n        field.fileName\n      );\n      \n      if (fileField) {\n        originalFileName = fileField.filename || \n                         fileField.fileName || \n                         fileField.name;\n        console.log('Found filename in form data:', originalFileName);\n      }\n    }\n    \n    // Direct filename fields\n    if (!originalFileName) {\n      originalFileName = item.json.filename || \n                       item.json.fileName || \n                       item.json.originalFileName ||\n                       item.json.name;\n      console.log('Found filename in JSON:', originalFileName);\n    }\n  }\n  \n  // Method 3: Generate filename if still not found - BUT KEEP IT SIMPLE\n  if (!originalFileName || originalFileName === 'undefined' || originalFileName === '') {\n    console.log('No filename found, using default...');\n    // Use a simple default that won't cause issues\n    originalFileName = 'uploaded-document.pdf';\n    console.log('Using default filename:', originalFileName);\n  }\n  \n  // Clean up filename (remove any problematic characters but preserve original name structure)\n  // Only replace truly problematic characters, keep hyphens and underscores\n  originalFileName = originalFileName.replace(/[<>:\"/\\\\|?*]/g, '_');\n  \n  // Ensure .pdf extension\n  if (!originalFileName.toLowerCase().endsWith('.pdf')) {\n    const nameWithoutExt = originalFileName.split('.')[0];\n    originalFileName = nameWithoutExt + '.pdf';\n  }\n  \n  console.log('Final filename:', originalFileName);\n  \n  // Validation\n  const hasValidFilename = originalFileName && originalFileName !== 'undefined';\n  const hasValidBinary = Object.keys(binaryData).length > 0;\n  \n  console.log('Validation:');\n  console.log('- Valid filename:', hasValidFilename);\n  console.log('- Valid binary data:', hasValidBinary);\n  console.log('- Binary data keys:', Object.keys(binaryData));\n  \n  if (hasValidBinary) {\n    const firstBinaryKey = Object.keys(binaryData)[0];\n    console.log('- Binary data size:', binaryData[firstBinaryKey]?.data?.length || 'unknown');\n  }\n  \n  console.log('================================');\n  \n  return {\n    json: {\n      ...item.json,\n      originalFileName: originalFileName,\n      processingTimestamp: new Date().toISOString(),\n      validationStatus: {\n        hasFilename: hasValidFilename,\n        hasBinary: hasValidBinary,\n        readyForUpload: hasValidFilename && hasValidBinary\n      },\n      extractionMethod: 'enhanced_extraction_v3'\n    },\n    binary: binaryData\n  };\n});"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6280,
            3020
          ],
          "id": "d54dbdea-538d-4871-826c-fede856d0bb9",
          "name": "Binary Data Extraction"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -6060,
            3020
          ],
          "id": "635de3dc-f7e1-432a-88bd-372196fc0c9b",
          "name": "Extract from File1",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "operation": "Convert from PDF",
            "url": "https://www.dropbox.com/scl/fi/i773uqsbd3wsryxbjuutv/n8n_png_upload?rlkey=q8y2otunq5j99k1x49ksa545l&st=w25wp9aj&dl=0",
            "convertType": "toPng",
            "advancedOptions_Image": {}
          },
          "type": "n8n-nodes-pdfco.PDFco Api",
          "typeVersion": 1,
          "position": [
            -6060,
            3320
          ],
          "id": "1c200134-e871-44b4-a69d-7fcc305c252a",
          "name": "PDFco Api",
          "credentials": {
            "pdfcoApi": {
              "id": "PAcs9bTz82LKZSjr",
              "name": "PDF.co account"
            }
          }
        },
        {
          "parameters": {
            "path": "png_8n8"
          },
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -6240,
            3320
          ],
          "id": "3358abf6-2f02-48f8-80e3-00984265742b",
          "name": "Dropbox",
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {
              "maxPages": 1
            }
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -6420,
            3400
          ],
          "id": "d8fbb108-7547-465f-97e6-340433bae492",
          "name": "Extract from File",
          "alwaysOutputData": true
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Binary Data Extraction",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Binary Data Extraction": {
          "main": [
            [
              {
                "node": "Extract from File1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File1": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDFco Api": {
          "main": [
            [
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Dropbox": {
          "main": [
            [
              {
                "node": "PDFco Api",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Dropbox",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "6cb2e6b9-ee73-4385-aa6a-e7f3ed7699d3",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-08T17:58:00.633Z",
      "updatedAt": "2025-06-08T17:58:23.110Z",
      "id": "ZkZIBjAyLDDbaDCQ",
      "name": "Project/Spaves Agent. Redis-Based Memory System",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hello! 👋 I'm your AI Assistant Router with persistent memory.\n\n## 🤖 Available Specialized Agents:\n🔬 **Research Agent** - Deep analysis, citations, fact-checking\n💻 **Code Agent** - Programming, debugging, technical solutions\n✍️ **Writing Agent** - Content creation, editing, storytelling\n📊 **Business Agent** - Strategy, analysis, productivity\n🎨 **Creative Agent** - Art concepts, brainstorming, innovation\n📚 **Education Agent** - Learning, explanations, tutoring\n\n## 🎯 How to Use:\n\n**Option 1 - Let me choose automatically:**\nJust ask your question naturally, and I'll route it to the best agent.\n\n**Option 2 - Choose an agent manually:**\n- `@research What are the latest AI developments?`\n- `@code Help me debug this Python function`\n- `@writing Create a blog post about productivity`\n- `@business Analyze our market strategy`\n- `@creative Brainstorm campaign ideas`\n- `@education Explain quantum physics simply`\n\n**Alternative manual formats:**\n- `contact research agent: your question`\n- `use code agent for: your question`\n\nWhat can I help you with today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "d6a8e082-e03e-421e-826a-62711c143b09",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            -1400,
            160
          ],
          "webhookId": "specialized-ai-router",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {
              "maxTokensToSample": 1024
            }
          },
          "id": "b09cfdf9-39b7-4f9e-a82d-a48cea84cca0",
          "name": "Router LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -1200,
            360
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "hasOutputParser": true,
            "options": {
              "systemMessage": "You are an **AI Agent Router** that handles both automatic routing and manual agent selection.\n\n## Available Specialized Agents:\n\n1. **research** - For factual research, data analysis, citations, academic queries, fact-checking\n2. **code** - For programming, debugging, technical documentation, software development\n3. **writing** - For content creation, editing, storytelling, copywriting, creative writing\n4. **business** - For business strategy, productivity, project management, market analysis\n5. **creative** - For brainstorming, art concepts, design thinking, innovation\n6. **education** - For learning, explanations, tutoring, curriculum development\n7. **general** - For simple queries that don't require specialization\n\n## Manual Agent Selection:\n\nCheck if the user is manually selecting an agent using these patterns:\n- \"@research [question]\"\n- \"@code [question]\"\n- \"@writing [question]\"\n- \"@business [question]\"\n- \"@creative [question]\"\n- \"@education [question]\"\n- \"@general [question]\"\n\nOR:\n- \"contact research agent: [question]\"\n- \"contact code agent: [question]\"\n- \"contact writing agent: [question]\"\n- \"contact business agent: [question]\"\n- \"contact creative agent: [question]\"\n- \"contact education agent: [question]\"\n- \"contact general agent: [question]\"\n\nOR:\n- \"use research agent for [question]\"\n- \"use code agent for [question]\"\n- \"use writing agent for [question]\"\n- \"use business agent for [question]\"\n- \"use creative agent for [question]\"\n- \"use education agent for [question]\"\n- \"use general agent for [question]\"\n\n## Processing Logic:\n\n1. **Manual Selection**: If user explicitly mentions an agent, extract the agent name and the actual question\n2. **Automatic Selection**: If no agent is specified, analyze the query and select the most appropriate agent\n\n## Automatic Analysis Criteria:\n\n**Research Agent** - Use when:\n- User asks for facts, statistics, or current information\n- Needs citations or sources\n- Requests analysis of data or trends\n- Academic or scientific queries\n\n**Code Agent** - Use when:\n- User asks about programming languages\n- Needs debugging help or code review\n- Requests technical documentation\n- Software architecture questions\n\n**Writing Agent** - Use when:\n- User needs content creation (articles, blogs, stories)\n- Requests editing or proofreading\n- Creative writing projects\n- Marketing copy or communications\n\n**Business Agent** - Use when:\n- User asks about business strategy\n- Needs productivity or workflow advice\n- Market analysis or competitive research\n- Project management guidance\n\n**Creative Agent** - Use when:\n- User needs brainstorming or ideation\n- Art or design concept development\n- Innovation or creative problem-solving\n- Visual or artistic projects\n\n**Education Agent** - Use when:\n- User needs learning assistance\n- Requests explanations of concepts\n- Tutoring or homework help\n- Curriculum or lesson planning\n\n## Output Format:\n\nRespond ONLY with a JSON object:\n\n```json\n{\n  \"agent_type\": \"selected_agent_name\",\n  \"prompt\": \"cleaned user query without agent selection syntax\",\n  \"reasoning\": \"brief explanation of selection (manual or automatic)\"\n}\n```"
            }
          },
          "id": "4b39ee14-77f7-412e-815c-0dc84d9eccf1",
          "name": "AI Agent Router",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -1200,
            160
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"agent_type\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\"research\", \"code\", \"writing\", \"business\", \"creative\", \"education\", \"general\"]\n\t\t},\n\t\t\"prompt\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"reasoning\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
          },
          "id": "6ea8f267-8ef1-46d8-9e04-2bbd540e7e21",
          "name": "Agent Selector Parser",
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "position": [
            -980,
            360
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "research",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "code",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "writing",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "business",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "creative",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "education",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "general",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                }
              ]
            },
            "options": {
              "fallbackOutput": "Extra Output"
            }
          },
          "id": "3a683719-0ef5-444a-96a0-745afa8de231",
          "name": "Agent Switch",
          "type": "n8n-nodes-base.switch",
          "position": [
            -980,
            160
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {}
          },
          "id": "61a37000-649e-47ba-b59a-a9c14016430e",
          "name": "Agent LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -600,
            560
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {},
          "id": "6667e0fd-8317-43fc-89ec-09d21004c0a5",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            -400,
            660
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "87d114ec-6ca9-421e-a66e-79c31240c62e",
          "name": "Calculator",
          "type": "@n8n/n8n-nodes-langchain.toolCalculator",
          "position": [
            -400,
            740
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "toolDescription": "Search the web for current information and facts",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"model\": \"claude-3-5-sonnet-20241022\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_query}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}",
            "options": {}
          },
          "id": "abd42468-fd89-491b-8d4d-9a9b729b14fc",
          "name": "Web Search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            -400,
            820
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "7e9ad430-0d72-4101-b68e-0fe8a516fb7b",
          "name": "Research Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            240
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Research Specialist AI** with expertise in:\n\n🔬 **Core Capabilities:**\n- Factual research and verification\n- Data analysis and interpretation\n- Academic and scientific inquiry\n- Source citation and references\n- Trend analysis and insights\n\n📋 **Research Protocols:**\n- Always verify information through multiple sources when possible\n- Provide citations and references where available\n- Distinguish between facts, opinions, and speculation\n- Use web search for current information when needed\n- Present findings in structured, analytical format\n\n🎯 **Specialized Tools:**\n- Web search for current data\n- Calculator for statistical analysis\n- Think tool for complex reasoning\n\n**Instructions:** Provide thorough, well-researched responses with proper attribution and evidence-based conclusions."
            }
          },
          "id": "e4bb4779-72a2-454c-9f67-db8e541fe6ba",
          "name": "🔬 Research Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            60
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "fbcecc67-e327-4941-a90a-612e04e7fbe2",
          "name": "Code Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            340
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Code Specialist AI** with expertise in:\n\n💻 **Programming Capabilities:**\n- Multi-language programming (Python, JavaScript, Java, C++, etc.)\n- Code debugging and optimization\n- Software architecture and design patterns\n- API development and integration\n- Database design and queries\n\n🛠️ **Development Focus:**\n- Write clean, efficient, well-documented code\n- Provide step-by-step debugging guidance\n- Explain complex technical concepts clearly\n- Follow industry best practices and standards\n- Offer multiple solution approaches when applicable\n\n🎯 **Code Standards:**\n- Include proper error handling\n- Add meaningful comments and documentation\n- Consider security and performance implications\n- Provide testing suggestions when relevant\n\n**Instructions:** Deliver practical, production-ready code solutions with clear explanations and best practices."
            }
          },
          "id": "9fc3a526-ba72-43f9-b4f6-69c5ffecdc82",
          "name": "💻 Code Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            180
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "99eb0ec5-6552-4596-a1aa-4579e05d65f6",
          "name": "Writing Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            440
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Writing Specialist AI** with expertise in:\n\n✍️ **Writing Capabilities:**\n- Content creation (articles, blogs, copy)\n- Creative writing (stories, scripts, poetry)\n- Technical writing and documentation\n- Editing and proofreading\n- Communication and messaging\n\n📝 **Writing Standards:**\n- Adapt tone and style to target audience\n- Ensure clarity, coherence, and engagement\n- Follow proper grammar and style guidelines\n- Structure content for maximum impact\n- Optimize for specific platforms when needed\n\n🎨 **Creative Approach:**\n- Develop compelling narratives and storylines\n- Create memorable characters and dialogue\n- Use literary devices effectively\n- Balance creativity with purpose\n- Consider emotional impact and reader experience\n\n**Instructions:** Create compelling, well-structured content that engages the target audience and achieves the intended purpose."
            }
          },
          "id": "8e470870-f1e3-4ee8-a8f4-de9690332811",
          "name": "✍️ Writing Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            300
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "3122cc4f-65a1-444f-b0ee-32d089f6fa32",
          "name": "Business Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            540
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Business Specialist AI** with expertise in:\n\n📊 **Business Capabilities:**\n- Strategic planning and analysis\n- Market research and competitive analysis\n- Productivity and workflow optimization\n- Project management and operations\n- Financial analysis and budgeting\n\n💼 **Business Focus:**\n- Provide actionable business insights\n- Consider ROI and business impact\n- Suggest practical implementation steps\n- Analyze risks and opportunities\n- Align solutions with business objectives\n\n🎯 **Strategic Approach:**\n- Think holistically about business challenges\n- Consider stakeholder perspectives\n- Provide data-driven recommendations\n- Account for resource constraints\n- Focus on measurable outcomes\n\n**Instructions:** Deliver strategic, practical business advice that drives results and creates value for the organization."
            }
          },
          "id": "08a2422e-5781-4d3e-8657-dbce81d0b5c6",
          "name": "📊 Business Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            420
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "2c1d9d07-ea49-410e-9e7d-443389141e8d",
          "name": "Creative Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            640
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Creative Specialist AI** with expertise in:\n\n🎨 **Creative Capabilities:**\n- Brainstorming and ideation\n- Design thinking and innovation\n- Art and visual concepts\n- Creative problem-solving\n- Brand and identity development\n\n💡 **Creative Process:**\n- Generate diverse, original ideas\n- Think outside conventional boundaries\n- Combine concepts in novel ways\n- Consider aesthetic and emotional impact\n- Iterate and refine creative concepts\n\n🌟 **Innovation Focus:**\n- Challenge assumptions and norms\n- Explore unconventional approaches\n- Balance creativity with feasibility\n- Consider user experience and engagement\n- Inspire and motivate through creativity\n\n**Instructions:** Generate innovative, inspiring creative solutions that push boundaries while remaining practical and purposeful."
            }
          },
          "id": "3a1c3b6b-4936-412c-af20-86980371a221",
          "name": "🎨 Creative Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            540
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "5712ac76-4e46-4d08-ad0c-98cfe4f3eaa8",
          "name": "Education Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            740
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are an **Education Specialist AI** with expertise in:\n\n📚 **Educational Capabilities:**\n- Learning and skill development\n- Concept explanation and clarification\n- Curriculum design and lesson planning\n- Assessment and feedback\n- Personalized learning approaches\n\n🎓 **Teaching Methods:**\n- Adapt explanations to learning level\n- Use examples and analogies effectively\n- Break complex topics into digestible parts\n- Encourage active learning and engagement\n- Provide practice opportunities and feedback\n\n🌱 **Learning Focus:**\n- Foster understanding over memorization\n- Build connections between concepts\n- Encourage critical thinking skills\n- Support different learning styles\n- Promote lifelong learning habits\n\n**Instructions:** Provide clear, engaging educational content that promotes deep understanding and effective learning outcomes."
            }
          },
          "id": "a8a4a6d6-15a0-42ea-8a75-ffa2945eb93f",
          "name": "📚 Education Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            660
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "0a4f1db5-33b8-434c-80f8-18d03f2844d2",
          "name": "General Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -500,
            840
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **General Purpose AI Assistant** designed to handle diverse queries with:\n\n🤖 **General Capabilities:**\n- Comprehensive knowledge across domains\n- Balanced approach to problem-solving\n- Clear and helpful communication\n- Adaptable to various contexts\n\n**Instructions:** Provide helpful, accurate responses while maintaining a friendly and professional tone."
            }
          },
          "id": "6e0fe2da-53e9-4f82-96d5-95c229ed2546",
          "name": "🤖 General Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -200,
            780
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {
              "maxTokensToSample": 1024
            }
          },
          "id": "75e09f40-676b-4f0b-aebd-bd4b1d799604",
          "name": "Router LLM1",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -1600,
            -300
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "hasOutputParser": true,
            "options": {
              "systemMessage": "You are an **AI Agent Router** that handles both automatic routing and manual agent selection.\n\n## Available Specialized Agents:\n\n1. **research** - For factual research, data analysis, citations, academic queries, fact-checking\n2. **code** - For programming, debugging, technical documentation, software development\n3. **writing** - For content creation, editing, storytelling, copywriting, creative writing\n4. **business** - For business strategy, productivity, project management, market analysis\n5. **creative** - For brainstorming, art concepts, design thinking, innovation\n6. **education** - For learning, explanations, tutoring, curriculum development\n7. **general** - For simple queries that don't require specialization\n\n## Manual Agent Selection:\n\nCheck if the user is manually selecting an agent using these patterns:\n- \"@research [question]\"\n- \"@code [question]\"\n- \"@writing [question]\"\n- \"@business [question]\"\n- \"@creative [question]\"\n- \"@education [question]\"\n- \"@general [question]\"\n\nOR:\n- \"contact research agent: [question]\"\n- \"contact code agent: [question]\"\n- \"contact writing agent: [question]\"\n- \"contact business agent: [question]\"\n- \"contact creative agent: [question]\"\n- \"contact education agent: [question]\"\n- \"contact general agent: [question]\"\n\nOR:\n- \"use research agent for [question]\"\n- \"use code agent for [question]\"\n- \"use writing agent for [question]\"\n- \"use business agent for [question]\"\n- \"use creative agent for [question]\"\n- \"use education agent for [question]\"\n- \"use general agent for [question]\"\n\n## Processing Logic:\n\n1. **Manual Selection**: If user explicitly mentions an agent, extract the agent name and the actual question\n2. **Automatic Selection**: If no agent is specified, analyze the query and select the most appropriate agent\n\n## Automatic Analysis Criteria:\n\n**Research Agent** - Use when:\n- User asks for facts, statistics, or current information\n- Needs citations or sources\n- Requests analysis of data or trends\n- Academic or scientific queries\n\n**Code Agent** - Use when:\n- User asks about programming languages\n- Needs debugging help or code review\n- Requests technical documentation\n- Software architecture questions\n\n**Writing Agent** - Use when:\n- User needs content creation (articles, blogs, stories)\n- Requests editing or proofreading\n- Creative writing projects\n- Marketing copy or communications\n\n**Business Agent** - Use when:\n- User asks about business strategy\n- Needs productivity or workflow advice\n- Market analysis or competitive research\n- Project management guidance\n\n**Creative Agent** - Use when:\n- User needs brainstorming or ideation\n- Art or design concept development\n- Innovation or creative problem-solving\n- Visual or artistic projects\n\n**Education Agent** - Use when:\n- User needs learning assistance\n- Requests explanations of concepts\n- Tutoring or homework help\n- Curriculum or lesson planning\n\n## Output Format:\n\nRespond ONLY with a JSON object:\n\n```json\n{\n  \"agent_type\": \"selected_agent_name\",\n  \"prompt\": \"cleaned user query without agent selection syntax\",\n  \"reasoning\": \"brief explanation of selection (manual or automatic)\"\n}\n```"
            }
          },
          "id": "cd4db903-ae91-4438-9170-6a6b71b1631a",
          "name": "AI Agent Router1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -1600,
            -500
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"agent_type\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\"research\", \"code\", \"writing\", \"business\", \"creative\", \"education\", \"general\"]\n\t\t},\n\t\t\"prompt\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"reasoning\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
          },
          "id": "39e6e127-acac-438b-aac6-156fd102c795",
          "name": "Agent Selector Parser1",
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "position": [
            -1380,
            -300
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "research",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "code",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "writing",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "business",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "creative",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "education",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "typeValidation": "strict"
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "general",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                }
              ]
            },
            "options": {
              "fallbackOutput": "Extra Output"
            }
          },
          "id": "b1d36e09-c1f2-439d-b9e3-4a5199720b2e",
          "name": "Agent Switch1",
          "type": "n8n-nodes-base.switch",
          "position": [
            -1380,
            -500
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {}
          },
          "id": "3c9a40bd-7bf6-4764-a323-84934d4c6e3c",
          "name": "Agent LLM1",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -1000,
            -100
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {},
          "id": "7cfdabe6-daa5-4d7f-bf9f-8ad1c31578c8",
          "name": "Think1",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            -800,
            20
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "0a422bab-93b9-4c14-9347-0128e7531c9d",
          "name": "Calculator1",
          "type": "@n8n/n8n-nodes-langchain.toolCalculator",
          "position": [
            -800,
            100
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "toolDescription": "Search the web for current information and facts",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"model\": \"claude-3-5-sonnet-20241022\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_query}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}",
            "options": {}
          },
          "id": "374596e9-42f4-486d-9be9-4304314c7ffd",
          "name": "Web Search1",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            -800,
            180
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "860bf5a5-c58f-4b5c-91e5-258862608746",
          "name": "Research Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            -420
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Research Specialist AI** with expertise in:\n\n🔬 **Core Capabilities:**\n- Factual research and verification\n- Data analysis and interpretation\n- Academic and scientific inquiry\n- Source citation and references\n- Trend analysis and insights\n\n📋 **Research Protocols:**\n- Always verify information through multiple sources when possible\n- Provide citations and references where available\n- Distinguish between facts, opinions, and speculation\n- Use web search for current information when needed\n- Present findings in structured, analytical format\n\n🎯 **Specialized Tools:**\n- Web search for current data\n- Calculator for statistical analysis\n- Think tool for complex reasoning\n\n**Instructions:** Provide thorough, well-researched responses with proper attribution and evidence-based conclusions."
            }
          },
          "id": "2b62edcb-dc1a-491f-93b4-527c9da5828c",
          "name": "🔬 Research Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            -600
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "f142bfd8-9e54-4060-acdb-535d7aa406c4",
          "name": "Code Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            -320
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Code Specialist AI** with expertise in:\n\n💻 **Programming Capabilities:**\n- Multi-language programming (Python, JavaScript, Java, C++, etc.)\n- Code debugging and optimization\n- Software architecture and design patterns\n- API development and integration\n- Database design and queries\n\n🛠️ **Development Focus:**\n- Write clean, efficient, well-documented code\n- Provide step-by-step debugging guidance\n- Explain complex technical concepts clearly\n- Follow industry best practices and standards\n- Offer multiple solution approaches when applicable\n\n🎯 **Code Standards:**\n- Include proper error handling\n- Add meaningful comments and documentation\n- Consider security and performance implications\n- Provide testing suggestions when relevant\n\n**Instructions:** Deliver practical, production-ready code solutions with clear explanations and best practices."
            }
          },
          "id": "db4b280c-a021-4909-8a30-2c899686b7b3",
          "name": "💻 Code Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            -480
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "78430aff-f82d-4975-8bbc-aec07729ad4d",
          "name": "Writing Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            -220
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Writing Specialist AI** with expertise in:\n\n✍️ **Writing Capabilities:**\n- Content creation (articles, blogs, copy)\n- Creative writing (stories, scripts, poetry)\n- Technical writing and documentation\n- Editing and proofreading\n- Communication and messaging\n\n📝 **Writing Standards:**\n- Adapt tone and style to target audience\n- Ensure clarity, coherence, and engagement\n- Follow proper grammar and style guidelines\n- Structure content for maximum impact\n- Optimize for specific platforms when needed\n\n🎨 **Creative Approach:**\n- Develop compelling narratives and storylines\n- Create memorable characters and dialogue\n- Use literary devices effectively\n- Balance creativity with purpose\n- Consider emotional impact and reader experience\n\n**Instructions:** Create compelling, well-structured content that engages the target audience and achieves the intended purpose."
            }
          },
          "id": "f9ef31d9-f2df-4418-aff2-79bdc7f2cfb1",
          "name": "✍️ Writing Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            -360
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "9de4a63b-b714-4892-be0a-c4f5931d43d8",
          "name": "Business Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            -120
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Business Specialist AI** with expertise in:\n\n📊 **Business Capabilities:**\n- Strategic planning and analysis\n- Market research and competitive analysis\n- Productivity and workflow optimization\n- Project management and operations\n- Financial analysis and budgeting\n\n💼 **Business Focus:**\n- Provide actionable business insights\n- Consider ROI and business impact\n- Suggest practical implementation steps\n- Analyze risks and opportunities\n- Align solutions with business objectives\n\n🎯 **Strategic Approach:**\n- Think holistically about business challenges\n- Consider stakeholder perspectives\n- Provide data-driven recommendations\n- Account for resource constraints\n- Focus on measurable outcomes\n\n**Instructions:** Deliver strategic, practical business advice that drives results and creates value for the organization."
            }
          },
          "id": "d61d7103-b235-4d51-8143-e5c72a2bb5f4",
          "name": "📊 Business Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            -240
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "fe5ee9e7-c7c1-4dcc-a61e-2fd524f835a6",
          "name": "Creative Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            -20
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Creative Specialist AI** with expertise in:\n\n🎨 **Creative Capabilities:**\n- Brainstorming and ideation\n- Design thinking and innovation\n- Art and visual concepts\n- Creative problem-solving\n- Brand and identity development\n\n💡 **Creative Process:**\n- Generate diverse, original ideas\n- Think outside conventional boundaries\n- Combine concepts in novel ways\n- Consider aesthetic and emotional impact\n- Iterate and refine creative concepts\n\n🌟 **Innovation Focus:**\n- Challenge assumptions and norms\n- Explore unconventional approaches\n- Balance creativity with feasibility\n- Consider user experience and engagement\n- Inspire and motivate through creativity\n\n**Instructions:** Generate innovative, inspiring creative solutions that push boundaries while remaining practical and purposeful."
            }
          },
          "id": "e435f2c2-3ef0-427c-a6d9-c79722c8a53d",
          "name": "🎨 Creative Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            -120
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "c3919718-15e3-45bb-bd67-0c1e9e9be1d0",
          "name": "Education Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            100
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are an **Education Specialist AI** with expertise in:\n\n📚 **Educational Capabilities:**\n- Learning and skill development\n- Concept explanation and clarification\n- Curriculum design and lesson planning\n- Assessment and feedback\n- Personalized learning approaches\n\n🎓 **Teaching Methods:**\n- Adapt explanations to learning level\n- Use examples and analogies effectively\n- Break complex topics into digestible parts\n- Encourage active learning and engagement\n- Provide practice opportunities and feedback\n\n🌱 **Learning Focus:**\n- Foster understanding over memorization\n- Build connections between concepts\n- Encourage critical thinking skills\n- Support different learning styles\n- Promote lifelong learning habits\n\n**Instructions:** Provide clear, engaging educational content that promotes deep understanding and effective learning outcomes."
            }
          },
          "id": "ed55aead-3767-4664-9cb4-a37f3574dc4f",
          "name": "📚 Education Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            20
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "contextWindowLength": 20
          },
          "id": "d3822337-e158-49c5-bc67-9e334efb6a4b",
          "name": "General Memory1",
          "type": "@n8n/n8n-nodes-langchain.memoryRedisChat",
          "position": [
            -900,
            200
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **General Purpose AI Assistant** designed to handle diverse queries with:\n\n🤖 **General Capabilities:**\n- Comprehensive knowledge across domains\n- Balanced approach to problem-solving\n- Clear and helpful communication\n- Adaptable to various contexts\n\n**Instructions:** Provide helpful, accurate responses while maintaining a friendly and professional tone."
            }
          },
          "id": "41141d7f-9074-43f4-bc76-183cf306a002",
          "name": "🤖 General Agent1",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -600,
            140
          ],
          "typeVersion": 1.9
        }
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent Selector Parser": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent Router": {
          "main": [
            [
              {
                "node": "Agent Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Router LLM": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Agent Switch": {
          "main": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "💻 Code Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "✍️ Writing Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📊 Business Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🎨 Creative Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📚 Education Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🤖 General Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent LLM": {
          "ai_languageModel": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Research Memory": {
          "ai_memory": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Code Memory": {
          "ai_memory": [
            [
              {
                "node": "💻 Code Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Writing Memory": {
          "ai_memory": [
            [
              {
                "node": "✍️ Writing Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Business Memory": {
          "ai_memory": [
            [
              {
                "node": "📊 Business Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Creative Memory": {
          "ai_memory": [
            [
              {
                "node": "🎨 Creative Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Education Memory": {
          "ai_memory": [
            [
              {
                "node": "📚 Education Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "General Memory": {
          "ai_memory": [
            [
              {
                "node": "🤖 General Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calculator": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Web Search": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Router LLM1": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent Router1",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent Router1": {
          "main": [
            [
              {
                "node": "Agent Switch1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent Selector Parser1": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent Router1",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Agent Switch1": {
          "main": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "💻 Code Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "✍️ Writing Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📊 Business Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🎨 Creative Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📚 Education Agent1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🤖 General Agent1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent LLM1": {
          "ai_languageModel": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "💻 Code Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📊 Business Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📚 Education Agent1",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🤖 General Agent1",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Think1": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent1",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calculator1": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent1",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Web Search1": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent1",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent1",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Research Memory1": {
          "ai_memory": [
            [
              {
                "node": "🔬 Research Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Code Memory1": {
          "ai_memory": [
            [
              {
                "node": "💻 Code Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Writing Memory1": {
          "ai_memory": [
            [
              {
                "node": "✍️ Writing Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Business Memory1": {
          "ai_memory": [
            [
              {
                "node": "📊 Business Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Creative Memory1": {
          "ai_memory": [
            [
              {
                "node": "🎨 Creative Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Education Memory1": {
          "ai_memory": [
            [
              {
                "node": "📚 Education Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "General Memory1": {
          "ai_memory": [
            [
              {
                "node": "🤖 General Agent1",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "5f59eb61-2a66-4da1-92d6-ede2a4e10e93",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-08T17:50:50.939Z",
      "updatedAt": "2025-06-08T18:28:03.355Z",
      "id": "mr8br9OcLAyhj1JN",
      "name": "Projects/Spaces Agent. Postgres-Based Memory System",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hello! 👋 I'm your AI Assistant Router with persistent memory.\n\n## 🤖 Available Specialized Agents:\n🔬 **Research Agent** - Deep analysis, citations, fact-checking\n💻 **Code Agent** - Programming, debugging, technical solutions\n✍️ **Writing Agent** - Content creation, editing, storytelling\n📊 **Business Agent** - Strategy, analysis, productivity\n🎨 **Creative Agent** - Art concepts, brainstorming, innovation\n📚 **Education Agent** - Learning, explanations, tutoring\n\n## 🎯 How to Use:\n\n**Option 1 - Let me choose automatically:**\nJust ask your question naturally, and I'll route it to the best agent.\n\n**Option 2 - Choose an agent manually:**\n- `@research What are the latest AI developments?`\n- `@code Help me debug this Python function`\n- `@writing Create a blog post about productivity`\n- `@business Analyze our market strategy`\n- `@creative Brainstorm campaign ideas`\n- `@education Explain quantum physics simply`\n\n**Alternative manual formats:**\n- `contact research agent: your question`\n- `use code agent for: your question`\n\nWhat can I help you with today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "7a6e1f7b-e9db-497e-87ed-0a8d8f00c7a3",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            -1620,
            460
          ],
          "webhookId": "specialized-ai-router",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {
              "maxTokensToSample": 1024
            }
          },
          "id": "56a47741-8b19-49ac-afb8-e8e59af81e30",
          "name": "Router LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -1360,
            680
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "hasOutputParser": true,
            "options": {
              "systemMessage": "You are an **AI Agent Router** that handles both automatic routing and manual agent selection.\n\n## Available Specialized Agents:\n\n1. **research** - For factual research, data analysis, citations, academic queries, fact-checking\n2. **code** - For programming, debugging, technical documentation, software development\n3. **writing** - For content creation, editing, storytelling, copywriting, creative writing\n4. **business** - For business strategy, productivity, project management, market analysis\n5. **creative** - For brainstorming, art concepts, design thinking, innovation\n6. **education** - For learning, explanations, tutoring, curriculum development\n7. **general** - For simple queries that don't require specialization\n\n## Manual Agent Selection:\n\nCheck if the user is manually selecting an agent using these patterns:\n- \"@research [question]\"\n- \"@code [question]\"\n- \"@writing [question]\"\n- \"@business [question]\"\n- \"@creative [question]\"\n- \"@education [question]\"\n- \"@general [question]\"\n\nOR:\n- \"contact research agent: [question]\"\n- \"contact code agent: [question]\"\n- \"contact writing agent: [question]\"\n- \"contact business agent: [question]\"\n- \"contact creative agent: [question]\"\n- \"contact education agent: [question]\"\n- \"contact general agent: [question]\"\n\nOR:\n- \"use research agent for [question]\"\n- \"use code agent for [question]\"\n- \"use writing agent for [question]\"\n- \"use business agent for [question]\"\n- \"use creative agent for [question]\"\n- \"use education agent for [question]\"\n- \"use general agent for [question]\"\n\n## Processing Logic:\n\n1. **Manual Selection**: If user explicitly mentions an agent, extract the agent name and the actual question\n2. **Automatic Selection**: If no agent is specified, analyze the query and select the most appropriate agent\n\n## Automatic Analysis Criteria:\n\n**Research Agent** - Use when:\n- User asks for facts, statistics, or current information\n- Needs citations or sources\n- Requests analysis of data or trends\n- Academic or scientific queries\n\n**Code Agent** - Use when:\n- User asks about programming languages\n- Needs debugging help or code review\n- Requests technical documentation\n- Software architecture questions\n\n**Writing Agent** - Use when:\n- User needs content creation (articles, blogs, stories)\n- Requests editing or proofreading\n- Creative writing projects\n- Marketing copy or communications\n\n**Business Agent** - Use when:\n- User asks about business strategy\n- Needs productivity or workflow advice\n- Market analysis or competitive research\n- Project management guidance\n\n**Creative Agent** - Use when:\n- User needs brainstorming or ideation\n- Art or design concept development\n- Innovation or creative problem-solving\n- Visual or artistic projects\n\n**Education Agent** - Use when:\n- User needs learning assistance\n- Requests explanations of concepts\n- Tutoring or homework help\n- Curriculum or lesson planning\n\n## Output Format:\n\nRespond ONLY with a JSON object:\n\n```json\n{\n  \"agent_type\": \"selected_agent_name\",\n  \"prompt\": \"cleaned user query without agent selection syntax\",\n  \"reasoning\": \"brief explanation of selection (manual or automatic)\"\n}\n```"
            }
          },
          "id": "fa0febb4-b228-4b05-b736-803c47790f66",
          "name": "AI Agent Router",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -1400,
            460
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n\t\"type\": \"object\",\n\t\"properties\": {\n\t\t\"agent_type\": {\n\t\t\t\"type\": \"string\",\n\t\t\t\"enum\": [\"research\", \"code\", \"writing\", \"business\", \"creative\", \"education\", \"general\"]\n\t\t},\n\t\t\"prompt\": {\n\t\t\t\"type\": \"string\"\n\t\t},\n\t\t\"reasoning\": {\n\t\t\t\"type\": \"string\"\n\t\t}\n\t}\n}"
          },
          "id": "7618a32e-beb6-401a-a6e6-fa594b33e5fe",
          "name": "Agent Selector Parser",
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "position": [
            -1240,
            680
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "research",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "69b034d4-244a-4bff-8f72-06ddf34acb37"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "code",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "2f16c2ab-921b-42ea-923d-7545e7e50e63"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "writing",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "b23b3679-47c6-4948-b65e-82e5898e2031"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "business",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "575ca4d0-0ab4-407a-a090-f30879a2a69f"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "creative",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "a7efbb1c-929d-4b08-b729-faf1cb676b8c"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "education",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "0926c1a8-5351-4a4f-8e75-4d5c6a39ba8b"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 1
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.output.agent_type }}",
                        "rightValue": "general",
                        "operator": {
                          "type": "string",
                          "operation": "equals"
                        },
                        "id": "4253655b-0e4e-4498-ae0a-121df77dfc12"
                      }
                    ],
                    "combinator": "and"
                  }
                }
              ]
            },
            "options": {
              "fallbackOutput": "Extra Output"
            }
          },
          "id": "e4f6a658-5e5e-4519-b0b8-86418934084c",
          "name": "Agent Switch",
          "type": "n8n-nodes-base.switch",
          "position": [
            -1020,
            380
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-5-sonnet-20241022"
            },
            "options": {}
          },
          "id": "e76e4f87-0628-4999-9736-bc1a2bb4507a",
          "name": "Agent LLM",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -160,
            -200
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {},
          "id": "00fe7684-ef0b-40c9-8811-0b43f13a2c7f",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            140,
            -200
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "ac2fc237-3bdb-4570-b5b2-5086a5109304",
          "name": "Calculator",
          "type": "@n8n/n8n-nodes-langchain.toolCalculator",
          "position": [
            340,
            -200
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "toolDescription": "Search the web for current information and facts",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"model\": \"claude-3-5-sonnet-20241022\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_query}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}",
            "options": {}
          },
          "id": "3d9b4876-3585-4a38-b043-44a69d3dbfbf",
          "name": "Web Search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            540,
            -200
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Research Specialist AI** with expertise in:\n\n🔬 **Core Capabilities:**\n- Factual research and verification\n- Data analysis and interpretation\n- Academic and scientific inquiry\n- Source citation and references\n- Trend analysis and insights\n\n📋 **Research Protocols:**\n- Always verify information through multiple sources when possible\n- Provide citations and references where available\n- Distinguish between facts, opinions, and speculation\n- Use web search for current information when needed\n- Present findings in structured, analytical format\n\n🎯 **Specialized Tools:**\n- Web search for current data\n- Calculator for statistical analysis\n- Think tool for complex reasoning\n\n**Instructions:** Provide thorough, well-researched responses with proper attribution and evidence-based conclusions."
            }
          },
          "id": "de12516d-1ec9-4974-85b6-0e9271172faa",
          "name": "🔬 Research Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -580,
            -320
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Code Specialist AI** with expertise in:\n\n💻 **Programming Capabilities:**\n- Multi-language programming (Python, JavaScript, Java, C++, etc.)\n- Code debugging and optimization\n- Software architecture and design patterns\n- API development and integration\n- Database design and queries\n\n🛠️ **Development Focus:**\n- Write clean, efficient, well-documented code\n- Provide step-by-step debugging guidance\n- Explain complex technical concepts clearly\n- Follow industry best practices and standards\n- Offer multiple solution approaches when applicable\n\n🎯 **Code Standards:**\n- Include proper error handling\n- Add meaningful comments and documentation\n- Consider security and performance implications\n- Provide testing suggestions when relevant\n\n**Instructions:** Deliver practical, production-ready code solutions with clear explanations and best practices."
            }
          },
          "id": "b4f3c1bd-0540-46b5-9abb-8c052ead2c3d",
          "name": "💻 Code Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            660,
            280
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Writing Specialist AI** with expertise in:\n\n✍️ **Writing Capabilities:**\n- Content creation (articles, blogs, copy)\n- Creative writing (stories, scripts, poetry)\n- Technical writing and documentation\n- Editing and proofreading\n- Communication and messaging\n\n📝 **Writing Standards:**\n- Adapt tone and style to target audience\n- Ensure clarity, coherence, and engagement\n- Follow proper grammar and style guidelines\n- Structure content for maximum impact\n- Optimize for specific platforms when needed\n\n🎨 **Creative Approach:**\n- Develop compelling narratives and storylines\n- Create memorable characters and dialogue\n- Use literary devices effectively\n- Balance creativity with purpose\n- Consider emotional impact and reader experience\n\n**Instructions:** Create compelling, well-structured content that engages the target audience and achieves the intended purpose."
            }
          },
          "id": "7adfa212-7dde-4f07-b08a-327f9ca3414f",
          "name": "✍️ Writing Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            520,
            620
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Business Specialist AI** with expertise in:\n\n📊 **Business Capabilities:**\n- Strategic planning and analysis\n- Market research and competitive analysis\n- Productivity and workflow optimization\n- Project management and operations\n- Financial analysis and budgeting\n\n💼 **Business Focus:**\n- Provide actionable business insights\n- Consider ROI and business impact\n- Suggest practical implementation steps\n- Analyze risks and opportunities\n- Align solutions with business objectives\n\n🎯 **Strategic Approach:**\n- Think holistically about business challenges\n- Consider stakeholder perspectives\n- Provide data-driven recommendations\n- Account for resource constraints\n- Focus on measurable outcomes\n\n**Instructions:** Deliver strategic, practical business advice that drives results and creates value for the organization."
            }
          },
          "id": "963927fa-e7b7-4669-be9b-95dd6abd6bfe",
          "name": "📊 Business Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            520,
            920
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **Creative Specialist AI** with expertise in:\n\n🎨 **Creative Capabilities:**\n- Brainstorming and ideation\n- Design thinking and innovation\n- Art and visual concepts\n- Creative problem-solving\n- Brand and identity development\n\n💡 **Creative Process:**\n- Generate diverse, original ideas\n- Think outside conventional boundaries\n- Combine concepts in novel ways\n- Consider aesthetic and emotional impact\n- Iterate and refine creative concepts\n\n🌟 **Innovation Focus:**\n- Challenge assumptions and norms\n- Explore unconventional approaches\n- Balance creativity with feasibility\n- Consider user experience and engagement\n- Inspire and motivate through creativity\n\n**Instructions:** Generate innovative, inspiring creative solutions that push boundaries while remaining practical and purposeful."
            }
          },
          "id": "80b96b05-7d6c-4c79-ba89-b2080f6705e2",
          "name": "🎨 Creative Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            520,
            1280
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are an **Education Specialist AI** with expertise in:\n\n📚 **Educational Capabilities:**\n- Learning and skill development\n- Concept explanation and clarification\n- Curriculum design and lesson planning\n- Assessment and feedback\n- Personalized learning approaches\n\n🎓 **Teaching Methods:**\n- Adapt explanations to learning level\n- Use examples and analogies effectively\n- Break complex topics into digestible parts\n- Encourage active learning and engagement\n- Provide practice opportunities and feedback\n\n🌱 **Learning Focus:**\n- Foster understanding over memorization\n- Build connections between concepts\n- Encourage critical thinking skills\n- Support different learning styles\n- Promote lifelong learning habits\n\n**Instructions:** Provide clear, engaging educational content that promotes deep understanding and effective learning outcomes."
            }
          },
          "id": "7f2f54ae-42e5-4323-b359-f006596f9598",
          "name": "📚 Education Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            320,
            1700
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "={{ $json.output.prompt }}",
            "options": {
              "systemMessage": "You are a **General Purpose AI Assistant** designed to handle diverse queries with:\n\n🤖 **General Capabilities:**\n- Comprehensive knowledge across domains\n- Balanced approach to problem-solving\n- Clear and helpful communication\n- Adaptable to various contexts\n\n**Instructions:** Provide helpful, accurate responses while maintaining a friendly and professional tone."
            }
          },
          "id": "d19616c3-1341-4153-839c-02b552f209be",
          "name": "🤖 General Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            200,
            2140
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "sessionKey": "research_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "research_agent_memory",
            "contextWindowLength": 20
          },
          "id": "fe1e4394-4a14-4863-a6d1-2ecaf9e9a3db",
          "name": "Research Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            0,
            -200
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "code_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "code_agent_memory",
            "contextWindowLength": 20
          },
          "id": "72c78239-0bf2-4362-a212-78b6c69e81ea",
          "name": "Code Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            700,
            480
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "writing_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "writing_agent_memory",
            "contextWindowLength": 20
          },
          "id": "2b17ca8d-c09e-4fb0-ad60-f59b05d155e1",
          "name": "Writing Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            620,
            800
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "business_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "business_agent_memory",
            "contextWindowLength": 20
          },
          "id": "7a487a3c-aa86-47a4-ae8e-8c50f5b32f63",
          "name": "Business Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            520,
            1140
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "creative_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "creative_agent_memory",
            "contextWindowLength": 20
          },
          "id": "ec532a8f-0d71-4422-9b7f-b8ecc037a054",
          "name": "Creative Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            400,
            1520
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "education_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "education_agent_memory",
            "contextWindowLength": 20
          },
          "id": "2f96f381-0888-43ad-a534-0f5f2159cfaf",
          "name": "Education Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            380,
            1900
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "sessionKey": "general_agent_memory_{{ $('When chat message received').item.json.sessionId }}",
            "tableName": "general_agent_memory",
            "contextWindowLength": 20
          },
          "id": "81b96b1d-ec60-4889-9d77-4a4ab5187743",
          "name": "General Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
          "position": [
            200,
            2360
          ],
          "typeVersion": 1.3
        }
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent Router",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent Selector Parser": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent Router": {
          "main": [
            [
              {
                "node": "Agent Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Router LLM": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent Router",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Agent Switch": {
          "main": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "💻 Code Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "✍️ Writing Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📊 Business Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🎨 Creative Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "📚 Education Agent",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "🤖 General Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Agent LLM": {
          "ai_languageModel": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Research Memory": {
          "ai_memory": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Code Memory": {
          "ai_memory": [
            [
              {
                "node": "💻 Code Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Writing Memory": {
          "ai_memory": [
            [
              {
                "node": "✍️ Writing Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Business Memory": {
          "ai_memory": [
            [
              {
                "node": "📊 Business Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Creative Memory": {
          "ai_memory": [
            [
              {
                "node": "🎨 Creative Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Education Memory": {
          "ai_memory": [
            [
              {
                "node": "📚 Education Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "General Memory": {
          "ai_memory": [
            [
              {
                "node": "🤖 General Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Calculator": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Web Search": {
          "ai_tool": [
            [
              {
                "node": "🔬 Research Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "💻 Code Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "✍️ Writing Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📊 Business Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🎨 Creative Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "📚 Education Agent",
                "type": "ai_tool",
                "index": 0
              },
              {
                "node": "🤖 General Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "e4d55e50-12aa-4cc2-8563-4df398def0a9",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-13T00:32:03.973Z",
      "updatedAt": "2025-06-13T00:32:53.258Z",
      "id": "jJUpvtT5tlWrMvcM",
      "name": "My workflow 9",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -160,
            260
          ],
          "id": "77e76e12-5bb6-4002-8d5a-71786d4165aa",
          "name": "On form submission",
          "webhookId": "296d51cf-550a-476f-be81-4aa1b5ebc4c4"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            500,
            260
          ],
          "id": "ca85fb5d-03e4-4c3c-9b6f-48b3a28f77af",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            876,
            260
          ],
          "id": "d3c22cd8-fb53-4018-8b20-838aa1bbdc03",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            588,
            480
          ],
          "id": "f11d200f-2692-4696-a375-1b6f87c9a013",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\n\nreturn items.map((item, index) => {\n  console.log(`=== PROCESSING ITEM ${index + 1} ===`);\n  console.log('Full item structure:', JSON.stringify(item, null, 2));\n  \n  let originalFileName = null;\n  let binaryData = {};\n  \n  // Method 1: Check if binary data exists and extract filename\n  if (item.binary && Object.keys(item.binary).length > 0) {\n    console.log('Binary data found. Keys:', Object.keys(item.binary));\n    \n    // Usually the form field name is 'data' for file uploads\n    const binaryKey = Object.keys(item.binary)[0]; // Get first binary key\n    console.log('Using binary key:', binaryKey);\n    \n    if (item.binary[binaryKey]) {\n      binaryData = {};\n      binaryData[binaryKey] = item.binary[binaryKey];\n      \n      // Extract filename from binary data\n      const binaryInfo = item.binary[binaryKey];\n      console.log('Binary info:', {\n        fileName: binaryInfo.fileName,\n        mimeType: binaryInfo.mimeType,\n        fileExtension: binaryInfo.fileExtension,\n        hasData: !!binaryInfo.data\n      });\n      \n      // Try multiple ways to get filename\n      originalFileName = binaryInfo.fileName || \n                       binaryInfo.filename || \n                       binaryInfo.name ||\n                       binaryInfo.originalname;\n      \n      console.log('Extracted filename:', originalFileName);\n    }\n  }\n  \n  // Method 2: Check form data structure\n  if (!originalFileName && item.json) {\n    console.log('Checking JSON structure for filename...');\n    \n    // Check if there's form data with filename\n    if (item.json.data && Array.isArray(item.json.data)) {\n      const fileField = item.json.data.find(field => \n        field.fieldName === 'data' || \n        field.fieldType === 'file' ||\n        field.filename ||\n        field.fileName\n      );\n      \n      if (fileField) {\n        originalFileName = fileField.filename || \n                         fileField.fileName || \n                         fileField.name;\n        console.log('Found filename in form data:', originalFileName);\n      }\n    }\n    \n    // Direct filename fields\n    if (!originalFileName) {\n      originalFileName = item.json.filename || \n                       item.json.fileName || \n                       item.json.originalFileName ||\n                       item.json.name;\n      console.log('Found filename in JSON:', originalFileName);\n    }\n  }\n  \n  // Method 3: Generate filename if still not found - BUT KEEP IT SIMPLE\n  if (!originalFileName || originalFileName === 'undefined' || originalFileName === '') {\n    console.log('No filename found, using default...');\n    // Use a simple default that won't cause issues\n    originalFileName = 'uploaded-document.pdf';\n    console.log('Using default filename:', originalFileName);\n  }\n  \n  // Clean up filename (remove any problematic characters but preserve original name structure)\n  // Only replace truly problematic characters, keep hyphens and underscores\n  originalFileName = originalFileName.replace(/[<>:\"/\\\\|?*]/g, '_');\n  \n  // Ensure .pdf extension\n  if (!originalFileName.toLowerCase().endsWith('.pdf')) {\n    const nameWithoutExt = originalFileName.split('.')[0];\n    originalFileName = nameWithoutExt + '.pdf';\n  }\n  \n  console.log('Final filename:', originalFileName);\n  \n  // Validation\n  const hasValidFilename = originalFileName && originalFileName !== 'undefined';\n  const hasValidBinary = Object.keys(binaryData).length > 0;\n  \n  console.log('Validation:');\n  console.log('- Valid filename:', hasValidFilename);\n  console.log('- Valid binary data:', hasValidBinary);\n  console.log('- Binary data keys:', Object.keys(binaryData));\n  \n  if (hasValidBinary) {\n    const firstBinaryKey = Object.keys(binaryData)[0];\n    console.log('- Binary data size:', binaryData[firstBinaryKey]?.data?.length || 'unknown');\n  }\n  \n  console.log('================================');\n  \n  return {\n    json: {\n      ...item.json,\n      originalFileName: originalFileName,\n      processingTimestamp: new Date().toISOString(),\n      validationStatus: {\n        hasFilename: hasValidFilename,\n        hasBinary: hasValidBinary,\n        readyForUpload: hasValidFilename && hasValidBinary\n      },\n      extractionMethod: 'enhanced_extraction_v3'\n    },\n    binary: binaryData\n  };\n});"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            60,
            260
          ],
          "id": "3a79a829-6135-4f0e-adf8-e1250611afee",
          "name": "Binary Data Extraction"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            280,
            260
          ],
          "id": "db5a51b7-c21d-46c0-9f50-eaa43645a1d6",
          "name": "Extract from File1",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-20a7112e57b98127b5a3f03fdd045cbf",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -160,
            -100
          ],
          "id": "8bb31ca9-b2f6-4720-b0c5-d2fe171cf355",
          "name": "Notion_PDF Summary",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {
            "resource": "databasePage",
            "databaseId": {
              "__rl": true,
              "value": "2087112e-57b9-80d4-af14-e4989ea2920c",
              "mode": "list",
              "cachedResultName": "PDF Summary table",
              "cachedResultUrl": "https://www.notion.so/2087112e57b980d4af14e4989ea2920c"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            1096,
            260
          ],
          "id": "bdb11450-8483-4712-b2ab-74376a8fd9b9",
          "name": "Notion_PDF Summary TABLE",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Binary Data Extraction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Notion_PDF Summary TABLE",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Binary Data Extraction": {
          "main": [
            [
              {
                "node": "Extract from File1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File1": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "8fc54ffc-34ba-4d87-9e46-20173e047984",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:32:08.270Z",
      "updatedAt": "2025-06-12T19:32:08.270Z",
      "id": "zX1mjlqD4JOJSxb2",
      "name": "twitter_reply_guy_agent",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "trigger": [
              "message"
            ],
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "options": {
              "userIds": "U07CUPY83ST,U05Q3C50S0Z,U05QEE5V57A,U08F1GJG0PQ"
            }
          },
          "type": "n8n-nodes-base.slackTrigger",
          "typeVersion": 1,
          "position": [
            -300,
            140
          ],
          "id": "7918c091-fca5-464f-be7b-6284560c8025",
          "name": "slack_trigger",
          "webhookId": "27416a71-648c-4ef2-b6c9-47a9aff1a695"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": false,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "423cab91-b5b5-4f52-9ba6-f05345b63f5c",
                  "leftValue": "={{ $json.attachments[0].fields.map(o => o.value) }}",
                  "rightValue": "X (Twitter)",
                  "operator": {
                    "type": "array",
                    "operation": "contains",
                    "rightType": "any"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {
              "ignoreCase": true
            }
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            -80,
            140
          ],
          "id": "8bf20529-4b05-4c13-903e-0d7779f0280d",
          "name": "filter_only_twitter_source"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": false,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "932940ad-cafb-4621-b97c-ec638528942e",
                  "leftValue": "={{ $json.attachments[0].author_name }}",
                  "rightValue": "@aiden_tooley",
                  "operator": {
                    "type": "string",
                    "operation": "notContains"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {
              "ignoreCase": true
            }
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            160,
            140
          ],
          "id": "28f4aa3f-5765-4bfe-8896-0e50b88c7e10",
          "name": "exclude_self_account"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=I want to read this tweet and make a decision if you think a response with a link to an AI Tools directory page that would help answer the question / ask in the provided tweet.\n\nA good tweet for us to reply to is usually in the form of a question like \"How can I use AI to do...?\", \"Are there any AI tools that can help me do...?\", and other questions of that nature.\n\nHere are some examples of types of tweets we don't want to reply to:\n- A statement instead of someone asking for a tool\n- An unrelated question or inquiry that could not be helped by us sharing a link to tools on our AI Tools directory\n- A reply to another tweet (this typical begins with an @ symbol followed by their twitter user name). You can look at the raw slack alert to find more metadata to determine if this was a reply or not.\n- A tweet that shares a link to an article or content piece on another website\n- If someone tweets the question \"How can I use AI to do my job better?\", don't write a reply. This is a common quote that people use instead of a real question we want to reply to.\n- If someone is asking something nefarious, you should NOT reply to this tweet.\n- If someone is asking for a specific tool to take action towards an individual you should NOT reply to this tweet.\n- If someone is sharing a prompt for LLMs, don't reply to that tweet.\n\n---\nTweet To Evaluate:\n\n{{ $('get_tweet_content').item.json.tweet_content }}\n",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are a helpful assistant, an expert community manager, and expert social media manager, and an expert at marketing. Your job is to help grow the social media presence of our AI tool directory called \"AI Tools\" on X (formerly Twitter) by evaluating AI-related tweets you should reply to."
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            1860,
            120
          ],
          "id": "f320e58f-1d5a-4d49-8eae-bc4be7195546",
          "name": "evaluate_tweet",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=I want you to write a reply to the tweet I am providing below that will help this person out by sharing a relevant link to our AI Tools directory along with a short note.\n\nYou should first pick out which category page url on AI Tools will be able to help them the most based on their question or inquiry in the initial tweet.\n\nOnce that is done, write a helpful and concise tweet that let's the original person know that they can find helpful or useful tools at the link you selected out. Include this category url link in your tweet reply message.\n\nYou should write in a style that is friendly but would not be considered excessive or over the top. Your goal is to be helpful and share a resource that helps them out.\n\nAvoid repeating information from the original tweet.\n\nKeep your note very concise (short and sweet) and use as few words as you can.\n\nIt is very important you are picking the best category on AI Tools to share in your reply in order to help this person the most. The link you share should help this person find what they are looking for and asking about.\n\nUse direct language in your tweet reply.\n\nDon't start your reply with \"check\".\n\nPrefer \"may help\" over \"could\" in your reply.\n\nShort and sweet is best for this.\n\n---\nHere are some examples we have replied to in the past to help you out when crafting a great reply tweet. Please read these:\n\n### Tweet #1\n- Initial Tweet: Is there an AI tool(or tools) you might  recommend for a novice that wants to play with creating whimsical images? Thanks much!\n- Reply Tweet: There's a bunch of cool ones on here: https://aitools.inc/categories/ai-image-generators\n\n### Tweet #2\n- Initial Tweet: is there a AI tool that can help create comic book stories based on prompts and a story line\n- Reply Tweet: several on here! https://aitools.inc/categories/ai-comic-generators\n\n### Tweet #3\n- Initial Tweet: Sir, is there an AI tool that is able to create a short video based on an image? I want to create a short commercial video but I only have some photos of the product.\n- Reply Tweet: I think some of these allow you to include images w/ your prompt: https://aitools.inc/categories/ai-text-to-video-tools\n\n### Tweet #4\n- Initial Tweet: Are there AI tools that can give you a professional design for an entire web app UI?\n- Reply Tweet: We have a really good list here! https://aitools.inc/categories/ai-design-tools\n\n---\nHere's some feedback on tweets you previously wrote that you should consider for this tweet you are writing. Please reivew this feedback and apply my suggestions when you are writing this tweet:\n\n### Feedback 1\n\n- Input Tweet: I hate video tutorials so fucking much is there an AI tool that give me text ones from a video\n- Your Output: These tools can convert videos into text formats: https://aitools.inc/categories/ai-video-to-blog-tools\n\nInstead of what you wrote, I would write this instead: \"Some of these tools may help: https://aitools.inc/categories/ai-video-to-blog-tools\"\n\n### Feedback 2\n\n- Input Tweet: Is there an AI tool that takes design instructions and produces high fidelity designs?\n- Your Output: Great design tools listed here: https://aitools.inc/categories/ai-design-tools\n\nInstead of what you wrote, I suggest you respond more like this: \"There's some great AI design tools on here: https://aitools.inc/categories/ai-design-tools\"\n\n### Feedback 3\n\n- Input Tweet: This is sick! How do you actually get the design? Are there any ai tools that help with designing that we can then port to cursor?\n- Your Output: There are several AI design tools that might help with what you need: https://aitools.inc/categories/ai-design-tools\n\nInstead of what you wrote, I suggest you respond more like this: \"There are some design tools that may help here: https://aitools.inc/categories/ai-design-tools\"\n\n### Feedback 4\n\n- Input Tweet: is there an ai tool out there where i can just talk to it and it summarizes what i say? hahahahaa like i gotta stop calling @tasonjorres and brain dump\n- Your Output: These AI meeting note takers could help with those brain dumps: https://aitools.inc/categories/ai-meeting-note-takers\n\nInstead of what you wrote, I suggest you respond more like this: \"These could help out with those brain dumps: https://aitools.inc/categories/ai-meeting-note-takers\". It is okay to exclude the exact category name in your response to keep it short.\n\n### Feedback 4\n\n- Input Tweet: are there any AI tools that timestamp youtube videos for you?\n- Your Output: You'll find some helpful tools here: https://aitools.inc/categories/ai-video-to-blog-tools\n\nInstead of what you wrote, I suggest you respond more like this: \"Some of these may be helpful: https://aitools.inc/categories/ai-video-to-blog-tools\". Since the category we are sharing isn't an exact match to what they are asking, we should with a little less certainty.\n\n---\nTweet you will be replying to:\n{{ $node['get_tweet_content'].json.tweet_content }}\n\n---\nList of category page urls on our AI Tools directory. The link you include in your tweet MUST be from this list of urls that point to a category page on our AI Tools directory:\n{{ $('get_category_content').item.json.category_content }}\n\n",
            "hasOutputParser": true,
            "messages": {
              "messageValues": [
                {
                  "message": "You are a helpful assistant, an expert community manager, an expert social media manager, and an expert at marketing. Your job is to help grow the social media presence of our AI tool directory called \"AI Tools\" on X (formerly Twitter) by writing a reply tweet that "
                }
              ]
            }
          },
          "type": "@n8n/n8n-nodes-langchain.chainLlm",
          "typeVersion": 1.5,
          "position": [
            660,
            860
          ],
          "id": "a7c21819-f11a-41a1-ad11-f4ba327f26de",
          "name": "write_tweet",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "8246f59e-597a-425d-adf8-60bd45dd25f9",
                  "leftValue": "={{ $('exclude_retweets').all().length }}",
                  "rightValue": 1,
                  "operator": {
                    "type": "number",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            620,
            140
          ],
          "id": "8600f2fa-b9d1-4ee0-9679-e62e07c1e632",
          "name": "should_evaluate"
        },
        {
          "parameters": {
            "resource": "reaction",
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "timestamp": "={{ $('slack_trigger').item.json.event_ts }}",
            "name": "x"
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            920,
            380
          ],
          "id": "59c836e4-27a6-4d9a-8d2a-d6294297143d",
          "name": "leave_skip_reaction",
          "webhookId": "3d1dd3e9-f7d3-4cfe-9fae-b568bca25db5",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning to determine if this tweet should be replied to.\"\n    },\n    \"is_tweet_good_reply_candidate\": {\n      \"type\": \"boolean\",\n      \"description\": \"Indicator if the evaluated tweet content is a good candidate to reply to.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"is_tweet_good_reply_candidate\"\n  ]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            2020,
            560
          ],
          "id": "773edb32-6228-42a6-a0ef-a6d3125af1a3",
          "name": "evaluate_tweet_output_parser"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "gpt-4o-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            1440,
            560
          ],
          "id": "5672a562-c868-44c8-93c4-429b45bc442e",
          "name": "gpt-4o-mini"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "1c8fe2cd-da05-4f6f-8de8-bfcdaebd8b45",
                  "name": "tweet_content",
                  "value": "={{ $('fetch_tweet_content').item.json.text }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1560,
            120
          ],
          "id": "dc27bb52-24cc-43ea-8448-45c3c9429b6e",
          "name": "get_tweet_content"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "6684bc25-d89e-4a22-954a-4c9c3aa5ae47",
                  "leftValue": "={{ $json.output.is_tweet_good_reply_candidate }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -320,
            1040
          ],
          "id": "e8ef30f5-b65b-4164-a997-a77c5905f0fb",
          "name": "is_good_candidate"
        },
        {
          "parameters": {
            "resource": "reaction",
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "timestamp": "={{ $('slack_trigger').last().json.event_ts }}",
            "name": "x"
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            340,
            1160
          ],
          "id": "7f883595-0ded-4540-9338-f09a38927be2",
          "name": "leave_bad_candidate_reaction",
          "webhookId": "3d1dd3e9-f7d3-4cfe-9fae-b568bca25db5",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "text": "=I don't think this is a good Tweet for me to reply to.\n\n*Reason:*\n{{ $('evaluate_tweet').item.json.output.chainOfThought }}\n",
            "otherOptions": {
              "thread_ts": {
                "replyValues": {
                  "thread_ts": "={{ $('slack_trigger').last().json.event_ts }}"
                }
              }
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            80,
            1160
          ],
          "id": "6b0ca9ea-d435-44f7-b25c-a1d26923ec7a",
          "name": "share_bad_tweet_candidate_msg",
          "webhookId": "a195152d-c866-486c-a074-500d37dece2f"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"chainOfThought\": {\n      \"type\": \"string\",\n      \"description\": \"Sequential reasoning to make a decision on the most helpful page to share from AI Tools and how you decided to write your helpful note in the tweet reply.\"\n    },\n    \"tweet_content\": {\n      \"type\": \"string\",\n      \"description\": \"The final tweet content that will be used as a reply on Twitter. This MUST include a url provided from the AI tools website that will help the user.\"\n    }\n  },\n  \"required\": [\n    \"chainOfThought\",\n    \"tweet_content\"\n  ]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            860,
            1060
          ],
          "id": "5057d242-f32f-422c-99a0-52dd4abac17c",
          "name": "write_tweet_output_parser"
        },
        {
          "parameters": {
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "text": "=I went forward replying with this Tweet:\n```\n{{ $('write_tweet').item.json.output.tweet_content }}\n```\n\n*Reasoning:*\n{{ $('write_tweet').item.json.output.chainOfThought }}\n",
            "otherOptions": {
              "thread_ts": {
                "replyValues": {
                  "thread_ts": "={{ $('slack_trigger').last().json.event_ts }}"
                }
              }
            }
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            1660,
            860
          ],
          "id": "e7dd1d31-1895-464b-aa42-cc0e0ad7065a",
          "name": "share_tweet_content",
          "webhookId": "a195152d-c866-486c-a074-500d37dece2f"
        },
        {
          "parameters": {
            "resource": "reaction",
            "channelId": {
              "__rl": true,
              "value": "C07RY6EQ6SH",
              "mode": "id"
            },
            "timestamp": "={{ $('slack_trigger').last().json.event_ts }}",
            "name": "white_check_mark"
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            1960,
            860
          ],
          "id": "4506a892-c862-4e50-905e-c89064fde40c",
          "name": "leave_check_reaction",
          "webhookId": "3d1dd3e9-f7d3-4cfe-9fae-b568bca25db5",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": false,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "a8a140f5-ae97-4476-b4de-fac4d3f30767",
                  "leftValue": "={{ $json.attachments[0].text }}",
                  "rightValue": "RT",
                  "operator": {
                    "type": "string",
                    "operation": "contains"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {
              "ignoreCase": true
            }
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            400,
            140
          ],
          "id": "01f24d9a-c340-4ce4-ba15-b195b98dd760",
          "name": "exclude_retweets"
        },
        {
          "parameters": {
            "url": "=https://cdn.syndication.twimg.com/tweet-result?id={{ $('extract_tweet_id').item.json.output.tweet_id }}&token=utxo",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1320,
            120
          ],
          "id": "bfb8d355-bd04-41e2-93b1-5af6b93c23da",
          "name": "fetch_tweet_content"
        },
        {
          "parameters": {
            "text": "=Help me extract the tweet id from the \"Open on web\" url included in this json payload that I received from a slack message webhook.\n\nHere is the slack message content to extract his information from:\n{{ JSON.stringify($('slack_trigger').first().json, null, 2) }}",
            "attributes": {
              "attributes": [
                {
                  "name": "tweet_id",
                  "description": "The tweet id to extract from slack webhook json payload. This id can be extracted from the 'Open on web' link in the included json payload.",
                  "required": true
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.informationExtractor",
          "typeVersion": 1,
          "position": [
            920,
            120
          ],
          "id": "cfb5133a-f1c8-481e-a0e0-7fd5fe7b3001",
          "name": "extract_tweet_id",
          "retryOnFail": true,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "url": "http://api.aitools.inc/categories",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            80,
            860
          ],
          "id": "1a0aedf2-1a62-4019-8d11-fadc4523f2c4",
          "name": "fetch_categories"
        },
        {
          "parameters": {
            "jsCode": "let category_content = $input.all().map(o => {\n  let result = \"\";\n\n  result += `Title: ${o.json.title}\\n`;\n  result += `Description: ${o.json.meta_description}\\n`;\n  result += `Url: https://aitools.inc/categories/${o.json.slug}`;\n\n  return result;\n}).join(\"\\n\\n\");\n\nreturn { category_content };"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            340,
            860
          ],
          "id": "db539da9-1ee1-416f-ae82-981963ddb723",
          "name": "get_category_content"
        },
        {
          "parameters": {
            "text": "={{ $('write_tweet').item.json.output.tweet_content }}",
            "additionalFields": {
              "inReplyToStatusId": {
                "__rl": true,
                "value": "={{ $('extract_tweet_id').item.json.output.tweet_id }}",
                "mode": "id"
              }
            }
          },
          "type": "n8n-nodes-base.twitter",
          "typeVersion": 2,
          "position": [
            1360,
            860
          ],
          "id": "d82bfe9d-06d7-420e-93c4-bea9faf457e4",
          "name": "post_reply_tweet"
        },
        {
          "parameters": {
            "amount": 65
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1080,
            860
          ],
          "id": "31fc511a-c7c7-4415-b65c-53476d871a24",
          "name": "delay",
          "webhookId": "a96b123e-027c-4c3d-9fdd-3ffc61ba7cb1"
        },
        {
          "parameters": {
            "model": "claude-3-5-sonnet-20241022",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.2,
          "position": [
            640,
            1060
          ],
          "id": "dc8741dd-8a00-4dbf-8c64-edd336d9b75a",
          "name": "claude-3.5-sonnet"
        },
        {
          "parameters": {
            "content": "## 1. Evaluate Tweet\n",
            "height": 640,
            "width": 2540
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -340,
            80
          ],
          "typeVersion": 1,
          "id": "bd3659cf-9676-463a-827a-03ebeee29538",
          "name": "Sticky Note"
        },
        {
          "parameters": {
            "content": "## 2. Post Reply\n\n",
            "height": 640,
            "width": 2540,
            "color": 4
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -340,
            740
          ],
          "typeVersion": 1,
          "id": "a9e20423-ec64-4127-ae78-33e6357ff9f1",
          "name": "Sticky Note1"
        }
      ],
      "connections": {
        "slack_trigger": {
          "main": [
            [
              {
                "node": "filter_only_twitter_source",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "filter_only_twitter_source": {
          "main": [
            [
              {
                "node": "exclude_self_account",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "exclude_self_account": {
          "main": [
            [
              {
                "node": "exclude_retweets",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "evaluate_tweet": {
          "main": [
            [
              {
                "node": "is_good_candidate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "should_evaluate": {
          "main": [
            [
              {
                "node": "extract_tweet_id",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "leave_skip_reaction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "evaluate_tweet_output_parser": {
          "ai_outputParser": [
            [
              {
                "node": "evaluate_tweet",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "gpt-4o-mini": {
          "ai_languageModel": [
            [
              {
                "node": "evaluate_tweet",
                "type": "ai_languageModel",
                "index": 0
              },
              {
                "node": "extract_tweet_id",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "get_tweet_content": {
          "main": [
            [
              {
                "node": "evaluate_tweet",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "is_good_candidate": {
          "main": [
            [
              {
                "node": "fetch_categories",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "share_bad_tweet_candidate_msg",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "share_bad_tweet_candidate_msg": {
          "main": [
            [
              {
                "node": "leave_bad_candidate_reaction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "write_tweet": {
          "main": [
            [
              {
                "node": "delay",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "write_tweet_output_parser": {
          "ai_outputParser": [
            [
              {
                "node": "write_tweet",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "share_tweet_content": {
          "main": [
            [
              {
                "node": "leave_check_reaction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "exclude_retweets": {
          "main": [
            [
              {
                "node": "should_evaluate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_tweet_content": {
          "main": [
            [
              {
                "node": "get_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "extract_tweet_id": {
          "main": [
            [
              {
                "node": "fetch_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_categories": {
          "main": [
            [
              {
                "node": "get_category_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "get_category_content": {
          "main": [
            [
              {
                "node": "write_tweet",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "post_reply_tweet": {
          "main": [
            [
              {
                "node": "share_tweet_content",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "delay": {
          "main": [
            [
              {
                "node": "post_reply_tweet",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "claude-3.5-sonnet": {
          "ai_languageModel": [
            [
              {
                "node": "write_tweet",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {
        "slack_trigger": [
          {
            "json": {
              "subtype": "bot_message",
              "text": "*1* new mention for the alert *AI Tools*",
              "attachments": [
                {
                  "id": 1,
                  "color": "7ED321",
                  "fallback": "RT <https://twitter.com/hackSultan|@hackSultan>: 109 companies  (Hiring  2 -5 interns on average) and over 4000+ potential interns.How do I use AI to accurately pair interns to the right company based off skill set, requirements and location?\n<http://web.mention.com/#alert/2626255/mentions/145212540259|Open in Mention> - <https://twitter.com/egcarson_/status/1926932393660756370|Open on web> - <http://web.mention.com/#alert/2626255/edit/settings|Settings>",
                  "text": "RT <https://twitter.com/hackSultan|@hackSultan>: 109 companies  (Hiring  2 -5 interns on average) and over 4000+ potential interns.How do I use AI to accurately pair interns to the right company based off skill set, requirements and location?\n<http://web.mention.com/#alert/2626255/mentions/145212540259|Open in Mention> - <https://twitter.com/egcarson_/status/1926932393660756370|Open on web> - <http://web.mention.com/#alert/2626255/edit/settings|Settings>",
                  "author_name": "EG Carson  ‍  (@egcarson_)",
                  "author_link": "https://twitter.com/egcarson_",
                  "author_icon": "https://pbs.twimg.com/profile_images/1668901911104221187/Jy9zCnTG_normal.jpg",
                  "fields": [
                    {
                      "value": "X (Twitter)",
                      "title": "Source",
                      "short": true
                    },
                    {
                      "value": "12",
                      "title": "Influence",
                      "short": true
                    }
                  ],
                  "mrkdwn_in": [
                    "fields",
                    "pretext",
                    "text"
                  ]
                }
              ],
              "type": "message",
              "ts": "1748251466.728959",
              "bot_id": "B07STMFJADP",
              "blocks": [
                {
                  "type": "rich_text",
                  "block_id": "YGeaD",
                  "elements": [
                    {
                      "type": "rich_text_section",
                      "elements": [
                        {
                          "type": "text",
                          "text": "1",
                          "style": {
                            "bold": true
                          }
                        },
                        {
                          "type": "text",
                          "text": " new mention for the alert "
                        },
                        {
                          "type": "text",
                          "text": "AI Tools",
                          "style": {
                            "bold": true
                          }
                        }
                      ]
                    }
                  ]
                }
              ],
              "channel": "C07RY6EQ6SH",
              "event_ts": "1748251466.728959",
              "channel_type": "channel"
            }
          }
        ]
      },
      "versionId": "4f5065c5-f199-4783-aa7e-40f9bde8f260",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-07T19:54:57.977Z",
      "updatedAt": "2025-06-11T20:20:19.573Z",
      "id": "oz2oxAIaaYJiiTgn",
      "name": "PDF Summary",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -3240,
            70
          ],
          "id": "c0b13be6-7655-496b-ae2d-b8795bf68089",
          "name": "On form submission",
          "webhookId": "ed798d81-9423-4cc9-a148-04afde73ae4b"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -3020,
            145
          ],
          "id": "b44da198-ec88-4e8e-bc8b-d2c65390925d",
          "name": "Extract from File",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2580,
            70
          ],
          "id": "cf54f301-3b0c-4ace-bfd3-83f68b4632f5",
          "name": "Text Processing & Setup"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -1920,
            -180
          ],
          "id": "767ec290-e18d-489d-a841-e40ee2bea9df",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1544,
            -80
          ],
          "id": "4acd58f5-101d-4af7-9eff-ba8c7ce15dff",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-opus-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Opus 4"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -3240,
            -420
          ],
          "id": "666af65a-dbf8-49ef-b07d-6964ebeb142c",
          "name": "Anthropic Chat Model",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -2800,
            70
          ],
          "id": "e8c3fdef-6540-4ce2-977b-250dc79eb901",
          "name": "Merge"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -1324,
            70
          ],
          "id": "222febca-0fb3-43a9-be61-8e3cb68a7951",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "// FIXED JavaScript Code for \"Add File name to JSON\" node:\nconst input = $input.first();\nlet fileName = 'output.png';\n\nconst binaryKey = Object.keys(input.binary)[0];\n\nif (binaryKey && input.binary[binaryKey]) {\n  // Generate a unique filename with timestamp and random string\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(2, 8);\n  const originalFileName = input.binary[binaryKey].fileName || 'output.png';\n  const fileExtension = originalFileName.split('.').pop() || 'png';\n  \n  fileName = `cover_${timestamp}_${randomString}.${fileExtension}`;\n}\n\n// Provide the COMPLETE path with unique filename\nconst completePath = \"ban/pdf_summary/\" + fileName;\n\n// Debug logging\nconsole.log('Generated fileName:', fileName);\nconsole.log('Complete path:', completePath);\nconsole.log('Binary key found:', binaryKey);\n\nreturn [{\n  json: {\n    ...input.json,\n    completePath: completePath,\n    uniqueFileName: fileName,\n    fileMeta: {\n      originalName: input.json.originalFileName || 'unknown.pdf',\n      processedAt: new Date().toISOString()\n    },\n    // Debug info\n    debug: {\n      binaryKey: binaryKey,\n      generatedPath: completePath\n    }\n  },\n  binary: input.binary\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2140,
            220
          ],
          "id": "9447819f-4a1d-4ced-8f55-748381e373dc",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1544,
            220
          ],
          "id": "f9692ce7-3fff-4665-8d3f-17445d556cd2",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -1104,
            70
          ],
          "id": "bffa565b-2f08-4615-89e5-db3be8280d2e",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {},
          "type": "@custom-js/n8n-nodes-pdf-toolkit.PdfToPng",
          "typeVersion": 1,
          "position": [
            -3040,
            -420
          ],
          "id": "3d37a151-a9bc-4135-86d4-7ea9bad7a844",
          "name": "Convert PDF into PNG",
          "alwaysOutputData": false,
          "credentials": {
            "customJsApi": {
              "id": "wdIdfYBJiN1MGEjP",
              "name": "CustomJS account"
            }
          }
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -1832,
            40
          ],
          "id": "b4d1b7df-c7f0-48aa-9514-eb3af3e7f852",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "={{$json.completePath}}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -1842,
            220
          ],
          "id": "13de62f2-0f58-4790-9f74-ca9e3408cb58",
          "name": "AWS S3",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "operation": "Convert from PDF",
            "url": "https://api.pdf.co/v1/pdf/convert/to/png",
            "convertType": "toPng",
            "advancedOptions_Image": {
              "pages": "1"
            }
          },
          "type": "n8n-nodes-pdfco.PDFco Api",
          "typeVersion": 1,
          "position": [
            -2380,
            80
          ],
          "id": "831ab842-1b9a-4d6f-8247-5c0f079fb3b4",
          "name": "PDFco Api",
          "credentials": {
            "pdfcoApi": {
              "id": "PAcs9bTz82LKZSjr",
              "name": "PDF.co account"
            }
          }
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text Processing & Setup": {
          "main": [
            [
              {
                "node": "PDFco Api",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            []
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Text Processing & Setup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "AWS S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Convert PDF into PNG": {
          "main": [
            []
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDFco Api": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "22a1a5c2-b015-4fb3-abbf-e85806fccd14",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-08T22:00:23.808Z",
      "updatedAt": "2025-06-11T20:16:36.069Z",
      "id": "buzUIdDZpC934w6c",
      "name": "My workflow 3",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hi there! 👋\nMy name is Xara. How can I assist you today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "db22b5fc-ed55-450e-9ee9-91e3be9f3ae8",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            -420,
            280
          ],
          "webhookId": "095537c6-b21a-4cb2-8312-13b1bf1699dc",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "options": {
              "systemMessage": "=You are an AI-powered chatbot assistant for a website. Your primary function is to assist users by answering their queries and providing relevant information. You have access to a web_search tool that allows you to browse the internet for up-to-date information. Here's how you should operate:\n\n1. Website Information:\nFamiliarize yourself with this information about the website you're assisting. Use this as context for user interactions.\n\n2. Web Search Tool:\nYou have access to a web_search tool that can browse the internet. To use it, write the variable {web_search_question}. The tool will return relevant search results.\n\n3. Handling User Queries:\nWhen a user asks a question, follow these steps:\na) Analyze the query to determine if it's related to the website or requires external information.\nb) If the query is about the website, use the provided website information to answer.\nc) If external information is needed, use the web_search tool to find relevant data.\n\n4. Using web_search:\n- Use web_search for factual, current information that isn't provided in the website info.\n- Formulate clear, concise search queries.\n- If the first search doesn't yield useful results, refine your query and search again.\n- Limit searches to a maximum of three per user query to maintain efficiency.\n\n5. Using Think:\n- Using Think tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed.\n\n6. Formulating Responses:\n- Begin with information from the website if relevant.\n- Incorporate web search results to provide up-to-date, accurate information.\n- Summarize findings concisely and coherently.\n- If you're unsure or can't find reliable information, be honest about limitations.\n\n7. Ethical Considerations:\n- Respect user privacy. Don't ask for or store personal information.\n- Provide factual information. Avoid speculation or unverified claims.\n- If asked about controversial topics, strive for a balanced, neutral response.\n- Don't engage in or encourage illegal activities.\n\n8. Output Format:\nDo not include your thought process, web searches, or any other tags in the final output.\n\n9. Code Formatting:\n- Always use proper markdown formatting for code blocks\n- Use triple backticks (```) with language specification: ```javascript, ```python, ```json\n- Use single backticks (`) for inline code\n- Ensure proper indentation and spacing\n- Add blank lines before and after code blocks for better readability.\n -\"Always format JSON with proper indentation\"\n -\"Use triple backticks with 'json' language specification\"\n -\"Never output minified or compressed JSON\""
            }
          },
          "id": "c9a55f31-bce5-4a7f-a651-6d8238c10f0c",
          "name": "AI Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -108,
            280
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-sonnet-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Sonnet 4"
            },
            "options": {
              "maxTokensToSample": 1024,
              "thinking": false
            }
          },
          "id": "518b2595-456f-4def-b6d0-db4ea78cc2df",
          "name": "Anthropic Chat Model",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -200,
            500
          ],
          "typeVersion": 1.3,
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {},
          "id": "41a2f54a-4ad1-403b-963c-df413fe607d9",
          "name": "Simple Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "position": [
            -80,
            500
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "toolDescription": "Use this tool to search on the web",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/jso"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', `{\n  \"model\": \"claude-3-7-sonnet-latest\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_question}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}\n`, 'json') }}",
            "options": {}
          },
          "id": "e2e34e80-83b6-41f6-ae42-79187c790b31",
          "name": "web_search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            160,
            500
          ],
          "typeVersion": 4.2,
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {},
          "id": "bc0578ab-7644-408e-a1ff-c32b7ec98888",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            40,
            500
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-04-17",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -340,
            500
          ],
          "id": "b5086ce1-21f2-4e44-b0d1-f8c7bf0c941f",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        }
      ],
      "connections": {
        "Think": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "web_search": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Simple Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            []
          ]
        },
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "1758f57a-5af4-4d12-9fc7-cc92ddbf39d5",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-06T00:27:59.511Z",
      "updatedAt": "2025-06-08T18:28:43.866Z",
      "id": "nFynNmq0XTy5yiyD",
      "name": "My workflow Rail",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -3240,
            -280
          ],
          "id": "a0dac88e-e9fb-45fd-9c62-fe3e8b694f28",
          "name": "On form submission",
          "webhookId": "f766ed71-52de-4747-bf1e-2020cbe40928"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -2980,
            -195
          ],
          "id": "7aeed6c3-275e-4d68-b974-1aa8a5c5eb00",
          "name": "Extract from File",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2540,
            -270
          ],
          "id": "73795686-02ba-4abc-8bff-321d11806730",
          "name": "Text Processing & Setup"
        },
        {
          "parameters": {
            "url": "={{ $json.urls[0] }}",
            "options": {
              "response": {
                "response": {
                  "neverError": true,
                  "responseFormat": "file",
                  "outputPropertyName": "coverImage"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1660,
            -270
          ],
          "id": "1e5564d4-e07e-4332-bf5a-69e0cd0608cb",
          "name": "Download Cover Image"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -1220,
            -520
          ],
          "id": "73cbccc1-9c3f-496b-b6e8-3265b4fa6b8b",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -844,
            -420
          ],
          "id": "1d1e317c-d4ec-4514-a09d-a7e2fc628e08",
          "name": "Process AI Output"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-opus-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Opus 4"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -1132,
            -300
          ],
          "id": "fc9f1604-5f71-4a17-bf3e-0851c8038584",
          "name": "Anthropic Chat Model",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/file/upload/base64",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBearerAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "=bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{$json}}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2100,
            -270
          ],
          "id": "13f26ca1-36f9-48db-8f8f-c9f8bd290286",
          "name": "Upload PDF to PDF.co1",
          "credentials": {
            "httpBearerAuth": {
              "id": "K1q8u1aqz0KKzpwN",
              "name": "Bearer Auth account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.pdf.co/v1/pdf/convert/to/png",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "x-api-key",
                  "value": "bright@zumbador.com_YOhLhWaPTC9iNLyMEqLxj36vozhJA8LUQy5a0QXlKjBhdZdDEA95w61lILhWIWsl"
                },
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json.url }}\",\n  \"pages\": \"\",\n  \"inline\": true,\n  \"async\": false\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1880,
            -270
          ],
          "id": "66e4e3bd-fee7-4c1b-9079-44b73821b94d",
          "name": "PDF to PNG conversion"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -2760,
            -270
          ],
          "id": "a9356590-3f58-474f-9bec-c37dc1376da7",
          "name": "Merge"
        },
        {
          "parameters": {
            "jsCode": "const binaryData = $input.first().binary.data;\nconst fileName = binaryData.fileName || 'document.pdf';\nconst buffer = await this.helpers.getBinaryDataBuffer(0, 'data');\nconst fileBase64 = buffer.toString('base64');\nreturn [{\n  json: {\n    file: `data:application/pdf;base64,${fileBase64}`,\n    name: fileName\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2320,
            -270
          ],
          "id": "f7b21363-49d3-4cbf-b16f-bfe1edc93367",
          "name": "Code"
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "=ban/pdf_summary/{{ $json.coverImageFileName }}",
            "binaryPropertyName": "coverImage",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -1142,
            -120
          ],
          "id": "67cee06a-0e5f-49d2-95c1-fca1fcc7f0e3",
          "name": "AWS S3",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -624,
            -270
          ],
          "id": "09294a71-2720-4961-aeeb-878e6a832a60",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Try to get the existing fileName, or generate a unique one\nlet fileName = 'default.png';\n\nif (input.binary && input.binary.coverImage) {\n  if (input.binary.coverImage.fileName) {\n    // Use existing fileName if available\n    fileName = input.binary.coverImage.fileName;\n  } else {\n    // Generate a unique filename using timestamp\n    const timestamp = Date.now();\n    const randomSuffix = Math.random().toString(36).substring(2, 8);\n    fileName = `cover_${timestamp}_${randomSuffix}.png`;\n  }\n}\n\nreturn [{\n  json: {\n    ...input.json,\n    coverImageFileName: fileName\n  },\n  binary: input.binary\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1440,
            -120
          ],
          "id": "f2f6dee8-4626-4d33-9341-55e3a41a88e4",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -844,
            -120
          ],
          "id": "00f89074-471a-4e1a-8c96-4443f51ba741",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -404,
            -270
          ],
          "id": "6cc851d9-8956-44ac-8a9f-70ff5e7f15cd",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {},
          "id": "6328576f-80af-4cdd-9ba6-134f6f3a65eb",
          "name": "When clicking \"Test workflow\"",
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            -2380,
            140
          ]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "http://10.10.200.46:8081/api/v1/convert/pdf/img",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "multipart/form-data"
                }
              ]
            },
            "sendBody": true,
            "contentType": "multipart-form-data",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "imageFormat",
                  "value": "png"
                },
                {
                  "parameterType": "formBinaryData",
                  "name": "fileInput",
                  "inputDataFieldName": "data"
                },
                {
                  "name": "singleOrMultiple",
                  "value": "muliple"
                },
                {
                  "name": "colorType",
                  "value": "color"
                },
                {
                  "name": "dpi",
                  "value": "72"
                }
              ]
            },
            "options": {}
          },
          "id": "8b648082-9a29-4d01-8d64-a0d92af579d7",
          "name": "HTTP Request | convert to IMG",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [
            -1940,
            140
          ]
        },
        {
          "parameters": {
            "url": "https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf",
            "options": {}
          },
          "id": "5cf0e9af-13d4-42dd-a1dd-6e305bbc20fa",
          "name": "HTTP Request | download dummy PDF",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [
            -2160,
            140
          ]
        },
        {
          "parameters": {
            "content": "## Sterling-PDF",
            "height": 320,
            "width": 800
          },
          "type": "n8n-nodes-base.stickyNote",
          "typeVersion": 1,
          "position": [
            -2480,
            60
          ],
          "id": "f849271c-b2ad-46d9-8856-61ffa4d3524c",
          "name": "Sticky Note",
          "disabled": true
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text Processing & Setup": {
          "main": [
            [
              {
                "node": "Code",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Cover Image": {
          "main": [
            [
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              },
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Upload PDF to PDF.co1": {
          "main": [
            [
              {
                "node": "PDF to PNG conversion",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDF to PNG conversion": {
          "main": [
            [
              {
                "node": "Download Cover Image",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Text Processing & Setup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code": {
          "main": [
            [
              {
                "node": "Upload PDF to PDF.co1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "AWS S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "When clicking \"Test workflow\"": {
          "main": [
            [
              {
                "node": "HTTP Request | download dummy PDF",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request | download dummy PDF": {
          "main": [
            [
              {
                "node": "HTTP Request | convert to IMG",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request | convert to IMG": {
          "main": [
            []
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "32808fce-b517-4692-a979-0431faae04a9",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-11T22:46:42.915Z",
      "updatedAt": "2025-06-11T22:47:11.509Z",
      "id": "TwJhLyxHL1QYvM74",
      "name": "Chat bot",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hi there! 👋\nMy name is Xara. How can I assist you today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "891d02e1-a515-4951-a5e2-e491d153d129",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            0,
            0
          ],
          "webhookId": "095537c6-b21a-4cb2-8312-13b1bf1699dc",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "options": {
              "systemMessage": "=You are an AI-powered chatbot assistant for a website. Your primary function is to assist users by answering their queries and providing relevant information. You have access to a web_search tool that allows you to browse the internet for up-to-date information. Here's how you should operate:\n\n1. Website Information:\nFamiliarize yourself with this information about the website you're assisting. Use this as context for user interactions.\n\n2. Web Search Tool:\nYou have access to a web_search tool that can browse the internet. To use it, write the variable {web_search_question}. The tool will return relevant search results.\n\n3. Handling User Queries:\nWhen a user asks a question, follow these steps:\na) Analyze the query to determine if it's related to the website or requires external information.\nb) If the query is about the website, use the provided website information to answer.\nc) If external information is needed, use the web_search tool to find relevant data.\n\n4. Using web_search:\n- Use web_search for factual, current information that isn't provided in the website info.\n- Formulate clear, concise search queries.\n- If the first search doesn't yield useful results, refine your query and search again.\n- Limit searches to a maximum of three per user query to maintain efficiency.\n\n5. Using Think:\n- Using Think tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed.\n\n6. Formulating Responses:\n- Begin with information from the website if relevant.\n- Incorporate web search results to provide up-to-date, accurate information.\n- Summarize findings concisely and coherently.\n- If you're unsure or can't find reliable information, be honest about limitations.\n\n7. Ethical Considerations:\n- Respect user privacy. Don't ask for or store personal information.\n- Provide factual information. Avoid speculation or unverified claims.\n- If asked about controversial topics, strive for a balanced, neutral response.\n- Don't engage in or encourage illegal activities.\n\n8. Output Format:\nDo not include your thought process, web searches, or any other tags in the final output.\n\n9. Code Formatting:\n- Always use proper markdown formatting for code blocks\n- Use triple backticks (```) with language specification: ```javascript, ```python, ```json\n- Use single backticks (`) for inline code\n- Ensure proper indentation and spacing\n- Add blank lines before and after code blocks for better readability.\n -\"Always format JSON with proper indentation\"\n -\"Use triple backticks with 'json' language specification\"\n -\"Never output minified or compressed JSON\""
            }
          },
          "id": "df9aa7a3-e0f1-4e86-a635-f1e17d51890f",
          "name": "AI Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            320,
            0
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {},
          "id": "dbf40be6-56be-4866-ade3-93927933ed14",
          "name": "Simple Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "position": [
            340,
            220
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "toolDescription": "Use this tool to search on the web",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/jso"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', `{\n  \"model\": \"claude-3-7-sonnet-latest\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_question}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}\n`, 'json') }}",
            "options": {}
          },
          "id": "44d2dc95-c013-4252-a776-33f181377445",
          "name": "web_search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            580,
            220
          ],
          "typeVersion": 4.2,
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {},
          "id": "10147be3-8e39-42ab-9256-8ca957ab2dfb",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            460,
            220
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-04-17",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            80,
            220
          ],
          "id": "fdf97be5-c7b3-4d91-9ceb-a94fa49ba31d",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        }
      ],
      "connections": {
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Simple Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "web_search": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "62595539-f9a7-47d9-ba9c-55d44e061e8f",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-11T21:07:49.811Z",
      "updatedAt": "2025-06-12T11:40:48.046Z",
      "id": "3SWkU5PfqjCAKxgO",
      "name": "Publish Article to Joomla",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "jsCode": "// Combine all AI research results into a structured format\nconst trendsData = $('AI Trends Research (GPT-4 with Web)').item.json;\nconst expertData = $('AI Expert Analysis (Claude with Web)').item.json;\nconst practicesData = $('AI Best Practices Research Anthropic').item.json;\n\n// Extract content from different AI responses\nlet trendsContent = '';\nlet expertContent = '';\nlet practicesContent = '';\n\n// Handle GPT-4 response\nif (trendsData && trendsData.choices && trendsData.choices[0]) {\n  trendsContent = trendsData.choices[0].message.content;\n} else if (trendsData && trendsData.message) {\n  trendsContent = trendsData.message.content;\n}\n\n// Handle Claude response\nif (expertData && expertData.content) {\n  expertContent = expertData.content;\n} else if (expertData && expertData.message) {\n  expertContent = expertData.message.content;\n}\n\n// Handle Perplexity response\nif (practicesData && practicesData.choices && practicesData.choices[0]) {\n  practicesContent = practicesData.choices[0].message.content;\n} else if (practicesData && practicesData.message) {\n  practicesContent = practicesData.message.content;\n}\n\n// Combine all research into a comprehensive summary\nconst combinedResearch = `\n=== TRENDS AND DEVELOPMENTS RESEARCH ===\n${trendsContent}\n\n=== EXPERT ANALYSIS AND INSIGHTS ===\n${expertContent}\n\n=== BEST PRACTICES AND IMPLEMENTATION GUIDES ===\n${practicesContent}\n`;\n\nreturn {\n  combined_research: combinedResearch,\n  trends_research: trendsContent,\n  expert_analysis: expertContent,\n  best_practices: practicesContent,\n  topic: $('Manual Trigger').item.json.topic,\n  research_sections: 3,\n  timestamp: new Date().toISOString()\n};"
          },
          "id": "0250823d-5d3d-4b17-990a-e5406cc0dce2",
          "name": "Combine AI Research",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -4260,
            920
          ]
        },
        {
          "parameters": {
            "jsCode": "// Format the article content for Joomla with enhanced processing\nconst article = $('Generate Comprehensive Article').item.json.message.content;\nconst seoDataRaw = $json.message.content;\nconst originalTopic = $('Combine AI Research').item.json.topic;\n\n// Parse SEO data (handle potential JSON parsing issues)\nlet seoData;\ntry {\n  seoData = JSON.parse(seoDataRaw);\n} catch (e) {\n  // Fallback if JSON parsing fails\n  seoData = {\n    seo_title: originalTopic,\n    social_title: originalTopic,\n    meta_description: `Comprehensive guide to ${originalTopic}`,\n    tags: [originalTopic.split(' ')[0], originalTopic.split(' ')[1] || 'guide'],\n    alias: originalTopic.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-'),\n    excerpt: `Learn everything about ${originalTopic} in this comprehensive guide.`\n  };\n}\n\n// Enhanced content formatting for Joomla\nlet formattedContent = article\n  // Convert markdown headers to HTML\n  .replace(/^### (.*$)/gm, '<h4>$1</h4>')\n  .replace(/^## (.*$)/gm, '<h3>$1</h3>')\n  .replace(/^# (.*$)/gm, '<h2>$1</h2>')\n  // Convert bold text\n  .replace(/\\*\\*(.*?)\\*\\*/g, '<strong>$1</strong>')\n  // Convert italic text\n  .replace(/\\*(.*?)\\*/g, '<em>$1</em>')\n  // Convert bullet points to HTML lists\n  .replace(/^- (.*$)/gm, '<li>$1</li>')\n  // Wrap consecutive list items in <ul> tags\n  .replace(/(<li>.*<\\/li>)(\\s*<li>.*<\\/li>)*/gs, '<ul>$&</ul>')\n  // Convert paragraphs\n  .replace(/\\n\\n+/g, '</p>\\n\\n<p>')\n  .replace(/\\n/g, '<br>')\n  .replace(/^/, '<p>')\n  .replace(/$/, '</p>');\n\n// Clean up formatting issues\nformattedContent = formattedContent\n  .replace(/<p><h([1-6])>/g, '<h$1>')\n  .replace(/<\\/h([1-6])><\\/p>/g, '</h$1>')\n  .replace(/<p><ul>/g, '<ul>')\n  .replace(/<\\/ul><\\/p>/g, '</ul>')\n  .replace(/<p><\\/p>/g, '')\n  .replace(/<p>\\s*<br>/g, '<p>')\n  .replace(/<br>\\s*<\\/p>/g, '</p>')\n  .replace(/<br>\\s*<h([1-6])>/g, '<h$1>')\n  .replace(/<\\/h([1-6])>\\s*<br>/g, '</h$1>');\n\n// Create introtext (first paragraph or first 300 characters)\nlet introText = formattedContent.match(/<p>(.*?)<\\/p>/)?.[1] || formattedContent.substring(0, 300);\nif (introText.length > 300) {\n  introText = introText.substring(0, 297) + '...';\n}\n\n// Generate current timestamp for created date\nconst now = new Date();\nconst mysqlDateTime = now.toISOString().slice(0, 19).replace('T', ' ');\n\nreturn {\n  title: seoData.seo_title,\n  alias: seoData.alias,\n  introtext: introText,\n  fulltext: formattedContent,\n  metadesc: seoData.meta_description,\n  metakey: Array.isArray(seoData.tags) ? seoData.tags.join(', ') : seoData.tags,\n  state: 1, // Published\n  catid: $('Manual Trigger').item.json.categoryId || 2,\n  created_by: $('Manual Trigger').item.json.authorId || 1,\n  language: '*',\n  access: 1,\n  featured: $('Manual Trigger').item.json.featured || 0,\n  created: mysqlDateTime,\n  publish_up: mysqlDateTime,\n  originalTopic: originalTopic,\n  socialTitle: seoData.social_title,\n  excerpt: seoData.excerpt,\n  wordCount: article.split(' ').length,\n  researched_by: 'AI Agents (GPT-4, Claude, Perplexity)'\n};"
          },
          "id": "5d513416-a1e9-480b-a572-74ca605c6740",
          "name": "Format Content for Joomla",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1440,
            920
          ]
        },
        {
          "parameters": {
            "method": "POST",
            "url": "=https://businessaviation.aero/api/index.php/v1/content/articles",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpBasicAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                },
                {
                  "name": "Accept",
                  "value": "application/vnd.api+json"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "title",
                  "value": "={{ $json.title }}"
                },
                {
                  "name": "alias",
                  "value": "={{ $json.alias }}"
                },
                {
                  "name": "introtext",
                  "value": "={{ $json.introtext }}"
                },
                {
                  "name": "fulltext",
                  "value": "={{ $json.fulltext }}"
                },
                {
                  "name": "state",
                  "value": "={{ $json.state }}"
                },
                {
                  "name": "catid",
                  "value": "={{ $json.catid }}"
                },
                {
                  "name": "created_by",
                  "value": "={{ $json.created_by }}"
                },
                {
                  "name": "language",
                  "value": "={{ $json.language }}"
                },
                {
                  "name": "access",
                  "value": "={{ $json.access }}"
                },
                {
                  "name": "featured",
                  "value": "={{ $json.featured }}"
                },
                {
                  "name": "metadesc",
                  "value": "={{ $json.metadesc }}"
                },
                {
                  "name": "metakey",
                  "value": "={{ $json.metakey }}"
                },
                {
                  "name": "created",
                  "value": "={{ $json.created }}"
                },
                {
                  "name": "publish_up",
                  "value": "={{ $json.publish_up }}"
                }
              ]
            },
            "options": {
              "redirect": {
                "redirect": {
                  "maxRedirects": 3
                }
              },
              "timeout": 45000
            }
          },
          "id": "8f6adc03-c736-41c6-af80-276e41c69657",
          "name": "Publish to Joomla (API)",
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.1,
          "position": [
            -1240,
            880
          ],
          "credentials": {
            "httpBasicAuth": {
              "id": "3MTb1R46dZOzkgip",
              "name": "Admin"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// Prepare comprehensive workflow execution summary\nconst joomlaResponse = $('Publish to Joomla (API)').item.json;\nconst articleData = $('Format Content for Joomla').item.json;\nconst researchData = $('Combine AI Research').item.json;\n\n// Determine success status\nlet success = false;\nlet message = '';\nlet articleId = null;\nlet articleUrl = '';\n\nconst statusCode = $('Publish to Joomla (API)').item.statusCode;\n\nif (statusCode >= 200 && statusCode < 300) {\n  success = true;\n  message = 'Article successfully researched by AI agents and published to Joomla!';\n  \n  // Try to extract article ID from response\n  if (joomlaResponse && joomlaResponse.data && joomlaResponse.data.id) {\n    articleId = joomlaResponse.data.id;\n  } else if (joomlaResponse && joomlaResponse.id) {\n    articleId = joomlaResponse.id;\n  }\n  \n  // Construct article URL if we have the ID\n  if (articleId) {\n    const baseUrl = $('Manual Trigger').item.json.joomlaUrl;\n    articleUrl = `${baseUrl}/${articleData.alias || articleId}`;\n  }\n} else {\n  message = `Failed to publish to Joomla. Status: ${statusCode}. Check your Joomla API credentials and URL.`;\n}\n\n// Calculate research quality metrics\nconst researchQuality = {\n  sections_researched: researchData.research_sections || 0,\n  trends_data_length: researchData.trends_research ? researchData.trends_research.length : 0,\n  expert_analysis_length: researchData.expert_analysis ? researchData.expert_analysis.length : 0,\n  best_practices_length: researchData.best_practices ? researchData.best_practices.length : 0\n};\n\nreturn {\n  success: success,\n  message: message,\n  execution_summary: {\n    article_title: articleData.title,\n    article_alias: articleData.alias,\n    article_id: articleId,\n    article_url: articleUrl,\n    word_count: articleData.wordCount,\n    original_topic: articleData.originalTopic,\n    published_at: new Date().toISOString(),\n    research_method: articleData.researched_by,\n    category_id: articleData.catid,\n    author_id: articleData.created_by,\n    seo_title: articleData.title,\n    meta_description: articleData.metadesc,\n    tags: articleData.metakey\n  },\n  research_quality: researchQuality,\n  ai_agents_used: [\n    'GPT-4 with Web Search (Trends Research)',\n    'Claude with Web Search (Expert Analysis)', \n    'Perplexity AI (Best Practices Research)'\n  ],\n  joomla_response: joomlaResponse,\n  status_code: statusCode,\n  workflow_duration: 'Completed',\n  next_steps: success ? [\n    'Review published article for accuracy',\n    'Share on social media platforms',\n    'Monitor article performance',\n    'Consider follow-up articles on related topics'\n  ] : [\n    'Check Joomla API credentials',\n    'Verify Joomla URL and API endpoint',\n    'Review article content for any formatting issues',\n    'Retry publication after fixing issues'\n  ]\n};"
          },
          "id": "dcf420b6-f33a-4748-b826-a276ba64927b",
          "name": "Comprehensive Workflow Summary",
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1000,
            920
          ]
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -4640,
            420
          ],
          "id": "35caee3b-dda0-447f-9000-7514d0bf8bbc",
          "name": "AI Trends Research (GPT-4 with Web)"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "gpt-4o-mini"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
          "typeVersion": 1.2,
          "position": [
            -4560,
            640
          ],
          "id": "c5eef298-ab2e-4d0c-b070-7e1914fdb189",
          "name": "OpenAI Chat Model"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-sonnet-4-20250514",
              "cachedResultName": "Claude 4 Sonnet"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -4560,
            1040
          ],
          "id": "5fa6db25-9458-43d0-8678-605fa02b5990",
          "name": "Anthropic Chat Model",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -4640,
            820
          ],
          "id": "d391edf2-84d0-488b-9126-120019319546",
          "name": "AI Best Practices Research Anthropic"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -4560,
            1540
          ],
          "id": "84fbcac7-c963-4679-930f-8106d0849135",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -4640,
            1320
          ],
          "id": "47d62531-989f-41d2-b339-b2b7f2fee1db",
          "name": "AI Expert Analysis Gemini"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -4040,
            920
          ],
          "id": "b58c67cc-2431-4566-9651-8a9260df1a0f",
          "name": "Generate Comprehensive Article"
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-sonnet-4-20250514",
              "cachedResultName": "Claude 4 Sonnet"
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -3960,
            1140
          ],
          "id": "29a340c2-718b-4399-bebc-62abaaffb129",
          "name": "Anthropic Chat Model1",
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -3660,
            920
          ],
          "id": "6f5dfac8-b8cf-40a3-b580-9945b549cb76",
          "name": "Hallucination/Fact check"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -3580,
            1140
          ],
          "id": "9feb3204-f0c1-4e52-89a0-a61fd7f4ff8c",
          "name": "Google Gemini Chat Model1",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -3300,
            920
          ],
          "id": "4007d0a3-adb8-429d-b0b6-973adf09be60",
          "name": "SEO Meta data"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -3200,
            1140
          ],
          "id": "00692f24-3c71-4190-a0e6-45c1bfdc660d",
          "name": "Google Gemini Chat Model2",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -2480,
            1040
          ],
          "id": "6e5905a7-c70c-4f7b-b32c-646f5b80a312",
          "name": "Gemini Vision"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -2380,
            1260
          ],
          "id": "4a775931-0b7a-49bf-bae3-f8978ff38843",
          "name": "Google Gemini Chat Model3",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2920,
            920
          ],
          "id": "0b617319-9988-4dd1-aec4-36063f9fe304",
          "name": "Extract H2,s"
        },
        {
          "parameters": {
            "jsCode": "// Loop over input items and add a new field called 'myNewField' to the JSON of each one\nfor (const item of $input.all()) {\n  item.json.myNewField = 1;\n}\n\nreturn $input.all();"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1660,
            920
          ],
          "id": "4aba7b1e-1ac7-4b48-b9d0-d9d87eded24f",
          "name": "Inject <figure> markup"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -1880,
            920
          ],
          "id": "1a757233-12a6-4164-bef9-9421379027e0",
          "name": "Merge"
        },
        {
          "parameters": {
            "method": "PUT",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2100,
            1040
          ],
          "id": "85724f44-a098-43aa-b760-0103563578e3",
          "name": "Upload media to joomla"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            -2700,
            920
          ],
          "id": "250c417c-3d08-47f0-a77d-d667e51e2ce9",
          "name": "Split Out"
        },
        {
          "parameters": {
            "public": true,
            "initialMessages": "Hi there! 👋\nMy name is Xara. How can I assist you today?",
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "c7a52126-48f1-45f1-b872-97b4a063f2ee",
          "name": "When chat message received",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "position": [
            -5420,
            920
          ],
          "webhookId": "095537c6-b21a-4cb2-8312-13b1bf1699dc",
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "options": {
              "systemMessage": "=You are an AI-powered chatbot assistant for a website. Your primary function is to assist users by answering their queries and providing relevant information. You have access to a web_search tool that allows you to browse the internet for up-to-date information. Here's how you should operate:\n\n1. Website Information:\nFamiliarize yourself with this information about the website you're assisting. Use this as context for user interactions.\n\n2. Web Search Tool:\nYou have access to a web_search tool that can browse the internet. To use it, write the variable {web_search_question}. The tool will return relevant search results.\n\n3. Handling User Queries:\nWhen a user asks a question, follow these steps:\na) Analyze the query to determine if it's related to the website or requires external information.\nb) If the query is about the website, use the provided website information to answer.\nc) If external information is needed, use the web_search tool to find relevant data.\n\n4. Using web_search:\n- Use web_search for factual, current information that isn't provided in the website info.\n- Formulate clear, concise search queries.\n- If the first search doesn't yield useful results, refine your query and search again.\n- Limit searches to a maximum of three per user query to maintain efficiency.\n\n5. Using Think:\n- Using Think tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed.\n\n6. Formulating Responses:\n- Begin with information from the website if relevant.\n- Incorporate web search results to provide up-to-date, accurate information.\n- Summarize findings concisely and coherently.\n- If you're unsure or can't find reliable information, be honest about limitations.\n\n7. Ethical Considerations:\n- Respect user privacy. Don't ask for or store personal information.\n- Provide factual information. Avoid speculation or unverified claims.\n- If asked about controversial topics, strive for a balanced, neutral response.\n- Don't engage in or encourage illegal activities.\n\n8. Output Format:\nDo not include your thought process, web searches, or any other tags in the final output.\n\n9. Code Formatting:\n- Always use proper markdown formatting for code blocks\n- Use triple backticks (```) with language specification: ```javascript, ```python, ```json\n- Use single backticks (`) for inline code\n- Ensure proper indentation and spacing\n- Add blank lines before and after code blocks for better readability.\n -\"Always format JSON with proper indentation\"\n -\"Use triple backticks with 'json' language specification\"\n -\"Never output minified or compressed JSON\""
            }
          },
          "id": "0a4d2fc2-c5bf-441a-b29c-573f0a743cdd",
          "name": "AI Agent",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "position": [
            -5100,
            920
          ],
          "typeVersion": 1.9
        },
        {
          "parameters": {},
          "id": "97e93705-1fa1-4ff2-a19d-f7b9189753ca",
          "name": "Simple Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "position": [
            -5080,
            1140
          ],
          "typeVersion": 1.3
        },
        {
          "parameters": {
            "toolDescription": "Use this tool to search on the web",
            "method": "POST",
            "url": "https://api.anthropic.com/v1/messages",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "anthropicApi",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "anthropic-version",
                  "value": "2023-06-01"
                },
                {
                  "name": "content-type",
                  "value": "application/jso"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={{ /*n8n-auto-generated-fromAI-override*/ $fromAI('JSON', `{\n  \"model\": \"claude-3-7-sonnet-latest\",\n  \"max_tokens\": 1024,\n  \"messages\": [\n    {\n      \"role\": \"user\",\n      \"content\": \"{web_search_question}\"\n    }\n  ],\n  \"tools\": [\n    {\n      \"type\": \"web_search_20250305\",\n      \"name\": \"web_search\",\n      \"max_uses\": 5\n    }\n  ]\n}\n`, 'json') }}",
            "options": {}
          },
          "id": "64f3b275-9e14-4717-a2f0-d08db2cb63ab",
          "name": "web_search",
          "type": "n8n-nodes-base.httpRequestTool",
          "position": [
            -4960,
            1140
          ],
          "typeVersion": 4.2,
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {},
          "id": "4d760578-faac-4d27-b524-9aef8fb833df",
          "name": "Think",
          "type": "@n8n/n8n-nodes-langchain.toolThink",
          "position": [
            -4840,
            1140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "value": "claude-sonnet-4-20250514",
              "mode": "list",
              "cachedResultName": "Claude Sonnet 4"
            },
            "options": {
              "maxTokensToSample": 1024,
              "thinking": false
            }
          },
          "id": "233e18be-0020-4d59-8a47-ed9c50b3638b",
          "name": "Anthropic Chat Model2",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "position": [
            -5420,
            1680
          ],
          "typeVersion": 1.3,
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-04-17",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -5200,
            1140
          ],
          "id": "abdff0fd-9f10-4cdb-bf1f-2e7b4f18b215",
          "name": "Google Gemini Chat Model4",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        }
      ],
      "connections": {
        "Combine AI Research": {
          "main": [
            [
              {
                "node": "Generate Comprehensive Article",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Content for Joomla": {
          "main": [
            [
              {
                "node": "Publish to Joomla (API)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Publish to Joomla (API)": {
          "main": [
            [
              {
                "node": "Comprehensive Workflow Summary",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Trends Research (GPT-4 with Web)": {
          "main": [
            [
              {
                "node": "Combine AI Research",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "OpenAI Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Trends Research (GPT-4 with Web)",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Best Practices Research Anthropic",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Best Practices Research Anthropic": {
          "main": [
            [
              {
                "node": "Combine AI Research",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Expert Analysis Gemini",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Expert Analysis Gemini": {
          "main": [
            [
              {
                "node": "Combine AI Research",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Anthropic Chat Model1": {
          "ai_languageModel": [
            [
              {
                "node": "Generate Comprehensive Article",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Generate Comprehensive Article": {
          "main": [
            [
              {
                "node": "Hallucination/Fact check",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model1": {
          "ai_languageModel": [
            [
              {
                "node": "Hallucination/Fact check",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model2": {
          "ai_languageModel": [
            [
              {
                "node": "SEO Meta data",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Hallucination/Fact check": {
          "main": [
            [
              {
                "node": "SEO Meta data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "SEO Meta data": {
          "main": [
            [
              {
                "node": "Extract H2,s",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model3": {
          "ai_languageModel": [
            [
              {
                "node": "Gemini Vision",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Gemini Vision": {
          "main": [
            [
              {
                "node": "Upload media to joomla",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract H2,s": {
          "main": [
            [
              {
                "node": "Split Out",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Inject <figure> markup": {
          "main": [
            [
              {
                "node": "Format Content for Joomla",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload media to joomla": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Inject <figure> markup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Out": {
          "main": [
            [
              {
                "node": "Gemini Vision",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When chat message received": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Simple Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "web_search": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Think": {
          "ai_tool": [
            [
              {
                "node": "AI Agent",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model4": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "AI Trends Research (GPT-4 with Web)",
                "type": "main",
                "index": 0
              },
              {
                "node": "AI Best Practices Research Anthropic",
                "type": "main",
                "index": 0
              },
              {
                "node": "AI Expert Analysis Gemini",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "791f735a-9764-4150-845a-3cceee12fbe4",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:02:14.998Z",
      "updatedAt": "2025-06-12T19:02:14.998Z",
      "id": "2BBdWOivGiy7fDIh",
      "name": "Static PDFs Into Conversational AI Bots",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "respondWith": "allIncomingItems",
            "options": {}
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.2,
          "position": [
            1476,
            -20
          ],
          "id": "5da0f1ac-86cc-4303-9ee2-ab1d04e41147",
          "name": "Respond to Webhook"
        },
        {
          "parameters": {
            "respondWith": "allIncomingItems",
            "options": {}
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.2,
          "position": [
            816,
            440
          ],
          "id": "2e301d3c-0a0b-4270-8ce6-7917bab3e3c3",
          "name": "Respond to Webhook1"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.mistral.ai/v1/files",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "contentType": "multipart-form-data",
            "bodyParameters": {
              "parameters": [
                {
                  "name": "purpose",
                  "value": "ocr"
                },
                {
                  "parameterType": "formBinaryData",
                  "name": "file",
                  "inputDataFieldName": "pdf"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            0,
            -20
          ],
          "id": "a58468fd-52fe-4b92-83dd-d37f272dda8c",
          "name": "HTTP Request"
        },
        {
          "parameters": {
            "url": "=https://api.mistral.ai/v1/files/{{ $json.id }}/url",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "expiry",
                  "value": "24"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            220,
            -20
          ],
          "id": "03771f6c-be75-4f90-a32d-5720f502aa89",
          "name": "HTTP Request1"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.mistral.ai/v1/ocr",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"model\": \"mistral-ocr-latest\",\n  \"document\": {\n    \"type\": \"document_url\",\n    \"document_url\": \"{{ $json.url }}\"\n  },\n  \"include_image_base64\": true\n}",
            "options": {
              "response": {
                "response": {
                  "responseFormat": "json"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            440,
            -20
          ],
          "id": "93b460e7-f4a7-412d-bb14-a554b2730db5",
          "name": "HTTP Request2"
        },
        {
          "parameters": {
            "jsCode": "const data = $input.first().json;\n\nconst pages = data.pages;\nconst pagesProcessed = data.usage_info?.pages_processed || 0;\n\nconst combinedMarkdown = pages\n  .map(page => page.markdown || '') // ensure safety on missing markdown\n  .join('\\n\\n'); // separate with double newlines\n\nreturn [{\n  json: {\n    combinedMarkdown,\n    pagesProcessed\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            660,
            -20
          ],
          "id": "534d6eda-b9e8-4796-a40d-78e8d43f4faf",
          "name": "Code"
        },
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "receive-pdf",
            "responseMode": "responseNode",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            -220,
            -20
          ],
          "id": "b0e84629-5510-4d17-b560-1d5d760de9a9",
          "name": "PDF RECIEVER",
          "webhookId": "a88a8171-43a6-4a0a-b351-669b761c4f80"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are an expert content analyst. Analyze the following complete markdown of a PDF. Read through all sections carefully, identify the core themes, key points, and important takeaways. Then, write a concise summary of the entire PDF in exactly 75 words. Focus on what the PDF is about, who it’s for, what problems it addresses, and the main conclusions or insights. Avoid unnecessary jargon. Keep the summary informative and clear.\nPages Proccesd : {{ $json.pagesProcessed }}\nMarkdown Content Starts Below:\n{{ $json.combinedMarkdown }}\n\ngive the language in full form",
            "hasOutputParser": true,
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 1.9,
          "position": [
            880,
            -20
          ],
          "id": "4f9adb12-3bff-4315-86dd-2e190787fb18",
          "name": "AI Agent"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.0-flash-thinking-exp-1219",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            908,
            200
          ],
          "id": "668e578b-7f7d-4370-b300-1cd24a17a90c",
          "name": "Google Gemini Chat Model"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"summary\": {\n      \"type\": \"string\",\n      \"description\": \"A 150-word summary of the document content\"\n    },\n    \"totalPages\": {\n      \"type\": \"integer\",\n      \"description\": \"The total number of pages processed in the document\"\n    },\n    \"totalWords\": {\n      \"type\": \"integer\",\n      \"description\": \"Total number of words in the document\"\n    },\n    \"language\": {\n      \"type\": \"string\",\n      \"description\": \"Language in which the document content is written\"\n    }\n  },\n  \"required\": [\"summary\", \"totalPages\", \"totalWords\", \"language\"]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            1028,
            200
          ],
          "id": "df6ed568-fdb5-4f54-81d9-5d48dcf3894a",
          "name": "Structured Output Parser"
        },
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "message-receive",
            "responseMode": "responseNode",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            -220,
            440
          ],
          "id": "ed8c9e19-afb3-490c-9995-6ba56843e269",
          "name": "Message Receiving webhook",
          "webhookId": "5221a79c-7222-4245-98ec-01d6b56d20c7"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=You are a helpful assistant for answering user queries based on uploaded PDF documents.\n\n**User's Question:**\n\n{{ $items(\"Message Receiving webhook\").map(i => i.json.body.message).join(\", \") }}\n\n\n**PDF Content Analysis:**\n{{ $json.formatted_text }}\n\n**Processing Summary:**\n- Unique PDFs processed: {{ $json.unique_count }}\n- Duplicates removed: Any PDFs with identical names were automatically filtered out\n- Content source: All information below comes from the {{ $json.unique_count }} unique PDF document(s)\n\n**Instructions:**\n1. Analyze all provided PDF content thoroughly\n2. Answer the user's question using only the information from these PDFs\n3. If referencing specific information, mention which PDF it came from\n4. If the question cannot be fully answered from the available PDFs, clearly state what information is missing\n5. Provide a clear, structured response that directly addresses the user's query\n\n**Response Guidelines:**\n- Be accurate and factual\n- Use clear, professional language\n- Organize information logically\n- Cite specific PDF sources when relevant\n- Acknowledge any limitations in the available data\n\nBegin your analysis and response now.\n",
            "hasOutputParser": true,
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 1.9,
          "position": [
            440,
            440
          ],
          "id": "f5e2164b-72e1-411c-8aad-780a6f1f8a81",
          "name": "AI Agent1"
        },
        {
          "parameters": {
            "schemaType": "manual",
            "inputSchema": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"answer\": {\n      \"type\": \"string\",\n      \"description\": \"The assistant's reply to the user's question based on the PDF content\"\n    },\n    \"relevanceScore\": {\n      \"type\": \"number\",\n      \"description\": \"A score between 0 and 1 indicating how confident the assistant is in the answer\"\n    }\n  },\n  \"required\": [\"answer\", \"relevanceScore\"]\n}\n"
          },
          "type": "@n8n/n8n-nodes-langchain.outputParserStructured",
          "typeVersion": 1.2,
          "position": [
            588,
            660
          ],
          "id": "6932d25d-ac49-47c6-a41a-78b035baa585",
          "name": "Structured Output Parser1"
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            468,
            660
          ],
          "id": "4e911f73-9aa5-4204-8445-d52cd98cb717",
          "name": "Google Gemini Chat Model1"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "12cb4e8f-0d26-4dd5-b8d0-69ed64e980dd",
                  "name": "Summary",
                  "value": "={{ $json.output.summary }}",
                  "type": "string"
                },
                {
                  "id": "9bae465b-33c7-4713-bfc9-7daf50e49ae7",
                  "name": "totalPages",
                  "value": "={{ $json.output.totalPages }}",
                  "type": "number"
                },
                {
                  "id": "2dc077df-5145-46da-97b2-886110bd6770",
                  "name": "totalWords",
                  "value": "={{ $json.output.totalWords }}",
                  "type": "number"
                },
                {
                  "id": "ef6bbccd-8882-4ca3-9d20-59d8f087f28a",
                  "name": "language",
                  "value": "={{ $json.output.language }}",
                  "type": "string"
                },
                {
                  "id": "9692167e-37dc-4c90-b048-73ab6933d1ac",
                  "name": "ocr",
                  "value": "={{ $('Code').item.json.combinedMarkdown }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            1256,
            -20
          ],
          "id": "334f05be-073f-4da1-a37e-916db100b41c",
          "name": "Edit Fields"
        },
        {
          "parameters": {
            "operation": "getAll",
            "tableId": "PDF_DATA_INFO",
            "returnAll": true,
            "filterType": "string",
            "filterString": "=id=in.({{ $('Message Receiving webhook').item.json.body.pdfIds.join(',') }})"
          },
          "type": "n8n-nodes-base.supabase",
          "typeVersion": 1,
          "position": [
            0,
            440
          ],
          "id": "47dbad24-f345-4cb1-884a-515e5122fab0",
          "name": "Supabase"
        },
        {
          "parameters": {
            "jsCode": "// Get the input data\nconst inputData = $input.all();\n\n// Use Map to store unique items (key = PDF NAME, value = PDF SUMMARY)\nconst uniqueItems = new Map();\n\ninputData.forEach(item => {\n  const pdfName = item.json['PDF NAME'];\n  const ocrText = item.json['OCR OF PDF'];\n  \n  // Use PDF NAME as key to avoid duplicates\n  if (pdfName && !uniqueItems.has(pdfName)) {\n    uniqueItems.set(pdfName, ocrText);\n  }\n});\n\n// Create formatted text from unique items\nconst formattedSections = Array.from(uniqueItems.entries()).map(([name, ocr]) => \n  `name : ${name}\\nocr : ${ocr}`\n);\n\nconst finalText = formattedSections.join('\\n\\n---\\n\\n');\n\nreturn [{\n  json: {\n    formatted_text: finalText,\n    unique_count: uniqueItems.size\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            220,
            440
          ],
          "id": "765a5603-4c6c-4efe-a630-b10bece85075",
          "name": "Code1"
        }
      ],
      "connections": {
        "HTTP Request": {
          "main": [
            [
              {
                "node": "HTTP Request1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request1": {
          "main": [
            [
              {
                "node": "HTTP Request2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "HTTP Request2": {
          "main": [
            [
              {
                "node": "Code",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDF RECIEVER": {
          "main": [
            [
              {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Edit Fields",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Message Receiving webhook": {
          "main": [
            [
              {
                "node": "Supabase",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Structured Output Parser1": {
          "ai_outputParser": [
            [
              {
                "node": "AI Agent1",
                "type": "ai_outputParser",
                "index": 0
              }
            ]
          ]
        },
        "Google Gemini Chat Model1": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent1",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent1": {
          "main": [
            [
              {
                "node": "Respond to Webhook1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields": {
          "main": [
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Supabase": {
          "main": [
            [
              {
                "node": "Code1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Code1": {
          "main": [
            [
              {
                "node": "AI Agent1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "f7940fe8-0c2b-466b-9a13-f1b330258d2a",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-10T18:28:36.748Z",
      "updatedAt": "2025-06-11T20:16:46.312Z",
      "id": "Agv06fh9F7bpoQRS",
      "name": "PDF Summary 3",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -6500,
            2230
          ],
          "id": "6fb1afda-bd2a-4b75-9766-a7c54c142ce1",
          "name": "On form submission",
          "webhookId": "2ec217c2-ca78-4e52-9ae8-379afa748812"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -5180,
            1980
          ],
          "id": "d6433385-46d3-4719-b15b-94b57fa7ace1",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -4804,
            2080
          ],
          "id": "31436f52-c42f-43d5-a8e4-d816f697b6c6",
          "name": "Process AI Output"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -6500,
            1640
          ],
          "id": "d3379b74-c490-44fe-953a-88a4ddb43ccc",
          "name": "Merge"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -4584,
            2230
          ],
          "id": "f28eaea1-c61a-46bb-ad70-def8dc55cccb",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "// FIXED JavaScript Code for \"Add File name to JSON\" node:\nconst input = $input.first();\nlet fileName = 'output.png';\n\nconst binaryKey = Object.keys(input.binary)[0];\n\nif (binaryKey && input.binary[binaryKey]) {\n  // Generate a unique filename with timestamp and random string\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(2, 8);\n  const originalFileName = input.binary[binaryKey].fileName || 'output.png';\n  const fileExtension = originalFileName.split('.').pop() || 'png';\n  \n  fileName = `cover_${timestamp}_${randomString}.${fileExtension}`;\n}\n\n// Provide the COMPLETE path with unique filename\nconst completePath = \"ban/pdf_summary/\" + fileName;\n\n// Debug logging\nconsole.log('Generated fileName:', fileName);\nconsole.log('Complete path:', completePath);\nconsole.log('Binary key found:', binaryKey);\n\nreturn [{\n  json: {\n    ...input.json,\n    completePath: completePath,\n    uniqueFileName: fileName,\n    fileMeta: {\n      originalName: input.json.originalFileName || 'unknown.pdf',\n      processedAt: new Date().toISOString()\n    },\n    // Debug info\n    debug: {\n      binaryKey: binaryKey,\n      generatedPath: completePath\n    }\n  },\n  binary: input.binary\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5102,
            2380
          ],
          "id": "5f05bbb2-7225-4718-932f-74c02f25e551",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -4804,
            2380
          ],
          "id": "f55d4e89-2fdb-4fbb-9d29-59c9c7e3564d",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -4364,
            2230
          ],
          "id": "2860df82-9a9a-4187-abb4-ceb031813ace",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -5092,
            2200
          ],
          "id": "43760c29-ea38-4078-ba3a-4a6cd36b6b64",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "operation": "Convert from PDF",
            "url": "={{ $json.Location }}",
            "convertType": "toPng",
            "advancedOptions_Image": {
              "pages": "1"
            }
          },
          "type": "n8n-nodes-pdfco.PDFco Api",
          "typeVersion": 1,
          "position": [
            -5620,
            2380
          ],
          "id": "c14ee4d6-4adc-4a52-b932-e3bd1c53a9eb",
          "name": "PDFco Api",
          "credentials": {
            "pdfcoApi": {
              "id": "PAcs9bTz82LKZSjr",
              "name": "PDF.co account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://s3-presigned-url-service-production.up.railway.app",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"filename\": \"{{ $json.originalFileName }}\",\n  \"contentType\": \"application/pdf\"\n}",
            "options": {
              "response": {
                "response": {
                  "responseFormat": "json"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -6500,
            1380
          ],
          "id": "b5753cff-a542-496c-ac6a-583cf6597b7a",
          "name": "Generate S3 Presigned URL"
        },
        {
          "parameters": {
            "jsCode": "// Fallback to the bucket + key combination\nelse if (input.json.Bucket && input.json.key) {\n  actualS3Key = input.json.key;\n  fileName = actualS3Key.split('/').pop();\n  console.log('Found S3 key from bucket response:', actualS3Key);\n}\n// Another fallback - construct from Location if available\nelse if (input.json.Location) {\n  // Extract the key from the full S3 URL\n  const urlParts = input.json.Location.split('.amazonaws.com/');\n  if (urlParts.length > 1) {\n    actualS3Key = urlParts[1];\n    fileName = actualS3Key.split('/').pop();\n    console.log('Extracted S3 key from Location:', actualS3Key);\n  }\n}\n\n// Final fallback to originalFileName\nif (!fileName) {\n  fileName = input.json.originalFileName;\n  if (fileName) {\n    actualS3Key = `ban/pdf_summary/${fileName}`;\n    console.log('Using originalFileName as fallback:', fileName);\n  }\n}\n\n// Emergency fallback\nif (!fileName || fileName === 'undefined') {\n  console.log('❌ Emergency fallback triggered');\n  const timestamp = Date.now();\n  fileName = `document_${timestamp}.pdf`;\n  actualS3Key = `ban/pdf_summary/${fileName}`;\n}\n\n// Clean filename if needed\nfileName = fileName.toString().replace(/[<>:\"/\\\\|?*]/g, '_');\nif (!fileName.toLowerCase().endsWith('.pdf')) {\n  fileName = fileName.split('.')[0] + '.pdf';\n}\n\nconsole.log('✅ Final filename:', fileName);\nconsole.log('✅ Final S3 key:', actualS3Key);\n\n// Build the complete S3 URL using the actual S3 key\nconst bucketName = 'xaraban';\nconst pdfUrl = `https://${bucketName}.s3.amazonaws.com/${actualS3Key}`;\n\nconsole.log('📎 Complete PDF URL:', pdfUrl);\n\n// Validate URL format\nconst isValidUrl = pdfUrl.startsWith('https://') && \n                  pdfUrl.includes('s3.amazonaws.com') && \n                  pdfUrl.endsWith('.pdf') &&\n                  !pdfUrl.includes('undefined');\n\nconsole.log('🔍 URL validation passed:', isValidUrl);\n\nif (!isValidUrl) {\n  throw new Error(`Generated invalid URL: ${pdfUrl}`);\n}\n\nconsole.log('=================================');\n\nreturn [{\n  json: {\n    ...input.json,\n    Location: pdfUrl,\n    pdfUrl: pdfUrl,\n    actualS3Key: actualS3Key,\n    originalFileName: fileName,\n    urlGeneratedAt: new Date().toISOString(),\n    urlValid: isValidUrl,\n    urlGenerationMethod: 'S3_response_based'\n  },\n  binary: input.binary\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5860,
            1540
          ],
          "id": "67a9bccc-9d75-4181-a552-810e0e755dfd",
          "name": "Generate PDF URL"
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\n\nreturn items.map((item, index) => {\n  console.log(`=== PROCESSING ITEM ${index + 1} ===`);\n  console.log('Full item structure:', JSON.stringify(item, null, 2));\n  \n  let originalFileName = null;\n  let binaryData = {};\n  \n  // Method 1: Check if binary data exists and extract filename\n  if (item.binary && Object.keys(item.binary).length > 0) {\n    console.log('Binary data found. Keys:', Object.keys(item.binary));\n    \n    // Usually the form field name is 'data' for file uploads\n    const binaryKey = Object.keys(item.binary)[0]; // Get first binary key\n    console.log('Using binary key:', binaryKey);\n    \n    if (item.binary[binaryKey]) {\n      binaryData = {};\n      binaryData[binaryKey] = item.binary[binaryKey];\n      \n      // Extract filename from binary data\n      const binaryInfo = item.binary[binaryKey];\n      console.log('Binary info:', {\n        fileName: binaryInfo.fileName,\n        mimeType: binaryInfo.mimeType,\n        fileExtension: binaryInfo.fileExtension,\n        hasData: !!binaryInfo.data\n      });\n      \n      // Try multiple ways to get filename\n      originalFileName = binaryInfo.fileName || \n                       binaryInfo.filename || \n                       binaryInfo.name ||\n                       binaryInfo.originalname;\n      \n      console.log('Extracted filename:', originalFileName);\n    }\n  }\n  \n  // Method 2: Check form data structure\n  if (!originalFileName && item.json) {\n    console.log('Checking JSON structure for filename...');\n    \n    // Check if there's form data with filename\n    if (item.json.data && Array.isArray(item.json.data)) {\n      const fileField = item.json.data.find(field => \n        field.fieldName === 'data' || \n        field.fieldType === 'file' ||\n        field.filename ||\n        field.fileName\n      );\n      \n      if (fileField) {\n        originalFileName = fileField.filename || \n                         fileField.fileName || \n                         fileField.name;\n        console.log('Found filename in form data:', originalFileName);\n      }\n    }\n    \n    // Direct filename fields\n    if (!originalFileName) {\n      originalFileName = item.json.filename || \n                       item.json.fileName || \n                       item.json.originalFileName ||\n                       item.json.name;\n      console.log('Found filename in JSON:', originalFileName);\n    }\n  }\n  \n  // Method 3: Generate filename if still not found - BUT KEEP IT SIMPLE\n  if (!originalFileName || originalFileName === 'undefined' || originalFileName === '') {\n    console.log('No filename found, using default...');\n    // Use a simple default that won't cause issues\n    originalFileName = 'uploaded-document.pdf';\n    console.log('Using default filename:', originalFileName);\n  }\n  \n  // Clean up filename (remove any problematic characters but preserve original name structure)\n  // Only replace truly problematic characters, keep hyphens and underscores\n  originalFileName = originalFileName.replace(/[<>:\"/\\\\|?*]/g, '_');\n  \n  // Ensure .pdf extension\n  if (!originalFileName.toLowerCase().endsWith('.pdf')) {\n    const nameWithoutExt = originalFileName.split('.')[0];\n    originalFileName = nameWithoutExt + '.pdf';\n  }\n  \n  console.log('Final filename:', originalFileName);\n  \n  // Validation\n  const hasValidFilename = originalFileName && originalFileName !== 'undefined';\n  const hasValidBinary = Object.keys(binaryData).length > 0;\n  \n  console.log('Validation:');\n  console.log('- Valid filename:', hasValidFilename);\n  console.log('- Valid binary data:', hasValidBinary);\n  console.log('- Binary data keys:', Object.keys(binaryData));\n  \n  if (hasValidBinary) {\n    const firstBinaryKey = Object.keys(binaryData)[0];\n    console.log('- Binary data size:', binaryData[firstBinaryKey]?.data?.length || 'unknown');\n  }\n  \n  console.log('================================');\n  \n  return {\n    json: {\n      ...item.json,\n      originalFileName: originalFileName,\n      processingTimestamp: new Date().toISOString(),\n      validationStatus: {\n        hasFilename: hasValidFilename,\n        hasBinary: hasValidBinary,\n        readyForUpload: hasValidFilename && hasValidBinary\n      },\n      extractionMethod: 'enhanced_extraction_v3'\n    },\n    binary: binaryData\n  };\n});"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6280,
            2230
          ],
          "id": "6efbedaf-2877-4a05-856b-cc3ac4900fae",
          "name": "Binary Data Extraction"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -5400,
            2080
          ],
          "id": "92b043f3-f207-48e3-9330-24e90beae2db",
          "name": "Extract from File1",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "=ban/pdf_summary/{{ $json.originalFileName }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -6060,
            2380
          ],
          "id": "ec228c86-e292-4fae-9fc0-596735c1bae2",
          "name": "AWS S31 URL",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "=ban/pdf_summary/{{ $json.originalFileName }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -5400,
            2380
          ],
          "id": "558de7bd-f8f9-4bc7-be5e-60f91329a02c",
          "name": "AWS S3 PNG",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const bucket = 'xaraban';\n\n/* get the first value that exists */\nconst key =\n  $json.Key ||           // S3 node response (capital K)\n  $json.key ||           // some very old n8n versions\n  $json.fileName ||      // other nodes sometimes add this\n  ($json.originalFileName               // last resort\n     ? `ban/pdf_summary/${$json.originalFileName}`\n     : null);\n\nif (!key) {\n  throw new Error('No S3 key or file name found – cannot build URL');\n}\n\nreturn [{\n  json: {\n    ...$json,\n    pdfUrl: `https://${bucket}.s3.amazonaws.com/${encodeURIComponent(key)}`\n  },\n  binary: $binary\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -5920,
            1880
          ],
          "id": "e7fc0024-6cfc-43cf-b574-a95330903d57",
          "name": "One liner"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -5380,
            1460
          ],
          "id": "bd44eee5-8885-4bc1-b7c5-c6c83d20191c",
          "name": "Dropbox_up",
          "credentials": {
            "dropboxApi": {
              "id": "23G4v9nkME5X5gPz",
              "name": "Dropbox account 2"
            }
          }
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.dropboxTool",
          "typeVersion": 1,
          "position": [
            -4920,
            1500
          ],
          "id": "e55cf51f-f36c-4f9c-bcd1-122f3a9b7a6b",
          "name": "Dropbox"
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Binary Data Extraction",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            []
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "PDFco Api": {
          "main": [
            [
              {
                "node": "AWS S3 PNG",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate S3 Presigned URL": {
          "main": [
            []
          ]
        },
        "Generate PDF URL": {
          "main": [
            []
          ]
        },
        "Binary Data Extraction": {
          "main": [
            [
              {
                "node": "AWS S31 URL",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File1": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AWS S31 URL": {
          "main": [
            [
              {
                "node": "PDFco Api",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3 PNG": {
          "main": [
            [
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "One liner": {
          "main": [
            []
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "abdcbf07-5250-4d44-88f9-1a40efdf5051",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T19:31:18.307Z",
      "updatedAt": "2025-06-12T19:31:18.307Z",
      "id": "FQLUl9NtzYZf7Ji2",
      "name": "firecrawl_email_scraper",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Email Scraper",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "Website Url",
                  "placeholder": "https://aitools.inc",
                  "requiredField": true
                },
                {
                  "fieldLabel": "Scrape Limit",
                  "fieldType": "number",
                  "placeholder": "8",
                  "requiredField": true
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -2160,
            20
          ],
          "id": "c7d9dbee-6a19-4521-abaf-a2a38345dd16",
          "name": "form_trigger",
          "webhookId": "7507734f-cf1f-49d5-a996-0bcd1bc7bebf"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.firecrawl.dev/v1/map",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"url\": \"{{ $json['Website Url'] }}\",\n  \"search\": \"about contact company authors team\",\n  \"limit\": {{ $json['Scrape Limit'] }}\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1920,
            20
          ],
          "id": "a7d1a38a-e6fc-494c-a166-37d9dc855fbb",
          "name": "map_website",
          "retryOnFail": true,
          "maxTries": 5,
          "waitBetweenTries": 5000
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.firecrawl.dev/v1/batch/scrape",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"urls\": {{ JSON.stringify($json.links) }},\n  \"formats\": [\"markdown\", \"json\"],\n  \"proxy\": \"stealth\",\n  \"jsonOptions\": {\n    \"prompt\": \"Extract every unique, fully-qualified email address found in the supplied web page. Normalize common obfuscations where “@” appears as “(at)”, “[at]”, “{at}”, “ at ”, “&#64;” and “.” appears as “(dot)”, “[dot]”, “{dot}”, “ dot ”, “&#46;”. Convert variants such as “user(at)example(dot)com” or “user at example dot com” to “user@example.com”. Ignore addresses hidden inside HTML comments, <script>, or <style> blocks. Deduplicate case-insensitively. The addresses shown in the example output below (e.g., “user@example.com”, “info@example.com”, “support@sample.org”) are placeholders; include them only if they genuinely exist on the web page.\",\n    \"schema\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"email_addresses\": {\n          \"type\": \"array\",\n          \"items\": {\n            \"type\": \"string\",\n            \"format\": \"email\",\n            \"description\": \"A valid email address found and extracted from the page\"\n          },\n          \"description\": \"An array of all email addresses found on the web page\"\n        }\n      },\n      \"required\": [\"emails\"]\n    }\n  }\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1660,
            20
          ],
          "id": "78bb911f-f01c-4c76-80af-2a39bd887086",
          "name": "start_batch_scrape"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "7e16bcbe-7ea6-48ca-b98e-5b0ec18be8c3",
                  "leftValue": "={{ $runIndex }}",
                  "rightValue": 12,
                  "operator": {
                    "type": "number",
                    "operation": "gte"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -580,
            180
          ],
          "id": "6530967a-f4a5-40c5-85db-8c64b0f23eed",
          "name": "check_retry_count"
        },
        {
          "parameters": {
            "errorMessage": "Too many retries when attempting to scrape website."
          },
          "type": "n8n-nodes-base.stopAndError",
          "typeVersion": 1,
          "position": [
            -220,
            260
          ],
          "id": "4ca81c52-0c85-44db-90ca-860484364a17",
          "name": "too_many_attempts_error"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            -1400,
            20
          ],
          "id": "835e5477-9563-4636-a0a1-2d7783c27f66",
          "name": "rate_limit_wait",
          "webhookId": "3a93d231-a459-4747-b124-4229372407a8"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "9efaad04-014a-45a4-9760-1b3edbf51c8d",
                  "name": "scraped_email_addresses",
                  "value": "={{\n  ($node[\"fetch_scrape_results\"].json.data || [])\n    .flatMap(item => item?.json?.email_addresses || [])\n    .filter(email => typeof email === 'string' && email.trim())\n}}",
                  "type": "array"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -220,
            0
          ],
          "id": "905110db-beaf-43e1-9231-7ff07630f243",
          "name": "set_result"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "cc296f33-b896-49c7-898c-4d8b5f11266a",
                  "leftValue": "={{ $json.status }}",
                  "rightValue": "completed",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -860,
            20
          ],
          "id": "2fbe3727-5dbc-4dc7-acd3-aa4ea2b56017",
          "name": "check_scrape_completed"
        },
        {
          "parameters": {
            "url": "=https://api.firecrawl.dev/v1/batch/scrape/{{ $('start_batch_scrape').item.json.id }}",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1140,
            20
          ],
          "id": "060f48bc-cf4b-4f35-826e-f9955cd6e8af",
          "name": "fetch_scrape_results"
        },
        {
          "parameters": {
            "fieldToSplitOut": "scraped_email_addresses",
            "options": {}
          },
          "type": "n8n-nodes-base.splitOut",
          "typeVersion": 1,
          "position": [
            80,
            0
          ],
          "id": "b509efe9-880f-4e1e-850d-6b1c2e00fdfa",
          "name": "split_emails"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.instantly.ai/api/v2/leads",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "email",
                  "value": "={{ $json.scraped_email_addresses }}"
                },
                {
                  "name": "campaign",
                  "value": "4d1d4037-a7e0-4ee2-96c2-de223241a83c"
                }
              ]
            },
            "options": {
              "response": {
                "response": {
                  "fullResponse": true
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            380,
            0
          ],
          "id": "5a139b08-cbf1-4a04-857f-e4650ce991a6",
          "name": "create_lead"
        }
      ],
      "connections": {
        "form_trigger": {
          "main": [
            [
              {
                "node": "map_website",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "map_website": {
          "main": [
            [
              {
                "node": "start_batch_scrape",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_retry_count": {
          "main": [
            [
              {
                "node": "too_many_attempts_error",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "rate_limit_wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "rate_limit_wait": {
          "main": [
            [
              {
                "node": "fetch_scrape_results",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "start_batch_scrape": {
          "main": [
            [
              {
                "node": "rate_limit_wait",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "check_scrape_completed": {
          "main": [
            [
              {
                "node": "set_result",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "check_retry_count",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "fetch_scrape_results": {
          "main": [
            [
              {
                "node": "check_scrape_completed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "set_result": {
          "main": [
            [
              {
                "node": "split_emails",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "split_emails": {
          "main": [
            [
              {
                "node": "create_lead",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "4e1ac0fd-22fa-47d6-b29d-d6f190391df9",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-13T00:02:16.160Z",
      "updatedAt": "2025-06-13T00:33:03.791Z",
      "id": "4f8c7FvK5EhYEGMA",
      "name": "My workflow 8",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "operation": "toJson",
            "options": {
              "format": true,
              "fileName": "={{ $json.name + \".json\" }} "
            }
          },
          "id": "d2b95307-b4f4-4934-b62f-466126cf9046",
          "name": "Convert to File",
          "type": "n8n-nodes-base.convertToFile",
          "position": [
            -1340,
            260
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "weeks"
                }
              ]
            }
          },
          "id": "01a9499e-5fd7-47ca-934e-fd71eee8faa7",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -2220,
            340
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "version": 2,
                "leftValue": "",
                "caseSensitive": false,
                "typeValidation": "loose"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "538fc29d-2693-4c62-9848-bdcaf8566909",
                  "operator": {
                    "type": "string",
                    "operation": "notEquals"
                  },
                  "leftValue": "={{ $json.id }}",
                  "rightValue": "={{ $('Create new folder').item.json.id }}"
                }
              ]
            },
            "looseTypeValidation": true,
            "options": {
              "ignoreCase": true
            }
          },
          "id": "24dbd9e9-5021-4547-b912-a5552bfbdd37",
          "name": "Filter",
          "type": "n8n-nodes-base.filter",
          "position": [
            -900,
            60
          ],
          "typeVersion": 2.2
        },
        {
          "parameters": {},
          "id": "eec6759d-892a-4b52-96d5-df1204d40c39",
          "name": "Manual trigger",
          "type": "n8n-nodes-base.manualTrigger",
          "position": [
            -2220,
            140
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "options": {}
          },
          "id": "f755e31e-529b-4541-902c-5a5e9374184d",
          "name": "Loop ",
          "type": "n8n-nodes-base.splitInBatches",
          "position": [
            -1560,
            260
          ],
          "typeVersion": 3
        },
        {
          "parameters": {},
          "id": "c9087da5-a3dd-4dc6-a81d-9f8432ecb899",
          "name": "Limit",
          "type": "n8n-nodes-base.limit",
          "position": [
            -1340,
            60
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "filters": {},
            "requestOptions": {}
          },
          "id": "751c355e-678b-493a-ae06-e39dd0b06dae",
          "name": "Get n8n workflow",
          "type": "n8n-nodes-base.n8n",
          "position": [
            -1780,
            260
          ],
          "retryOnFail": true,
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "n8nApi": {
              "id": "5XHOo0XHlTPF4J0g",
              "name": "n8n account"
            }
          }
        },
        {
          "parameters": {
            "content": "# 🔄 Workflow Backup for n8n → Google Drive\n\nAn automated system to back up all your n8n workflows and store them as `.json` files in Google Drive.  \nPerfect for creators, teams, and agencies who want to protect their work without manual effort.\n\n---\n\n## ✨ What this workflow does\n\n- Creates a new folder in Google Drive named `Workflow Backups [date]`\n- Fetches all workflows from your n8n instance via the `n8n API`\n- Converts each workflow into a `.json` file\n- Uploads the files to the created backup folder\n- (Optionally) Deletes old backup folders to keep things tidy\n- Can run manually or automatically (e.g., weekly)\n\n---\n\n## 🛠 Requirements\n\n- A Google account with access to Google Drive\n- Connected `Google Drive OAuth2` credentials in n8n\n- Active `n8n API credentials`\n- Enabled trigger: `Manual` or `Schedule`\n\n---\n\n## ⚙️ Installation Instructions\n\n1. **Import the workflow** (`Workflow_Backup_copy.json`) into your n8n instance\n2. **Set up credentials:**\n   - Replace `Google demo` with your own `Google Drive OAuth2` in the following nodes:\n     - `Create new folder`\n     - `Get folders`\n     - `Upload workflow`\n     - `delete folder`\n   - Replace `n8n demo` with your `n8n API` credentials in `Get n8n workflow`\n3. **Replace the folder ID** in the `Create new folder` node with the target backup folder on your Drive (`folderId`)\n4. **Optional:** Configure `Schedule Trigger` to run weekly or at your preferred interval\n\n---\n\n## 📦 Workflow Structure\n\n```\nManual/Schedule Trigger\n      ↓\nCreate new folder (Google Drive)\n      ↓\nGet n8n workflows (via API)\n      ↓\nLoop through workflows\n      ↓\nConvert to .json files\n      ↓\nUpload to Drive\n      ↓\n(Optional) Delete old backup folders\n```\n\n---\n\n## ✅ Tips\n\n- Add logic to retain only the latest X backups (e.g., last 3).\n- The workflow can run fully hands-free once scheduled.\n- Want to store files elsewhere? Swap out the upload node for Dropbox, S3, etc.\n",
            "height": 1660,
            "width": 1320,
            "color": 4
          },
          "id": "be113a2c-734e-4832-a2ea-e02786b0b08c",
          "name": "Sticky Note",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -460,
            -360
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "folder",
            "operation": "copy",
            "path": "/n8n_backup",
            "toPath": "/n8n_backup_2"
          },
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -2020,
            220
          ],
          "id": "71731868-b91b-435e-8756-752254520791",
          "name": "Dropbox",
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "resource": "folder",
            "operation": "list",
            "path": "/n8n_backup",
            "filters": {}
          },
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -1140,
            60
          ],
          "id": "3bf1469e-e8a6-490e-8658-6520dc330fd5",
          "name": "Dropbox1",
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "path": "/n8n_backup"
          },
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -1100,
            240
          ],
          "id": "e1f065fa-7444-4097-bd8a-29df25ef014d",
          "name": "Dropbox2",
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        },
        {
          "parameters": {
            "resource": "folder",
            "operation": "delete",
            "path": "/n8n/"
          },
          "type": "n8n-nodes-base.dropbox",
          "typeVersion": 1,
          "position": [
            -680,
            60
          ],
          "id": "ca4135d9-2cc3-4151-b929-f5513c67955e",
          "name": "Dropbox3",
          "credentials": {
            "dropboxApi": {
              "id": "7S85Xl3wT16hm4L2",
              "name": "Dropbox account"
            }
          }
        }
      ],
      "connections": {
        "Limit": {
          "main": [
            [
              {
                "node": "Dropbox1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop ": {
          "main": [
            [
              {
                "node": "Limit",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Convert to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Filter": {
          "main": [
            [
              {
                "node": "Dropbox3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Manual trigger": {
          "main": [
            [
              {
                "node": "Dropbox",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Convert to File": {
          "main": [
            [
              {
                "node": "Dropbox2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get n8n workflow": {
          "main": [
            [
              {
                "node": "Loop ",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "Dropbox",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Dropbox": {
          "main": [
            [
              {
                "node": "Get n8n workflow",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Dropbox1": {
          "main": [
            [
              {
                "node": "Filter",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Dropbox2": {
          "main": [
            [
              {
                "node": "Convert to File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "9433cc92-57a3-4e9c-b331-f5508f1b418c",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T12:24:56.120Z",
      "updatedAt": "2025-06-13T00:33:08.446Z",
      "id": "OC2kRuvM2MKwH0zm",
      "name": "Backup_Github",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                  "name": "Done",
                  "type": "boolean",
                  "value": true
                }
              ]
            },
            "options": {}
          },
          "id": "b3ae4eba-4140-4514-8dc6-4ce8aa0d5e6d",
          "name": "Return",
          "type": "n8n-nodes-base.set",
          "position": [
            1860,
            800
          ],
          "typeVersion": 3.3
        },
        {
          "parameters": {
            "url": "={{ $json.download_url }}",
            "options": {}
          },
          "id": "c182c20a-f217-4c24-b5a2-3334eb4c4d60",
          "name": "Get File",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            540,
            650
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "version": 1,
                "leftValue": "",
                "caseSensitive": true,
                "typeValidation": "strict"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                  "operator": {
                    "type": "string",
                    "operation": "empty",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.content }}",
                  "rightValue": ""
                },
                {
                  "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.error }}",
                  "rightValue": ""
                }
              ]
            },
            "options": {}
          },
          "id": "646d7c6e-2589-4234-8d89-adc3109cd681",
          "name": "If file too large",
          "type": "n8n-nodes-base.if",
          "position": [
            320,
            725
          ],
          "typeVersion": 2
        },
        {
          "parameters": {},
          "id": "304802bc-3d02-4efe-99c6-443b8b5944bb",
          "name": "Merge Items",
          "type": "n8n-nodes-base.merge",
          "position": [
            760,
            800
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
          },
          "id": "d43684ae-9a51-45f8-b3e4-4d2599d9b95e",
          "name": "isDiffOrNew",
          "type": "n8n-nodes-base.code",
          "position": [
            980,
            800
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.github_status}}",
            "rules": {
              "rules": [
                {
                  "value2": "same"
                },
                {
                  "value2": "different",
                  "output": 1
                },
                {
                  "value2": "new",
                  "output": 2
                }
              ]
            }
          },
          "id": "6ff37349-e6ab-4cfa-8e11-53f83d9acb99",
          "name": "Check Status",
          "type": "n8n-nodes-base.switch",
          "position": [
            1200,
            779
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "45ac0400-c3bd-4824-9983-7b5a11ad31e8",
          "name": "Same file - Do nothing",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1640,
            600
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "91a6ac8f-f935-43e9-ab48-c36eae2b4405",
          "name": "File is different",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1420,
            800
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "ac5c496f-56d6-4fb2-944a-7afe0fcb38a8",
          "name": "File is new",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1420,
            1000
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "9bb31d4d-8320-4ebf-994e-becbff18ab07",
          "name": "Create new file",
          "type": "n8n-nodes-base.github",
          "position": [
            1640,
            1000
          ],
          "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "ce512765-62cd-491d-a1a1-dd320e180e85",
          "name": "Edit existing file",
          "type": "n8n-nodes-base.github",
          "position": [
            1640,
            800
          ],
          "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
          "typeVersion": 1,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "id": "6820a0a2-2289-4c9f-bfd0-7ff6f31336db",
          "name": "Loop Over Items",
          "type": "n8n-nodes-base.splitInBatches",
          "position": [
            100,
            340
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 2
                }
              ]
            }
          },
          "id": "539de335-9db8-4fe9-be5d-bee135d70244",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -340,
            340
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "get",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.name }}"
            },
            "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
            "asBinaryProperty": false,
            "additionalParameters": {}
          },
          "id": "174357b8-753c-4ecb-abb8-748068767a2c",
          "name": "Get file data",
          "type": "n8n-nodes-base.github",
          "position": [
            100,
            725
          ],
          "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "credentials": {
            "githubApi": {
              "id": "Fs6lCK8UIe1d0wrn",
              "name": "GitHub account"
            }
          },
          "continueOnFail": true
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
                  "name": "repo.owner",
                  "type": "string",
                  "value": "john-doe"
                },
                {
                  "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
                  "name": "repo.name",
                  "type": "string",
                  "value": "n8n-backup"
                },
                {
                  "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
                  "name": "repo.path",
                  "type": "string",
                  "value": "workflows/"
                }
              ]
            },
            "options": {}
          },
          "id": "ad1ff5cc-815e-4eac-94e0-21dd3c229d65",
          "name": "Globals",
          "type": "n8n-nodes-base.set",
          "position": [
            -120,
            725
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "inputSource": "passthrough"
          },
          "id": "1a2ee901-a6e3-48f7-9a78-e4c6daf2df47",
          "name": "Execute Workflow Trigger",
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "position": [
            -340,
            800
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "workflowId": {
              "__rl": true,
              "value": "NcmFcv4F8Yulq1VY",
              "mode": "list",
              "cachedResultName": "Giothub backup 2"
            },
            "workflowInputs": {
              "mappingMode": "defineBelow",
              "value": {},
              "matchingColumns": [],
              "schema": [],
              "attemptToConvertTypes": false,
              "convertFieldsToString": true
            },
            "mode": "each",
            "options": {
              "waitForSubWorkflow": true
            }
          },
          "id": "29f1b1bb-0494-438e-b8d2-5e93e8093e04",
          "name": "Execute Workflow",
          "type": "n8n-nodes-base.executeWorkflow",
          "position": [
            320,
            340
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "url": "https://primary-production-a00b4.up.railway.app/api/v1/workflows",
            "authentication": "genericCredentialType",
            "genericAuthType": "httpHeaderAuth",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -120,
            340
          ],
          "id": "40706bb3-e30b-47b8-86f6-ee8ebe4c0f6a",
          "name": "HTTP Request",
          "credentials": {
            "httpBasicAuth": {
              "id": "CwM5sMtLIKxWXa1N",
              "name": "API BAN"
            },
            "httpHeaderAuth": {
              "id": "IMhOjDSCUC68dT34",
              "name": "Header Auth account 4"
            }
          }
        }
      ],
      "connections": {
        "Globals": {
          "main": [
            [
              {
                "node": "Get file data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get File": {
          "main": [
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is new": {
          "main": [
            [
              {
                "node": "Create new file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Items": {
          "main": [
            [
              {
                "node": "isDiffOrNew",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "isDiffOrNew": {
          "main": [
            [
              {
                "node": "Check Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Status": {
          "main": [
            [
              {
                "node": "Same file - Do nothing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is different",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is new",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get file data": {
          "main": [
            [
              {
                "node": "If file too large",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create new file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items": {
          "main": [
            [],
            [
              {
                "node": "Execute Workflow",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow": {
          "main": [
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "HTTP Request",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is different": {
          "main": [
            [
              {
                "node": "Edit existing file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If file too large": {
          "main": [
            [
              {
                "node": "Get File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit existing file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Same file - Do nothing": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow Trigger": {
          "main": [
            [
              {
                "node": "Globals",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge Items",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "HTTP Request": {
          "main": [
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": {
        "node:Schedule Trigger": {
          "recurrenceRules": []
        }
      },
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "2333aaf8-2c51-4607-8266-3ec540e0ea44",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-10T12:03:50.868Z",
      "updatedAt": "2025-06-11T20:16:39.578Z",
      "id": "OgYhbzU3Di5AwVmf",
      "name": "PDF Summary 2",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "formTitle": "Submit PDF",
            "formDescription": "Submit pdf file",
            "formFields": {
              "values": [
                {
                  "fieldLabel": "data",
                  "fieldType": "file"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.formTrigger",
          "typeVersion": 2.2,
          "position": [
            -3480,
            1770
          ],
          "id": "fc2365e6-9740-41bf-84d3-ff9579cf8dd2",
          "name": "On form submission",
          "webhookId": "8aba50e3-f549-483a-93bc-11931d3e8391"
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -3260,
            1845
          ],
          "id": "eddc144a-8799-42bd-b51f-eb12a6b5ef8c",
          "name": "Extract from File",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nconst fullText = input.json.text || '';\nconst binaryData = input.binary || {};\n\n// Find the binary property key (usually 'data')\nconst binaryKey = Object.keys(binaryData)[0];\n\n// Only proceed if binaryKey exists\nif (binaryKey && binaryData[binaryKey]) {\n  // Figure out the file name\n  const fileName =\n    input.json.fileName ||\n    input.json.originalFileName ||\n    'document.pdf';\n\n  // Attach the file name to the binary property\n  binaryData[binaryKey].fileName = fileName;\n}\n\n// Process text length\nlet processedText;\nif (fullText.length <= 8000) {\n  processedText = fullText;\n} else {\n  const start = fullText.substring(0, 4000);\n  const end = fullText.substring(fullText.length - 2000);\n  const middle = fullText.substring(\n    Math.floor(fullText.length / 2) - 1000,\n    Math.floor(fullText.length / 2) + 1000\n  );\n  processedText =\n    start +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    middle +\n    \"\\n\\n[... document continues ...]\\n\\n\" +\n    end;\n}\n\n// Now processedText is defined and can be used in the return\nreturn [\n  {\n    json: {\n      text: processedText,\n      needsCoverExtraction: true,\n      originalFileName: (binaryKey && binaryData[binaryKey] && binaryData[binaryKey].fileName) || 'document.pdf'\n    },\n    binary: binaryData\n  }\n];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -2820,
            1770
          ],
          "id": "b06764e2-8ac4-475e-88d3-37e3648e2828",
          "name": "Text Processing & Setup"
        },
        {
          "parameters": {
            "promptType": "define",
            "text": "=Here is the PDF content: {{ $json.text }}\n\nPlease analyze this document and return **exactly** the following, with no extra commentary:\n\nTITLE: [Document title]\n\nYEAR: [Publication year]\n\nAUTHOR: [Author name(s)]\n\nPAGES: [Total page count]\n\nOVERVIEW (50 words):  \n[Write a 50-word overview of the document.]\n\nSUMMARY (300 words):  \n[Write a 300-word summary targeting \"White paper\" and the document title.]\n\nMETA DESCRIPTION (160 chars max):  \n[Write a meta description, no more than 160 characters.]\nDescribe your new note here.\n\nReview 1 (50 - 100 words):\n[Write a 150-word posotive review of the document.]",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 2,
          "position": [
            -1720,
            1520
          ],
          "id": "cfb9a822-1961-446e-925f-d14fefc99c3d",
          "name": "AI Agent",
          "alwaysOutputData": true
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\nlet text = input.json.output || '';\n\n// Extract title from the AI output\nconst titleMatch = text.match(/TITLE: (.+)/);\nconst aiTitle = titleMatch ? titleMatch[1].trim() : 'Untitled';\n\n// Split text into chunks that fit Notion's 2000 char limit\nconst chunks = [];\nlet remainingText = text;\n\nwhile (remainingText.length > 0) {\n  let chunk = remainingText.substring(0, 1900);\n\n  // If there's more text, try to break at a natural point\n  if (remainingText.length > 1900) {\n    const lastPeriod = chunk.lastIndexOf('. ');\n    const lastNewline = chunk.lastIndexOf('\\n');\n\n    if (lastPeriod > 1200) {\n      chunk = chunk.substring(0, lastPeriod + 1);\n    } else if (lastNewline > 1200) {\n      chunk = chunk.substring(0, lastNewline);\n    }\n  }\n\n  chunks.push(chunk.trim());\n  remainingText = remainingText.substring(chunk.length).trim();\n}\n\n// Return all original data plus split blocks, extracted title, and coverImageFileName\nreturn [{\n  json: {\n    ...input.json,\n    aiTitle: aiTitle,\n    block1: chunks[0] || '',\n    block2: chunks[1] || '',\n    block3: chunks[2] || '',\n    coverImageFileName: input.json.coverImageFileName // <-- Make sure this line is here!\n  },\n  binary: input.binary || {}\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1344,
            1620
          ],
          "id": "0e7e58c8-5746-4ec2-bb92-e03617d68c75",
          "name": "Process AI Output"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -3040,
            1770
          ],
          "id": "e250ff95-fbe4-44eb-80ab-97067f9abc8b",
          "name": "Merge"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            -1124,
            1770
          ],
          "id": "f58fe44d-8bdb-493e-b705-f33774bd17d5",
          "name": "Merge1"
        },
        {
          "parameters": {
            "jsCode": "// FIXED JavaScript Code for \"Add File name to JSON\" node:\nconst input = $input.first();\nlet fileName = 'output.png';\n\nconst binaryKey = Object.keys(input.binary)[0];\n\nif (binaryKey && input.binary[binaryKey]) {\n  // Generate a unique filename with timestamp and random string\n  const timestamp = Date.now();\n  const randomString = Math.random().toString(36).substring(2, 8);\n  const originalFileName = input.binary[binaryKey].fileName || 'output.png';\n  const fileExtension = originalFileName.split('.').pop() || 'png';\n  \n  fileName = `cover_${timestamp}_${randomString}.${fileExtension}`;\n}\n\n// Provide the COMPLETE path with unique filename\nconst completePath = \"ban/pdf_summary/\" + fileName;\n\n// Debug logging\nconsole.log('Generated fileName:', fileName);\nconsole.log('Complete path:', completePath);\nconsole.log('Binary key found:', binaryKey);\n\nreturn [{\n  json: {\n    ...input.json,\n    completePath: completePath,\n    uniqueFileName: fileName,\n    fileMeta: {\n      originalName: input.json.originalFileName || 'unknown.pdf',\n      processedAt: new Date().toISOString()\n    },\n    // Debug info\n    debug: {\n      binaryKey: binaryKey,\n      generatedPath: completePath\n    }\n  },\n  binary: input.binary\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1940,
            1920
          ],
          "id": "3a9f45f7-87e6-4e79-9620-6112bd35faec",
          "name": "Add File name to JSON"
        },
        {
          "parameters": {
            "jsCode": "const input = $input.first();\n\n// Get the filename from coverImageFileName or generate a timestamp-based one\nconst fileName = input.json.coverImageFileName || `cover_${Date.now()}.png`;\nconst fullPath = `ban/pdf_summary/${fileName}`;\n\nreturn [{\n  json: {\n    ...input.json,\n    s3Url: `https://xaraban.s3.amazonaws.com/${fullPath}`\n  }\n}];\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1344,
            1920
          ],
          "id": "308e50eb-8864-42db-a9ac-6eae01d3b9a9",
          "name": "Add s3Url to JSON"
        },
        {
          "parameters": {
            "pageId": {
              "__rl": true,
              "value": "https://www.notion.so/PDF-Summary-2007112e57b980d8b998e19f93512ba1",
              "mode": "url"
            },
            "title": "={{ $json.aiTitle }}",
            "blockUi": {
              "blockValues": [
                {
                  "textContent": "={{ $json.block1 }}"
                },
                {
                  "textContent": "={{ $json.block2 }}"
                },
                {
                  "textContent": "={{ $json.block3 }}"
                },
                {
                  "textContent": "={{ $json.s3Url }}"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.notion",
          "typeVersion": 2.2,
          "position": [
            -904,
            1770
          ],
          "id": "0f70d51f-6011-4d0d-9e0e-cf29b4f2485f",
          "name": "Notion_good_urlonly",
          "credentials": {
            "notionApi": {
              "id": "wv5ZmtxyRwkU0dXZ",
              "name": "Notion account"
            }
          }
        },
        {
          "parameters": {
            "modelName": "models/gemini-2.5-flash-preview-05-20",
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
          "typeVersion": 1,
          "position": [
            -1632,
            1740
          ],
          "id": "380df4b5-b5ab-4420-8f56-3b96a80378ff",
          "name": "Google Gemini Chat Model",
          "credentials": {
            "googlePalmApi": {
              "id": "98JqTQmfb8tBNsCz",
              "name": "Google Gemini(PaLM) Api account"
            }
          }
        },
        {
          "parameters": {
            "operation": "upload",
            "bucketName": "xaraban",
            "fileName": "={{$json.completePath}}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.awsS3",
          "typeVersion": 2,
          "position": [
            -1642,
            1920
          ],
          "id": "e06b8c8d-8ebd-4cb4-9301-6917b49481d9",
          "name": "AWS S3",
          "credentials": {
            "aws": {
              "id": "1EzY6RGV9x9KCtu0",
              "name": "AWS account"
            }
          }
        },
        {
          "parameters": {
            "operation": "Convert from PDF",
            "url": "https://api.pdf.co/v1/pdf/convert/to/png",
            "convertType": "toPng",
            "advancedOptions_Image": {
              "pages": "1"
            }
          },
          "type": "n8n-nodes-pdfco.PDFco Api",
          "typeVersion": 1,
          "position": [
            -2160,
            1770
          ],
          "id": "09141551-c331-40f7-9df9-f7b1f346ebd7",
          "name": "PDFco Api",
          "credentials": {
            "pdfcoApi": {
              "id": "PAcs9bTz82LKZSjr",
              "name": "PDF.co account"
            }
          }
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2380,
            1780
          ],
          "id": "d959bbe7-85e1-4565-b9b0-3e0108b9e579",
          "name": "Temporary S3"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://s3-presigned-url-service-production.up.railway.app",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "Content-Type",
                  "value": "application/json"
                }
              ]
            },
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"filename\": \"{{ $json.originalFileName }}\",\n  \"contentType\": \"application/pdf\"\n}",
            "options": {
              "response": {
                "response": {
                  "responseFormat": "json"
                }
              }
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -2600,
            1780
          ],
          "id": "6efcfcba-42f8-457c-a2da-24aca713a015",
          "name": "Generate S3 Presigned URL"
        }
      ],
      "connections": {
        "On form submission": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 0
              },
              {
                "node": "Extract from File",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract from File": {
          "main": [
            [
              {
                "node": "Merge",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Text Processing & Setup": {
          "main": [
            [
              {
                "node": "Generate S3 Presigned URL",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Agent": {
          "main": [
            [
              {
                "node": "Process AI Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process AI Output": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge": {
          "main": [
            [
              {
                "node": "Text Processing & Setup",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge1": {
          "main": [
            [
              {
                "node": "Notion_good_urlonly",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add File name to JSON": {
          "main": [
            [
              {
                "node": "AWS S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Add s3Url to JSON": {
          "main": [
            [
              {
                "node": "Merge1",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Google Gemini Chat Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "AWS S3": {
          "main": [
            [
              {
                "node": "Add s3Url to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "PDFco Api": {
          "main": [
            [
              {
                "node": "AI Agent",
                "type": "main",
                "index": 0
              },
              {
                "node": "Add File name to JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Temporary S3": {
          "main": [
            [
              {
                "node": "PDFco Api",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Generate S3 Presigned URL": {
          "main": [
            [
              {
                "node": "Temporary S3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "f4b91306-269d-4b4f-8b32-aaebb5da6b7c",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-12T23:58:19.799Z",
      "updatedAt": "2025-06-12T23:59:19.269Z",
      "id": "94OiZUYcx2PPfBpH",
      "name": "My workflow 7",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {},
          "id": "0407aeb9-ceb1-41e4-9b70-5aa90a755574",
          "name": "On clicking 'execute'",
          "type": "n8n-nodes-base.manualTrigger",
          "position": [
            -240,
            120
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "## Subworkflow",
            "height": 750.8363163824032,
            "width": 2086.845881354743,
            "color": 6
          },
          "id": "22563202-2577-4ab6-b33a-b70b102c6801",
          "name": "Sticky Note",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -133.5,
            389
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "filters": {},
            "requestOptions": {}
          },
          "id": "e00b4c1e-dd09-420e-ac18-a1a3d64b92bc",
          "name": "n8n",
          "type": "n8n-nodes-base.n8n",
          "position": [
            -20,
            220
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "8d513345-6484-431f-afb7-7cf045c90f4f",
                  "name": "Done",
                  "type": "boolean",
                  "value": true
                }
              ]
            },
            "options": {}
          },
          "id": "8edfbaea-afef-41ef-bc39-fa5fbefe089f",
          "name": "Return",
          "type": "n8n-nodes-base.set",
          "position": [
            1960,
            780
          ],
          "typeVersion": 3.3
        },
        {
          "parameters": {
            "url": "={{ $json.download_url }}",
            "options": {}
          },
          "id": "02fb7be5-7305-44b6-ac07-28f83ec53d40",
          "name": "Get File",
          "type": "n8n-nodes-base.httpRequest",
          "position": [
            640,
            630
          ],
          "typeVersion": 4.2
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "version": 1,
                "leftValue": "",
                "caseSensitive": true,
                "typeValidation": "strict"
              },
              "combinator": "and",
              "conditions": [
                {
                  "id": "45ce825e-9fa6-430c-8931-9aaf22c42585",
                  "operator": {
                    "type": "string",
                    "operation": "empty",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.content }}",
                  "rightValue": ""
                },
                {
                  "id": "9619a55f-7fb1-4f24-b1a7-7aeb82365806",
                  "operator": {
                    "type": "string",
                    "operation": "notExists",
                    "singleValue": true
                  },
                  "leftValue": "={{ $json.error }}",
                  "rightValue": ""
                }
              ]
            },
            "options": {}
          },
          "id": "c16f0013-1bf3-4ace-ac59-77038482e399",
          "name": "If file too large",
          "type": "n8n-nodes-base.if",
          "position": [
            420,
            705
          ],
          "typeVersion": 2
        },
        {
          "parameters": {},
          "id": "4f92bde1-1f1d-493f-9f8a-2d8ab9b1d1eb",
          "name": "Merge Items",
          "type": "n8n-nodes-base.merge",
          "position": [
            860,
            780
          ],
          "typeVersion": 2
        },
        {
          "parameters": {
            "jsCode": "const orderJsonKeys = (jsonObj) => {\n  const ordered = {};\n  Object.keys(jsonObj).sort().forEach(key => {\n    ordered[key] = jsonObj[key];\n  });\n  return ordered;\n}\n\n// Check if file returned with content\nif (Object.keys($input.all()[0].json).includes(\"content\")) {\n  // Decode base64 content and parse JSON\n  const origWorkflow = JSON.parse(Buffer.from($input.all()[0].json.content, 'base64').toString());\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n// No file returned / new workflow\n} else if (Object.keys($input.all()[0].json).includes(\"data\")) {\n  const origWorkflow = JSON.parse($input.all()[0].json.data);\n  const n8nWorkflow = $input.all()[1].json;\n  \n  // Order JSON objects\n  const orderedOriginal = orderJsonKeys(origWorkflow);\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n\n  // Determine difference\n  if (JSON.stringify(orderedOriginal) === JSON.stringify(orderedActual)) {\n    $input.all()[0].json.github_status = \"same\";\n  } else {\n    $input.all()[0].json.github_status = \"different\";\n    $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n  }\n  $input.all()[0].json.content_decoded = orderedOriginal;\n\n} else {\n  // Order JSON object\n  const n8nWorkflow = $input.all()[1].json;\n  const orderedActual = orderJsonKeys(n8nWorkflow);\n  \n  // Proper formatting\n  $input.all()[0].json.github_status = \"new\";\n  $input.all()[0].json.n8n_data_stringy = JSON.stringify(orderedActual, null, 2);\n}\n\n// Return items\nreturn $input.all();"
          },
          "id": "6386b85e-1769-45f0-ab26-ec66f7bc16d5",
          "name": "isDiffOrNew",
          "type": "n8n-nodes-base.code",
          "position": [
            1080,
            780
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "dataType": "string",
            "value1": "={{$json.github_status}}",
            "rules": {
              "rules": [
                {
                  "value2": "same"
                },
                {
                  "value2": "different",
                  "output": 1
                },
                {
                  "value2": "new",
                  "output": 2
                }
              ]
            }
          },
          "id": "3b14fbf6-4e79-4afd-9ada-c2553d90041a",
          "name": "Check Status",
          "type": "n8n-nodes-base.switch",
          "position": [
            1300,
            759
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "d2885b18-e717-4600-ac88-cc0360d15ad0",
          "name": "Same file - Do nothing",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1740,
            580
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "a5f34fff-c940-431e-b590-62d5867fd42b",
          "name": "File is different",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1520,
            780
          ],
          "typeVersion": 1
        },
        {
          "parameters": {},
          "id": "f5e4444d-7de7-4795-bab3-ddd7c032864d",
          "name": "File is new",
          "type": "n8n-nodes-base.noOp",
          "position": [
            1520,
            980
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "56aa3648-5a19-405c-9563-1e7559b693e4",
          "name": "Create new file",
          "type": "n8n-nodes-base.github",
          "position": [
            1740,
            980
          ],
          "webhookId": "e5e4ce8b-74a3-4b94-83ca-351edc280faf",
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "edit",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $('Globals').item.json.repo.name }}"
            },
            "filePath": "={{ $('Globals').item.json.repo.path }}{{$('Execute Workflow Trigger').first().json.id}}.json",
            "fileContent": "={{$('isDiffOrNew').item.json[\"n8n_data_stringy\"]}}",
            "commitMessage": "={{$('Execute Workflow Trigger').first().json.name}} ({{$json.github_status}})"
          },
          "id": "f1f09d78-4f75-47e6-bc3e-abd170de14e8",
          "name": "Edit existing file",
          "type": "n8n-nodes-base.github",
          "position": [
            1740,
            780
          ],
          "webhookId": "a57e71de-4960-4d25-a59f-1a9e2e96aff5",
          "typeVersion": 1
        },
        {
          "parameters": {
            "options": {}
          },
          "id": "b275e63d-c6a6-4837-90eb-b326daf98e89",
          "name": "Loop Over Items",
          "type": "n8n-nodes-base.splitInBatches",
          "position": [
            200,
            220
          ],
          "typeVersion": 3
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "hours",
                  "hoursInterval": 2
                }
              ]
            }
          },
          "id": "6ab47786-8e01-40fb-9572-cc607695ef2b",
          "name": "Schedule Trigger",
          "type": "n8n-nodes-base.scheduleTrigger",
          "position": [
            -240,
            320
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "content": "## Backup to GitHub \nThis workflow will backup all instance workflows to GitHub.\n\nThe files are saved `ID.json` for the filename.\n\n### Setup\nOpen `Globals` node and update the values below 👇\n\n- **repo.owner:** your Github username\n- **repo.name:** the name of your repository\n- **repo.path:** the folder to use within the repository. If it doesn't exist it will be created.\n\n\nIf your username was `john-doe` and your repository was called `n8n-backups` and you wanted the workflows to go into a `workflows` folder you would set:\n\n- repo.owner - john-doe\n- repo.name - n8n-backups\n- repo.path - workflows/\n\n\nThe workflow calls itself using a subworkflow, to help reduce memory usage.",
            "height": 601,
            "width": 371,
            "color": 4
          },
          "id": "27a393cf-fd53-472b-ad3c-916fed7fe4c1",
          "name": "Sticky Note1",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -375.5,
            -121
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "content": "## Main workflow loop",
            "height": 435,
            "width": 886,
            "color": 7
          },
          "id": "fa28e794-9303-4ac6-936d-115e15a11a66",
          "name": "Sticky Note2",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -303,
            45
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "resource": "file",
            "operation": "get",
            "owner": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.owner }}"
            },
            "repository": {
              "__rl": true,
              "mode": "name",
              "value": "={{ $json.repo.name }}"
            },
            "filePath": "={{ $json.repo.path }}{{ $('Execute Workflow Trigger').item.json.id }}.json",
            "asBinaryProperty": false,
            "additionalParameters": {}
          },
          "id": "9acd553e-9a1c-45ea-a51c-22d782c367aa",
          "name": "Get file data",
          "type": "n8n-nodes-base.github",
          "position": [
            200,
            705
          ],
          "webhookId": "743111c3-2c21-4658-8097-a9fe966f43d2",
          "typeVersion": 1,
          "alwaysOutputData": true,
          "continueOnFail": true
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "6cf546c5-5737-4dbd-851b-17d68e0a3780",
                  "name": "repo.owner",
                  "type": "string",
                  "value": "john-doe"
                },
                {
                  "id": "452efa28-2dc6-4ea3-a7a2-c35d100d0382",
                  "name": "repo.name",
                  "type": "string",
                  "value": "n8n-backup"
                },
                {
                  "id": "81c4dc54-86bf-4432-a23f-22c7ea831e74",
                  "name": "repo.path",
                  "type": "string",
                  "value": "workflows/"
                }
              ]
            },
            "options": {}
          },
          "id": "c4116e81-ff99-4d91-a549-7e6bde0aa2db",
          "name": "Globals",
          "type": "n8n-nodes-base.set",
          "position": [
            -20,
            705
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "content": "## Edit this node 👇",
            "height": 80,
            "width": 150,
            "color": 4
          },
          "id": "eb7ffb53-b080-4126-9f47-f9b7a11773f5",
          "name": "Sticky Note3",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            0,
            660
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "inputSource": "passthrough"
          },
          "id": "b8c3e3d9-98ee-41cc-8644-361d49eb228d",
          "name": "Execute Workflow Trigger",
          "type": "n8n-nodes-base.executeWorkflowTrigger",
          "position": [
            -240,
            780
          ],
          "typeVersion": 1.1
        },
        {
          "parameters": {
            "workflowId": {
              "__rl": true,
              "mode": "id",
              "value": "={{ $workflow.id }}"
            },
            "workflowInputs": {
              "value": {},
              "schema": [],
              "mappingMode": "defineBelow",
              "matchingColumns": [],
              "attemptToConvertTypes": false,
              "convertFieldsToString": true
            },
            "mode": "each",
            "options": {}
          },
          "id": "030b83c8-5649-4730-aa15-512af424c547",
          "name": "Execute Workflow",
          "type": "n8n-nodes-base.executeWorkflow",
          "position": [
            420,
            220
          ],
          "typeVersion": 1.2
        },
        {
          "parameters": {
            "content": "### 💡 **Want to learn advanced n8n skills and earn money building workflows?**\n‎ ‎ ‎ ‎ ‎ ‎ ‎ ‎Check out [Scrapes Academy](https://www.skool.com/scrapes/about?ref=21f10ad99f4d46ba9b8aaea8c9f58c34)",
            "width": 640,
            "color": 4
          },
          "id": "3a6d7fce-1992-46ea-873f-fe1df4d9d920",
          "name": "Sticky Note16",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            80,
            -140
          ],
          "typeVersion": 1
        }
      ],
      "connections": {
        "n8n": {
          "main": [
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Globals": {
          "main": [
            [
              {
                "node": "Get file data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get File": {
          "main": [
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is new": {
          "main": [
            [
              {
                "node": "Create new file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Merge Items": {
          "main": [
            [
              {
                "node": "isDiffOrNew",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "isDiffOrNew": {
          "main": [
            [
              {
                "node": "Check Status",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check Status": {
          "main": [
            [
              {
                "node": "Same file - Do nothing",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is different",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "File is new",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get file data": {
          "main": [
            [
              {
                "node": "If file too large",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create new file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Loop Over Items": {
          "main": [
            [],
            [
              {
                "node": "Execute Workflow",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow": {
          "main": [
            [
              {
                "node": "Loop Over Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger": {
          "main": [
            [
              {
                "node": "n8n",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "File is different": {
          "main": [
            [
              {
                "node": "Edit existing file",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If file too large": {
          "main": [
            [
              {
                "node": "Get File",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Merge Items",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit existing file": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "On clicking 'execute'": {
          "main": [
            [
              {
                "node": "n8n",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Same file - Do nothing": {
          "main": [
            [
              {
                "node": "Return",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Execute Workflow Trigger": {
          "main": [
            [
              {
                "node": "Globals",
                "type": "main",
                "index": 0
              },
              {
                "node": "Merge Items",
                "type": "main",
                "index": 1
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "8477c2d3-f2d8-419d-b649-eb2b690fa3f7",
      "triggerCount": 0,
      "tags": []
    },
    {
      "createdAt": "2025-06-08T04:37:26.473Z",
      "updatedAt": "2025-06-08T21:58:54.080Z",
      "id": "RWRInHnUMu8eOZU1",
      "name": "Anthropic AI Agent: Claude Sonnet Opus 4 with Think and Web Search tool",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "public": true,
            "options": {
              "allowFileUploads": true
            }
          },
          "id": "0cf076fe-c6be-4336-8cc6-300d13cfc058",
          "name": "Chat Trigger",
          "type": "@n8n/n8n-nodes-langchain.chatTrigger",
          "typeVersion": 1.1,
          "position": [
            -400,
            100
          ],
          "webhookId": "n8n-chat-trigger"
        },
        {
          "parameters": {
            "options": {
              "systemMessage": "You are an expert n8n workflow automation specialist powered by Claude Opus. You excel at:\n\n**Advanced Capabilities:**\n- Complex workflow architecture and design\n- Custom node development and advanced scripting\n- Performance optimization for large-scale automations\n- Multi-step integration strategies\n- Advanced data transformation and processing\n- Enterprise-level automation solutions\n\n**Core Expertise:**\n- All n8n node types and their advanced configurations\n- Webhook and API integration strategies\n- Error handling and robust workflow design\n- Database operations and data flow optimization\n- Custom JavaScript/Python code integration\n- Workflow security and credential management\n\n**Response Guidelines:**\n- Provide detailed, step-by-step implementation guides\n- Include complete JSON configuration examples\n- Suggest multiple approaches for complex problems\n- Focus on scalable, maintainable solutions\n- Emphasize best practices and enterprise considerations\n- Break down complex workflows into logical components\n\nAlways provide expert-level guidance with concrete, actionable solutions.",
              "maxIterations": 10,
              "returnIntermediateSteps": false
            }
          },
          "id": "2340e96e-41dc-4429-9fbc-47ce59b039b1",
          "name": "AI Agent (N8N Expert)",
          "type": "@n8n/n8n-nodes-langchain.agent",
          "typeVersion": 1.6,
          "position": [
            32,
            100
          ]
        },
        {
          "parameters": {
            "model": {
              "__rl": true,
              "mode": "list",
              "value": "claude-3-opus-20240229",
              "cachedResultName": "Claude 3 Opus"
            },
            "options": {
              "temperature": 0.1,
              "thinking": false
            }
          },
          "id": "aaf0e7d2-69d6-4c3c-a64f-16cb1c2f0c0f",
          "name": "Claude Opus Model",
          "type": "@n8n/n8n-nodes-langchain.lmChatAnthropic",
          "typeVersion": 1.3,
          "position": [
            -180,
            320
          ],
          "credentials": {
            "anthropicApi": {
              "id": "l8nsyOPKZPhdPs1R",
              "name": "Anthropic account"
            }
          }
        },
        {
          "parameters": {
            "contextWindowLength": 15
          },
          "id": "bd9cff9a-0c6f-460f-bcc8-4909a6d36b0c",
          "name": "Window Buffer Memory",
          "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
          "typeVersion": 1.2,
          "position": [
            -60,
            320
          ]
        },
        {
          "parameters": {
            "name": "n8n_documentation_search",
            "description": "Search current n8n documentation, node references, and community solutions for accurate information",
            "jsCode": "\n// N8N Documentation Search Tool\nconst searchQuery = $parameter.query;\nconst category = $parameter.category || 'general';\n\n// Simulate documentation search with common n8n topics\nconst documentationResponses = {\n    'webhook': 'Webhooks in n8n are HTTP endpoints that can receive data from external services. Use the Webhook Trigger node to listen for incoming requests.',\n    'api': 'For API integrations, use the HTTP Request node. Configure authentication in credentials and use expressions for dynamic data.',\n    'error': 'Error handling in n8n can be implemented using the Error Trigger node or by configuring Continue On Fail in node settings.',\n    'loop': 'Use the Split in Batches node to process large datasets in chunks, or the Item Lists node for simple array operations.',\n    'code': 'The Code node allows JavaScript execution. Access input data with $input.all() and return results with return statement.',\n    'schedule': 'Use the Schedule Trigger node (formerly Cron) to run workflows on a schedule. Configure timing using cron expressions or intervals.',\n    'data': 'Data transformation can be done with Set node, Edit Fields node, or Code node for complex operations.',\n    'credential': 'Credentials are stored securely in n8n. Create them in Settings > Credentials and reference in nodes that need authentication.'\n};\n\n// Find relevant documentation\nlet response = documentationResponses[searchQuery.toLowerCase()] || \n              `Documentation for \"${searchQuery}\" - This would search n8n docs for: ${searchQuery}. Category: ${category}`;\n\nreturn [{\n    json: {\n        query: searchQuery,\n        category: category,\n        result: response,\n        source: 'n8n-docs'\n    }\n}];\n"
          },
          "id": "c070b38b-0d19-44e6-8230-cf6602d23f84",
          "name": "Documentation Search Tool",
          "type": "@n8n/n8n-nodes-langchain.toolCode",
          "typeVersion": 1.1,
          "position": [
            300,
            320
          ]
        },
        {
          "parameters": {
            "name": "workflow_analyzer",
            "description": "Analyze n8n workflow JSON for optimization opportunities, errors, and best practices",
            "jsCode": "\n// Workflow Analyzer Tool\nconst workflowJson = $parameter.workflow_json;\nconst analysisType = $parameter.analysis_type || 'general';\n\nlet analysis = {\n    issues: [],\n    recommendations: [],\n    score: 85\n};\n\ntry {\n    const workflow = typeof workflowJson === 'string' ? JSON.parse(workflowJson) : workflowJson;\n\n    // Basic analysis\n    if (!workflow.nodes || workflow.nodes.length === 0) {\n        analysis.issues.push('Workflow has no nodes');\n        analysis.score -= 30;\n    }\n\n    // Check for error handling\n    const hasErrorHandling = workflow.nodes.some(node => \n        node.type.includes('error') || \n        (node.parameters && node.parameters.continueOnFail)\n    );\n\n    if (!hasErrorHandling) {\n        analysis.recommendations.push('Add error handling with Error Trigger or Continue On Fail settings');\n        analysis.score -= 10;\n    }\n\n    // Check for credentials\n    const nodesWithCreds = workflow.nodes.filter(node => node.credentials).length;\n    if (nodesWithCreds > 0) {\n        analysis.recommendations.push('Ensure all credentials are properly configured and secured');\n    }\n\n    analysis.nodeCount = workflow.nodes.length;\n    analysis.analysisType = analysisType;\n\n} catch (error) {\n    analysis.issues.push('Invalid JSON format provided');\n    analysis.score = 0;\n}\n\nreturn [{\n    json: {\n        analysis: analysis,\n        timestamp: new Date().toISOString()\n    }\n}];\n"
          },
          "id": "eb3a5bd8-b6ce-4081-82b0-73782ae5cdab",
          "name": "Workflow Analyzer Tool",
          "type": "@n8n/n8n-nodes-langchain.toolCode",
          "typeVersion": 1.1,
          "position": [
            60,
            320
          ]
        },
        {
          "parameters": {
            "name": "error_troubleshooter",
            "description": "Diagnose and provide solutions for common n8n errors and issues",
            "jsCode": "\n// Error Troubleshooter Tool\nconst errorMessage = $parameter.error_message;\nconst nodeType = $parameter.node_type || 'unknown';\nconst context = $parameter.context || '';\n\nconst commonSolutions = {\n    'credential': {\n        category: 'Authentication',\n        solutions: [\n            'Verify API credentials are correct and not expired',\n            'Check if credential type matches the node requirements',\n            'Ensure proper permissions are granted for the credential'\n        ]\n    },\n    'connection': {\n        category: 'Connection Issues',\n        solutions: [\n            'Check network connectivity and firewall settings',\n            'Verify API endpoints are accessible',\n            'Test with a simple HTTP Request first'\n        ]\n    },\n    'data': {\n        category: 'Data Format',\n        solutions: [\n            'Verify input data structure matches expected format',\n            'Use Code node to transform data if needed',\n            'Check for null or undefined values'\n        ]\n    },\n    'memory': {\n        category: 'Memory/Performance',\n        solutions: [\n            'Process data in smaller batches using Split in Batches',\n            'Optimize expressions and reduce unnecessary data',\n            'Consider using streaming for large datasets'\n        ]\n    },\n    'rate_limit': {\n        category: 'Rate Limiting',\n        solutions: [\n            'Add delays between requests using Wait node',\n            'Implement exponential backoff with retry logic',\n            'Check API rate limits and adjust accordingly'\n        ]\n    }\n};\n\n// Analyze error message\nlet category = 'general';\nlet solutions = ['Check n8n logs for detailed error information'];\n\nObject.keys(commonSolutions).forEach(key => {\n    if (errorMessage.toLowerCase().includes(key) || \n        errorMessage.toLowerCase().includes(key.replace('_', ' '))) {\n        category = key;\n        solutions = commonSolutions[key].solutions;\n    }\n});\n\nconst diagnosis = {\n    error_message: errorMessage,\n    node_type: nodeType,\n    category: commonSolutions[category]?.category || 'General',\n    solutions: solutions,\n    prevention_tips: [\n        'Enable Continue On Fail for non-critical operations',\n        'Add proper error handling with Error Trigger node',\n        'Test workflows with various data scenarios',\n        'Monitor workflow execution regularly'\n    ]\n};\n\nreturn [{\n    json: {\n        diagnosis: diagnosis,\n        context: context,\n        analyzed_at: new Date().toISOString()\n    }\n}];\n"
          },
          "id": "8b8ea907-7d98-4df0-8989-976093d82ea7",
          "name": "Error Troubleshooter Tool",
          "type": "@n8n/n8n-nodes-langchain.toolCode",
          "typeVersion": 1.1,
          "position": [
            180,
            320
          ]
        },
        {
          "parameters": {
            "name": "template_generator",
            "description": "Generate complete n8n workflow templates based on requirements",
            "jsCode": "// Template Generator Tool - Corrected Implementation\nconst query = $parameter.query;\ntry {\n  const requirements = typeof query === 'string' ? JSON.parse(query) : query;\n  const templateType = requirements.type || 'webhook';\n  const complexity = requirements.complexity || 'basic';\n  const template = { nodes: [], connections: {} };\n  switch(templateType.toLowerCase()) {\n    case 'webhook':\n      template.nodes.push({ type: 'n8n-nodes-base.webhook', parameters: { httpMethod: 'GET', responseMode: 'onReceived' } });\n      break;\n    case 'http-request':\n      template.nodes.push({ type: 'n8n-nodes-base.httpRequest', parameters: { url: 'https://api.example.com', options: {} } });\n      break;\n    default:\n      throw new Error('Unsupported template type');\n  }\n  if (complexity === 'advanced') {\n    template.nodes.push({ type: 'n8n-nodes-base.errorTrigger', parameters: { continueOnFail: true } });\n  }\n  return JSON.stringify({ template, instructions: `Generated ${complexity} ${templateType} workflow`, timestamp: new Date().toISOString() });\n} catch (error) {\n  return JSON.stringify({ error: true, message: error.message, stack: error.stack });\n}"
          },
          "id": "1013c37e-b2e1-408e-b555-08c52267dfc9",
          "name": "Template Generator",
          "type": "@n8n/n8n-nodes-langchain.toolCode",
          "typeVersion": 1,
          "position": [
            420,
            320
          ]
        }
      ],
      "connections": {
        "Chat Trigger": {
          "main": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Window Buffer Memory": {
          "ai_memory": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_memory",
                "index": 0
              }
            ]
          ]
        },
        "Claude Opus Model": {
          "ai_languageModel": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_languageModel",
                "index": 0
              }
            ]
          ]
        },
        "Workflow Analyzer Tool": {
          "ai_tool": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Error Troubleshooter Tool": {
          "ai_tool": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Documentation Search Tool": {
          "ai_tool": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        },
        "Template Generator": {
          "ai_tool": [
            [
              {
                "node": "AI Agent (N8N Expert)",
                "type": "ai_tool",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "3db7bbda-06a0-4aa4-8130-b6d1a893cc22",
      "triggerCount": 1,
      "tags": []
    },
    {
      "createdAt": "2025-06-13T14:51:46.482Z",
      "updatedAt": "2025-06-13T14:51:46.482Z",
      "id": "UTUVl20TvZ6qiqDj",
      "name": "My workflow 10",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {},
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            0,
            0
          ],
          "id": "40269e0c-0895-4b82-b569-f11c5c7a3e55",
          "name": "When clicking ‘Execute workflow’"
        }
      ],
      "connections": {},
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "f43519e8-2fd2-427f-a583-69bc7a9f58de",
      "triggerCount": 0,
      "tags": []
    }
  ],
  "nextCursor": null
}